
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = {
  id: number
  login: string | null
  nickname: string
  avatarURL: string
}

/**
 * Model Friend
 * 
 */
export type Friend = {
  requester: number
  requestee: number
  status: boolean
}

/**
 * Model Blocked
 * 
 */
export type Blocked = {
  blocker: number
  blockee: number
}

/**
 * Model Channel
 * 
 */
export type Channel = {
  id: number
  name: string
  owner: number
  type: ChanType
  passwd: string | null
}

/**
 * Model ChanMember
 * 
 */
export type ChanMember = {
  chanId: number
  member: number
  isAdmin: boolean
  muteTime: Date
}

/**
 * Model ChanBan
 * 
 */
export type ChanBan = {
  chanId: number
  bannedUser: number
}

/**
 * Model ChanMessage
 * 
 */
export type ChanMessage = {
  sender: number
  chanId: number
  timeSent: Date
  content: string
}

/**
 * Model PrivMessage
 * 
 */
export type PrivMessage = {
  sender: number
  recipient: number
  timeSent: Date
  content: string
}

/**
 * Model MatchHistory
 * 
 */
export type MatchHistory = {
  id: number
  player1: number
  player2: number
  timeStart: Date
  timeEnd: Date | null
  winner: number | null
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const ChanType: {
  PUBLIC: 'PUBLIC',
  PRIVATE: 'PRIVATE',
  PROTECTED: 'PROTECTED'
};

export type ChanType = (typeof ChanType)[keyof typeof ChanType]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.friend`: Exposes CRUD operations for the **Friend** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Friends
    * const friends = await prisma.friend.findMany()
    * ```
    */
  get friend(): Prisma.FriendDelegate<GlobalReject>;

  /**
   * `prisma.blocked`: Exposes CRUD operations for the **Blocked** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Blockeds
    * const blockeds = await prisma.blocked.findMany()
    * ```
    */
  get blocked(): Prisma.BlockedDelegate<GlobalReject>;

  /**
   * `prisma.channel`: Exposes CRUD operations for the **Channel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Channels
    * const channels = await prisma.channel.findMany()
    * ```
    */
  get channel(): Prisma.ChannelDelegate<GlobalReject>;

  /**
   * `prisma.chanMember`: Exposes CRUD operations for the **ChanMember** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChanMembers
    * const chanMembers = await prisma.chanMember.findMany()
    * ```
    */
  get chanMember(): Prisma.ChanMemberDelegate<GlobalReject>;

  /**
   * `prisma.chanBan`: Exposes CRUD operations for the **ChanBan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChanBans
    * const chanBans = await prisma.chanBan.findMany()
    * ```
    */
  get chanBan(): Prisma.ChanBanDelegate<GlobalReject>;

  /**
   * `prisma.chanMessage`: Exposes CRUD operations for the **ChanMessage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChanMessages
    * const chanMessages = await prisma.chanMessage.findMany()
    * ```
    */
  get chanMessage(): Prisma.ChanMessageDelegate<GlobalReject>;

  /**
   * `prisma.privMessage`: Exposes CRUD operations for the **PrivMessage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PrivMessages
    * const privMessages = await prisma.privMessage.findMany()
    * ```
    */
  get privMessage(): Prisma.PrivMessageDelegate<GlobalReject>;

  /**
   * `prisma.matchHistory`: Exposes CRUD operations for the **MatchHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MatchHistories
    * const matchHistories = await prisma.matchHistory.findMany()
    * ```
    */
  get matchHistory(): Prisma.MatchHistoryDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.13.0
   * Query Engine version: 1e7af066ee9cb95cf3a403c78d9aab3e6b04f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Friend: 'Friend',
    Blocked: 'Blocked',
    Channel: 'Channel',
    ChanMember: 'ChanMember',
    ChanBan: 'ChanBan',
    ChanMessage: 'ChanMessage',
    PrivMessage: 'PrivMessage',
    MatchHistory: 'MatchHistory'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    requester: number
    requestee: number
    blocker: number
    blockee: number
    owner: number
    member: number
    banned: number
    chanSender: number
    privSender: number
    privReceipt: number
    player1: number
    player2: number
    winner: number
  }

  export type UserCountOutputTypeSelect = {
    requester?: boolean
    requestee?: boolean
    blocker?: boolean
    blockee?: boolean
    owner?: boolean
    member?: boolean
    banned?: boolean
    chanSender?: boolean
    privSender?: boolean
    privReceipt?: boolean
    player1?: boolean
    player2?: boolean
    winner?: boolean
  }

  export type UserCountOutputTypeGetPayload<S extends boolean | null | undefined | UserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UserCountOutputTypeArgs)
    ? UserCountOutputType 
    : S extends { select: any } & (UserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
      : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type ChannelCountOutputType
   */


  export type ChannelCountOutputType = {
    memChan: number
    banChan: number
    messChan: number
  }

  export type ChannelCountOutputTypeSelect = {
    memChan?: boolean
    banChan?: boolean
    messChan?: boolean
  }

  export type ChannelCountOutputTypeGetPayload<S extends boolean | null | undefined | ChannelCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ChannelCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ChannelCountOutputTypeArgs)
    ? ChannelCountOutputType 
    : S extends { select: any } & (ChannelCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ChannelCountOutputType ? ChannelCountOutputType[P] : never
  } 
      : ChannelCountOutputType




  // Custom InputTypes

  /**
   * ChannelCountOutputType without action
   */
  export type ChannelCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ChannelCountOutputType
     */
    select?: ChannelCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    login: string | null
    nickname: string | null
    avatarURL: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    login: string | null
    nickname: string | null
    avatarURL: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    login: number
    nickname: number
    avatarURL: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    login?: true
    nickname?: true
    avatarURL?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    login?: true
    nickname?: true
    avatarURL?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    login?: true
    nickname?: true
    avatarURL?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    login: string | null
    nickname: string
    avatarURL: string
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    login?: boolean
    nickname?: boolean
    avatarURL?: boolean
    requester?: boolean | User$requesterArgs
    requestee?: boolean | User$requesteeArgs
    blocker?: boolean | User$blockerArgs
    blockee?: boolean | User$blockeeArgs
    owner?: boolean | User$ownerArgs
    member?: boolean | User$memberArgs
    banned?: boolean | User$bannedArgs
    chanSender?: boolean | User$chanSenderArgs
    privSender?: boolean | User$privSenderArgs
    privReceipt?: boolean | User$privReceiptArgs
    player1?: boolean | User$player1Args
    player2?: boolean | User$player2Args
    winner?: boolean | User$winnerArgs
    _count?: boolean | UserCountOutputTypeArgs
  }


  export type UserInclude = {
    requester?: boolean | User$requesterArgs
    requestee?: boolean | User$requesteeArgs
    blocker?: boolean | User$blockerArgs
    blockee?: boolean | User$blockeeArgs
    owner?: boolean | User$ownerArgs
    member?: boolean | User$memberArgs
    banned?: boolean | User$bannedArgs
    chanSender?: boolean | User$chanSenderArgs
    privSender?: boolean | User$privSenderArgs
    privReceipt?: boolean | User$privReceiptArgs
    player1?: boolean | User$player1Args
    player2?: boolean | User$player2Args
    winner?: boolean | User$winnerArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<S extends boolean | null | undefined | UserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'requester' ? Array < FriendGetPayload<S['include'][P]>>  :
        P extends 'requestee' ? Array < FriendGetPayload<S['include'][P]>>  :
        P extends 'blocker' ? Array < BlockedGetPayload<S['include'][P]>>  :
        P extends 'blockee' ? Array < BlockedGetPayload<S['include'][P]>>  :
        P extends 'owner' ? Array < ChannelGetPayload<S['include'][P]>>  :
        P extends 'member' ? Array < ChanMemberGetPayload<S['include'][P]>>  :
        P extends 'banned' ? Array < ChanBanGetPayload<S['include'][P]>>  :
        P extends 'chanSender' ? Array < ChanMessageGetPayload<S['include'][P]>>  :
        P extends 'privSender' ? Array < PrivMessageGetPayload<S['include'][P]>>  :
        P extends 'privReceipt' ? Array < PrivMessageGetPayload<S['include'][P]>>  :
        P extends 'player1' ? Array < MatchHistoryGetPayload<S['include'][P]>>  :
        P extends 'player2' ? Array < MatchHistoryGetPayload<S['include'][P]>>  :
        P extends 'winner' ? Array < MatchHistoryGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'requester' ? Array < FriendGetPayload<S['select'][P]>>  :
        P extends 'requestee' ? Array < FriendGetPayload<S['select'][P]>>  :
        P extends 'blocker' ? Array < BlockedGetPayload<S['select'][P]>>  :
        P extends 'blockee' ? Array < BlockedGetPayload<S['select'][P]>>  :
        P extends 'owner' ? Array < ChannelGetPayload<S['select'][P]>>  :
        P extends 'member' ? Array < ChanMemberGetPayload<S['select'][P]>>  :
        P extends 'banned' ? Array < ChanBanGetPayload<S['select'][P]>>  :
        P extends 'chanSender' ? Array < ChanMessageGetPayload<S['select'][P]>>  :
        P extends 'privSender' ? Array < PrivMessageGetPayload<S['select'][P]>>  :
        P extends 'privReceipt' ? Array < PrivMessageGetPayload<S['select'][P]>>  :
        P extends 'player1' ? Array < MatchHistoryGetPayload<S['select'][P]>>  :
        P extends 'player2' ? Array < MatchHistoryGetPayload<S['select'][P]>>  :
        P extends 'winner' ? Array < MatchHistoryGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): Prisma.PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    requester<T extends User$requesterArgs= {}>(args?: Subset<T, User$requesterArgs>): Prisma.PrismaPromise<Array<FriendGetPayload<T>>| Null>;

    requestee<T extends User$requesteeArgs= {}>(args?: Subset<T, User$requesteeArgs>): Prisma.PrismaPromise<Array<FriendGetPayload<T>>| Null>;

    blocker<T extends User$blockerArgs= {}>(args?: Subset<T, User$blockerArgs>): Prisma.PrismaPromise<Array<BlockedGetPayload<T>>| Null>;

    blockee<T extends User$blockeeArgs= {}>(args?: Subset<T, User$blockeeArgs>): Prisma.PrismaPromise<Array<BlockedGetPayload<T>>| Null>;

    owner<T extends User$ownerArgs= {}>(args?: Subset<T, User$ownerArgs>): Prisma.PrismaPromise<Array<ChannelGetPayload<T>>| Null>;

    member<T extends User$memberArgs= {}>(args?: Subset<T, User$memberArgs>): Prisma.PrismaPromise<Array<ChanMemberGetPayload<T>>| Null>;

    banned<T extends User$bannedArgs= {}>(args?: Subset<T, User$bannedArgs>): Prisma.PrismaPromise<Array<ChanBanGetPayload<T>>| Null>;

    chanSender<T extends User$chanSenderArgs= {}>(args?: Subset<T, User$chanSenderArgs>): Prisma.PrismaPromise<Array<ChanMessageGetPayload<T>>| Null>;

    privSender<T extends User$privSenderArgs= {}>(args?: Subset<T, User$privSenderArgs>): Prisma.PrismaPromise<Array<PrivMessageGetPayload<T>>| Null>;

    privReceipt<T extends User$privReceiptArgs= {}>(args?: Subset<T, User$privReceiptArgs>): Prisma.PrismaPromise<Array<PrivMessageGetPayload<T>>| Null>;

    player1<T extends User$player1Args= {}>(args?: Subset<T, User$player1Args>): Prisma.PrismaPromise<Array<MatchHistoryGetPayload<T>>| Null>;

    player2<T extends User$player2Args= {}>(args?: Subset<T, User$player2Args>): Prisma.PrismaPromise<Array<MatchHistoryGetPayload<T>>| Null>;

    winner<T extends User$winnerArgs= {}>(args?: Subset<T, User$winnerArgs>): Prisma.PrismaPromise<Array<MatchHistoryGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.requester
   */
  export type User$requesterArgs = {
    /**
     * Select specific fields to fetch from the Friend
     */
    select?: FriendSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendInclude | null
    where?: FriendWhereInput
    orderBy?: Enumerable<FriendOrderByWithRelationInput>
    cursor?: FriendWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FriendScalarFieldEnum>
  }


  /**
   * User.requestee
   */
  export type User$requesteeArgs = {
    /**
     * Select specific fields to fetch from the Friend
     */
    select?: FriendSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendInclude | null
    where?: FriendWhereInput
    orderBy?: Enumerable<FriendOrderByWithRelationInput>
    cursor?: FriendWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FriendScalarFieldEnum>
  }


  /**
   * User.blocker
   */
  export type User$blockerArgs = {
    /**
     * Select specific fields to fetch from the Blocked
     */
    select?: BlockedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlockedInclude | null
    where?: BlockedWhereInput
    orderBy?: Enumerable<BlockedOrderByWithRelationInput>
    cursor?: BlockedWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<BlockedScalarFieldEnum>
  }


  /**
   * User.blockee
   */
  export type User$blockeeArgs = {
    /**
     * Select specific fields to fetch from the Blocked
     */
    select?: BlockedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlockedInclude | null
    where?: BlockedWhereInput
    orderBy?: Enumerable<BlockedOrderByWithRelationInput>
    cursor?: BlockedWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<BlockedScalarFieldEnum>
  }


  /**
   * User.owner
   */
  export type User$ownerArgs = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude | null
    where?: ChannelWhereInput
    orderBy?: Enumerable<ChannelOrderByWithRelationInput>
    cursor?: ChannelWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ChannelScalarFieldEnum>
  }


  /**
   * User.member
   */
  export type User$memberArgs = {
    /**
     * Select specific fields to fetch from the ChanMember
     */
    select?: ChanMemberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChanMemberInclude | null
    where?: ChanMemberWhereInput
    orderBy?: Enumerable<ChanMemberOrderByWithRelationInput>
    cursor?: ChanMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ChanMemberScalarFieldEnum>
  }


  /**
   * User.banned
   */
  export type User$bannedArgs = {
    /**
     * Select specific fields to fetch from the ChanBan
     */
    select?: ChanBanSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChanBanInclude | null
    where?: ChanBanWhereInput
    orderBy?: Enumerable<ChanBanOrderByWithRelationInput>
    cursor?: ChanBanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ChanBanScalarFieldEnum>
  }


  /**
   * User.chanSender
   */
  export type User$chanSenderArgs = {
    /**
     * Select specific fields to fetch from the ChanMessage
     */
    select?: ChanMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChanMessageInclude | null
    where?: ChanMessageWhereInput
    orderBy?: Enumerable<ChanMessageOrderByWithRelationInput>
    cursor?: ChanMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ChanMessageScalarFieldEnum>
  }


  /**
   * User.privSender
   */
  export type User$privSenderArgs = {
    /**
     * Select specific fields to fetch from the PrivMessage
     */
    select?: PrivMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrivMessageInclude | null
    where?: PrivMessageWhereInput
    orderBy?: Enumerable<PrivMessageOrderByWithRelationInput>
    cursor?: PrivMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PrivMessageScalarFieldEnum>
  }


  /**
   * User.privReceipt
   */
  export type User$privReceiptArgs = {
    /**
     * Select specific fields to fetch from the PrivMessage
     */
    select?: PrivMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrivMessageInclude | null
    where?: PrivMessageWhereInput
    orderBy?: Enumerable<PrivMessageOrderByWithRelationInput>
    cursor?: PrivMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PrivMessageScalarFieldEnum>
  }


  /**
   * User.player1
   */
  export type User$player1Args = {
    /**
     * Select specific fields to fetch from the MatchHistory
     */
    select?: MatchHistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchHistoryInclude | null
    where?: MatchHistoryWhereInput
    orderBy?: Enumerable<MatchHistoryOrderByWithRelationInput>
    cursor?: MatchHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MatchHistoryScalarFieldEnum>
  }


  /**
   * User.player2
   */
  export type User$player2Args = {
    /**
     * Select specific fields to fetch from the MatchHistory
     */
    select?: MatchHistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchHistoryInclude | null
    where?: MatchHistoryWhereInput
    orderBy?: Enumerable<MatchHistoryOrderByWithRelationInput>
    cursor?: MatchHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MatchHistoryScalarFieldEnum>
  }


  /**
   * User.winner
   */
  export type User$winnerArgs = {
    /**
     * Select specific fields to fetch from the MatchHistory
     */
    select?: MatchHistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchHistoryInclude | null
    where?: MatchHistoryWhereInput
    orderBy?: Enumerable<MatchHistoryOrderByWithRelationInput>
    cursor?: MatchHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MatchHistoryScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
  }



  /**
   * Model Friend
   */


  export type AggregateFriend = {
    _count: FriendCountAggregateOutputType | null
    _avg: FriendAvgAggregateOutputType | null
    _sum: FriendSumAggregateOutputType | null
    _min: FriendMinAggregateOutputType | null
    _max: FriendMaxAggregateOutputType | null
  }

  export type FriendAvgAggregateOutputType = {
    requester: number | null
    requestee: number | null
  }

  export type FriendSumAggregateOutputType = {
    requester: number | null
    requestee: number | null
  }

  export type FriendMinAggregateOutputType = {
    requester: number | null
    requestee: number | null
    status: boolean | null
  }

  export type FriendMaxAggregateOutputType = {
    requester: number | null
    requestee: number | null
    status: boolean | null
  }

  export type FriendCountAggregateOutputType = {
    requester: number
    requestee: number
    status: number
    _all: number
  }


  export type FriendAvgAggregateInputType = {
    requester?: true
    requestee?: true
  }

  export type FriendSumAggregateInputType = {
    requester?: true
    requestee?: true
  }

  export type FriendMinAggregateInputType = {
    requester?: true
    requestee?: true
    status?: true
  }

  export type FriendMaxAggregateInputType = {
    requester?: true
    requestee?: true
    status?: true
  }

  export type FriendCountAggregateInputType = {
    requester?: true
    requestee?: true
    status?: true
    _all?: true
  }

  export type FriendAggregateArgs = {
    /**
     * Filter which Friend to aggregate.
     */
    where?: FriendWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Friends to fetch.
     */
    orderBy?: Enumerable<FriendOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FriendWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Friends from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Friends.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Friends
    **/
    _count?: true | FriendCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FriendAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FriendSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FriendMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FriendMaxAggregateInputType
  }

  export type GetFriendAggregateType<T extends FriendAggregateArgs> = {
        [P in keyof T & keyof AggregateFriend]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFriend[P]>
      : GetScalarType<T[P], AggregateFriend[P]>
  }




  export type FriendGroupByArgs = {
    where?: FriendWhereInput
    orderBy?: Enumerable<FriendOrderByWithAggregationInput>
    by: FriendScalarFieldEnum[]
    having?: FriendScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FriendCountAggregateInputType | true
    _avg?: FriendAvgAggregateInputType
    _sum?: FriendSumAggregateInputType
    _min?: FriendMinAggregateInputType
    _max?: FriendMaxAggregateInputType
  }


  export type FriendGroupByOutputType = {
    requester: number
    requestee: number
    status: boolean
    _count: FriendCountAggregateOutputType | null
    _avg: FriendAvgAggregateOutputType | null
    _sum: FriendSumAggregateOutputType | null
    _min: FriendMinAggregateOutputType | null
    _max: FriendMaxAggregateOutputType | null
  }

  type GetFriendGroupByPayload<T extends FriendGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<FriendGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FriendGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FriendGroupByOutputType[P]>
            : GetScalarType<T[P], FriendGroupByOutputType[P]>
        }
      >
    >


  export type FriendSelect = {
    requester?: boolean
    requestee?: boolean
    status?: boolean
    requesterRef?: boolean | UserArgs
    requesteeRef?: boolean | UserArgs
  }


  export type FriendInclude = {
    requesterRef?: boolean | UserArgs
    requesteeRef?: boolean | UserArgs
  }

  export type FriendGetPayload<S extends boolean | null | undefined | FriendArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Friend :
    S extends undefined ? never :
    S extends { include: any } & (FriendArgs | FriendFindManyArgs)
    ? Friend  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'requesterRef' ? UserGetPayload<S['include'][P]> :
        P extends 'requesteeRef' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (FriendArgs | FriendFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'requesterRef' ? UserGetPayload<S['select'][P]> :
        P extends 'requesteeRef' ? UserGetPayload<S['select'][P]> :  P extends keyof Friend ? Friend[P] : never
  } 
      : Friend


  type FriendCountArgs = 
    Omit<FriendFindManyArgs, 'select' | 'include'> & {
      select?: FriendCountAggregateInputType | true
    }

  export interface FriendDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Friend that matches the filter.
     * @param {FriendFindUniqueArgs} args - Arguments to find a Friend
     * @example
     * // Get one Friend
     * const friend = await prisma.friend.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FriendFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FriendFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Friend'> extends True ? Prisma__FriendClient<FriendGetPayload<T>> : Prisma__FriendClient<FriendGetPayload<T> | null, null>

    /**
     * Find one Friend that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FriendFindUniqueOrThrowArgs} args - Arguments to find a Friend
     * @example
     * // Get one Friend
     * const friend = await prisma.friend.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FriendFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, FriendFindUniqueOrThrowArgs>
    ): Prisma__FriendClient<FriendGetPayload<T>>

    /**
     * Find the first Friend that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendFindFirstArgs} args - Arguments to find a Friend
     * @example
     * // Get one Friend
     * const friend = await prisma.friend.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FriendFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FriendFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Friend'> extends True ? Prisma__FriendClient<FriendGetPayload<T>> : Prisma__FriendClient<FriendGetPayload<T> | null, null>

    /**
     * Find the first Friend that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendFindFirstOrThrowArgs} args - Arguments to find a Friend
     * @example
     * // Get one Friend
     * const friend = await prisma.friend.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FriendFindFirstOrThrowArgs>(
      args?: SelectSubset<T, FriendFindFirstOrThrowArgs>
    ): Prisma__FriendClient<FriendGetPayload<T>>

    /**
     * Find zero or more Friends that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Friends
     * const friends = await prisma.friend.findMany()
     * 
     * // Get first 10 Friends
     * const friends = await prisma.friend.findMany({ take: 10 })
     * 
     * // Only select the `requester`
     * const friendWithRequesterOnly = await prisma.friend.findMany({ select: { requester: true } })
     * 
    **/
    findMany<T extends FriendFindManyArgs>(
      args?: SelectSubset<T, FriendFindManyArgs>
    ): Prisma.PrismaPromise<Array<FriendGetPayload<T>>>

    /**
     * Create a Friend.
     * @param {FriendCreateArgs} args - Arguments to create a Friend.
     * @example
     * // Create one Friend
     * const Friend = await prisma.friend.create({
     *   data: {
     *     // ... data to create a Friend
     *   }
     * })
     * 
    **/
    create<T extends FriendCreateArgs>(
      args: SelectSubset<T, FriendCreateArgs>
    ): Prisma__FriendClient<FriendGetPayload<T>>

    /**
     * Create many Friends.
     *     @param {FriendCreateManyArgs} args - Arguments to create many Friends.
     *     @example
     *     // Create many Friends
     *     const friend = await prisma.friend.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FriendCreateManyArgs>(
      args?: SelectSubset<T, FriendCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Friend.
     * @param {FriendDeleteArgs} args - Arguments to delete one Friend.
     * @example
     * // Delete one Friend
     * const Friend = await prisma.friend.delete({
     *   where: {
     *     // ... filter to delete one Friend
     *   }
     * })
     * 
    **/
    delete<T extends FriendDeleteArgs>(
      args: SelectSubset<T, FriendDeleteArgs>
    ): Prisma__FriendClient<FriendGetPayload<T>>

    /**
     * Update one Friend.
     * @param {FriendUpdateArgs} args - Arguments to update one Friend.
     * @example
     * // Update one Friend
     * const friend = await prisma.friend.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FriendUpdateArgs>(
      args: SelectSubset<T, FriendUpdateArgs>
    ): Prisma__FriendClient<FriendGetPayload<T>>

    /**
     * Delete zero or more Friends.
     * @param {FriendDeleteManyArgs} args - Arguments to filter Friends to delete.
     * @example
     * // Delete a few Friends
     * const { count } = await prisma.friend.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FriendDeleteManyArgs>(
      args?: SelectSubset<T, FriendDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Friends.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Friends
     * const friend = await prisma.friend.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FriendUpdateManyArgs>(
      args: SelectSubset<T, FriendUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Friend.
     * @param {FriendUpsertArgs} args - Arguments to update or create a Friend.
     * @example
     * // Update or create a Friend
     * const friend = await prisma.friend.upsert({
     *   create: {
     *     // ... data to create a Friend
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Friend we want to update
     *   }
     * })
    **/
    upsert<T extends FriendUpsertArgs>(
      args: SelectSubset<T, FriendUpsertArgs>
    ): Prisma__FriendClient<FriendGetPayload<T>>

    /**
     * Count the number of Friends.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendCountArgs} args - Arguments to filter Friends to count.
     * @example
     * // Count the number of Friends
     * const count = await prisma.friend.count({
     *   where: {
     *     // ... the filter for the Friends we want to count
     *   }
     * })
    **/
    count<T extends FriendCountArgs>(
      args?: Subset<T, FriendCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FriendCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Friend.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FriendAggregateArgs>(args: Subset<T, FriendAggregateArgs>): Prisma.PrismaPromise<GetFriendAggregateType<T>>

    /**
     * Group by Friend.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FriendGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FriendGroupByArgs['orderBy'] }
        : { orderBy?: FriendGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FriendGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFriendGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Friend.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FriendClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    requesterRef<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    requesteeRef<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Friend base type for findUnique actions
   */
  export type FriendFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Friend
     */
    select?: FriendSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendInclude | null
    /**
     * Filter, which Friend to fetch.
     */
    where: FriendWhereUniqueInput
  }

  /**
   * Friend findUnique
   */
  export interface FriendFindUniqueArgs extends FriendFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Friend findUniqueOrThrow
   */
  export type FriendFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Friend
     */
    select?: FriendSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendInclude | null
    /**
     * Filter, which Friend to fetch.
     */
    where: FriendWhereUniqueInput
  }


  /**
   * Friend base type for findFirst actions
   */
  export type FriendFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Friend
     */
    select?: FriendSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendInclude | null
    /**
     * Filter, which Friend to fetch.
     */
    where?: FriendWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Friends to fetch.
     */
    orderBy?: Enumerable<FriendOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Friends.
     */
    cursor?: FriendWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Friends from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Friends.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Friends.
     */
    distinct?: Enumerable<FriendScalarFieldEnum>
  }

  /**
   * Friend findFirst
   */
  export interface FriendFindFirstArgs extends FriendFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Friend findFirstOrThrow
   */
  export type FriendFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Friend
     */
    select?: FriendSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendInclude | null
    /**
     * Filter, which Friend to fetch.
     */
    where?: FriendWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Friends to fetch.
     */
    orderBy?: Enumerable<FriendOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Friends.
     */
    cursor?: FriendWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Friends from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Friends.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Friends.
     */
    distinct?: Enumerable<FriendScalarFieldEnum>
  }


  /**
   * Friend findMany
   */
  export type FriendFindManyArgs = {
    /**
     * Select specific fields to fetch from the Friend
     */
    select?: FriendSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendInclude | null
    /**
     * Filter, which Friends to fetch.
     */
    where?: FriendWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Friends to fetch.
     */
    orderBy?: Enumerable<FriendOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Friends.
     */
    cursor?: FriendWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Friends from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Friends.
     */
    skip?: number
    distinct?: Enumerable<FriendScalarFieldEnum>
  }


  /**
   * Friend create
   */
  export type FriendCreateArgs = {
    /**
     * Select specific fields to fetch from the Friend
     */
    select?: FriendSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendInclude | null
    /**
     * The data needed to create a Friend.
     */
    data: XOR<FriendCreateInput, FriendUncheckedCreateInput>
  }


  /**
   * Friend createMany
   */
  export type FriendCreateManyArgs = {
    /**
     * The data used to create many Friends.
     */
    data: Enumerable<FriendCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Friend update
   */
  export type FriendUpdateArgs = {
    /**
     * Select specific fields to fetch from the Friend
     */
    select?: FriendSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendInclude | null
    /**
     * The data needed to update a Friend.
     */
    data: XOR<FriendUpdateInput, FriendUncheckedUpdateInput>
    /**
     * Choose, which Friend to update.
     */
    where: FriendWhereUniqueInput
  }


  /**
   * Friend updateMany
   */
  export type FriendUpdateManyArgs = {
    /**
     * The data used to update Friends.
     */
    data: XOR<FriendUpdateManyMutationInput, FriendUncheckedUpdateManyInput>
    /**
     * Filter which Friends to update
     */
    where?: FriendWhereInput
  }


  /**
   * Friend upsert
   */
  export type FriendUpsertArgs = {
    /**
     * Select specific fields to fetch from the Friend
     */
    select?: FriendSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendInclude | null
    /**
     * The filter to search for the Friend to update in case it exists.
     */
    where: FriendWhereUniqueInput
    /**
     * In case the Friend found by the `where` argument doesn't exist, create a new Friend with this data.
     */
    create: XOR<FriendCreateInput, FriendUncheckedCreateInput>
    /**
     * In case the Friend was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FriendUpdateInput, FriendUncheckedUpdateInput>
  }


  /**
   * Friend delete
   */
  export type FriendDeleteArgs = {
    /**
     * Select specific fields to fetch from the Friend
     */
    select?: FriendSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendInclude | null
    /**
     * Filter which Friend to delete.
     */
    where: FriendWhereUniqueInput
  }


  /**
   * Friend deleteMany
   */
  export type FriendDeleteManyArgs = {
    /**
     * Filter which Friends to delete
     */
    where?: FriendWhereInput
  }


  /**
   * Friend without action
   */
  export type FriendArgs = {
    /**
     * Select specific fields to fetch from the Friend
     */
    select?: FriendSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendInclude | null
  }



  /**
   * Model Blocked
   */


  export type AggregateBlocked = {
    _count: BlockedCountAggregateOutputType | null
    _avg: BlockedAvgAggregateOutputType | null
    _sum: BlockedSumAggregateOutputType | null
    _min: BlockedMinAggregateOutputType | null
    _max: BlockedMaxAggregateOutputType | null
  }

  export type BlockedAvgAggregateOutputType = {
    blocker: number | null
    blockee: number | null
  }

  export type BlockedSumAggregateOutputType = {
    blocker: number | null
    blockee: number | null
  }

  export type BlockedMinAggregateOutputType = {
    blocker: number | null
    blockee: number | null
  }

  export type BlockedMaxAggregateOutputType = {
    blocker: number | null
    blockee: number | null
  }

  export type BlockedCountAggregateOutputType = {
    blocker: number
    blockee: number
    _all: number
  }


  export type BlockedAvgAggregateInputType = {
    blocker?: true
    blockee?: true
  }

  export type BlockedSumAggregateInputType = {
    blocker?: true
    blockee?: true
  }

  export type BlockedMinAggregateInputType = {
    blocker?: true
    blockee?: true
  }

  export type BlockedMaxAggregateInputType = {
    blocker?: true
    blockee?: true
  }

  export type BlockedCountAggregateInputType = {
    blocker?: true
    blockee?: true
    _all?: true
  }

  export type BlockedAggregateArgs = {
    /**
     * Filter which Blocked to aggregate.
     */
    where?: BlockedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Blockeds to fetch.
     */
    orderBy?: Enumerable<BlockedOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BlockedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Blockeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Blockeds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Blockeds
    **/
    _count?: true | BlockedCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BlockedAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BlockedSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BlockedMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BlockedMaxAggregateInputType
  }

  export type GetBlockedAggregateType<T extends BlockedAggregateArgs> = {
        [P in keyof T & keyof AggregateBlocked]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBlocked[P]>
      : GetScalarType<T[P], AggregateBlocked[P]>
  }




  export type BlockedGroupByArgs = {
    where?: BlockedWhereInput
    orderBy?: Enumerable<BlockedOrderByWithAggregationInput>
    by: BlockedScalarFieldEnum[]
    having?: BlockedScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BlockedCountAggregateInputType | true
    _avg?: BlockedAvgAggregateInputType
    _sum?: BlockedSumAggregateInputType
    _min?: BlockedMinAggregateInputType
    _max?: BlockedMaxAggregateInputType
  }


  export type BlockedGroupByOutputType = {
    blocker: number
    blockee: number
    _count: BlockedCountAggregateOutputType | null
    _avg: BlockedAvgAggregateOutputType | null
    _sum: BlockedSumAggregateOutputType | null
    _min: BlockedMinAggregateOutputType | null
    _max: BlockedMaxAggregateOutputType | null
  }

  type GetBlockedGroupByPayload<T extends BlockedGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<BlockedGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BlockedGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BlockedGroupByOutputType[P]>
            : GetScalarType<T[P], BlockedGroupByOutputType[P]>
        }
      >
    >


  export type BlockedSelect = {
    blocker?: boolean
    blockee?: boolean
    blockerRef?: boolean | UserArgs
    blockeeRef?: boolean | UserArgs
  }


  export type BlockedInclude = {
    blockerRef?: boolean | UserArgs
    blockeeRef?: boolean | UserArgs
  }

  export type BlockedGetPayload<S extends boolean | null | undefined | BlockedArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Blocked :
    S extends undefined ? never :
    S extends { include: any } & (BlockedArgs | BlockedFindManyArgs)
    ? Blocked  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'blockerRef' ? UserGetPayload<S['include'][P]> :
        P extends 'blockeeRef' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (BlockedArgs | BlockedFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'blockerRef' ? UserGetPayload<S['select'][P]> :
        P extends 'blockeeRef' ? UserGetPayload<S['select'][P]> :  P extends keyof Blocked ? Blocked[P] : never
  } 
      : Blocked


  type BlockedCountArgs = 
    Omit<BlockedFindManyArgs, 'select' | 'include'> & {
      select?: BlockedCountAggregateInputType | true
    }

  export interface BlockedDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Blocked that matches the filter.
     * @param {BlockedFindUniqueArgs} args - Arguments to find a Blocked
     * @example
     * // Get one Blocked
     * const blocked = await prisma.blocked.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BlockedFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, BlockedFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Blocked'> extends True ? Prisma__BlockedClient<BlockedGetPayload<T>> : Prisma__BlockedClient<BlockedGetPayload<T> | null, null>

    /**
     * Find one Blocked that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BlockedFindUniqueOrThrowArgs} args - Arguments to find a Blocked
     * @example
     * // Get one Blocked
     * const blocked = await prisma.blocked.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BlockedFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, BlockedFindUniqueOrThrowArgs>
    ): Prisma__BlockedClient<BlockedGetPayload<T>>

    /**
     * Find the first Blocked that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlockedFindFirstArgs} args - Arguments to find a Blocked
     * @example
     * // Get one Blocked
     * const blocked = await prisma.blocked.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BlockedFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, BlockedFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Blocked'> extends True ? Prisma__BlockedClient<BlockedGetPayload<T>> : Prisma__BlockedClient<BlockedGetPayload<T> | null, null>

    /**
     * Find the first Blocked that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlockedFindFirstOrThrowArgs} args - Arguments to find a Blocked
     * @example
     * // Get one Blocked
     * const blocked = await prisma.blocked.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BlockedFindFirstOrThrowArgs>(
      args?: SelectSubset<T, BlockedFindFirstOrThrowArgs>
    ): Prisma__BlockedClient<BlockedGetPayload<T>>

    /**
     * Find zero or more Blockeds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlockedFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Blockeds
     * const blockeds = await prisma.blocked.findMany()
     * 
     * // Get first 10 Blockeds
     * const blockeds = await prisma.blocked.findMany({ take: 10 })
     * 
     * // Only select the `blocker`
     * const blockedWithBlockerOnly = await prisma.blocked.findMany({ select: { blocker: true } })
     * 
    **/
    findMany<T extends BlockedFindManyArgs>(
      args?: SelectSubset<T, BlockedFindManyArgs>
    ): Prisma.PrismaPromise<Array<BlockedGetPayload<T>>>

    /**
     * Create a Blocked.
     * @param {BlockedCreateArgs} args - Arguments to create a Blocked.
     * @example
     * // Create one Blocked
     * const Blocked = await prisma.blocked.create({
     *   data: {
     *     // ... data to create a Blocked
     *   }
     * })
     * 
    **/
    create<T extends BlockedCreateArgs>(
      args: SelectSubset<T, BlockedCreateArgs>
    ): Prisma__BlockedClient<BlockedGetPayload<T>>

    /**
     * Create many Blockeds.
     *     @param {BlockedCreateManyArgs} args - Arguments to create many Blockeds.
     *     @example
     *     // Create many Blockeds
     *     const blocked = await prisma.blocked.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BlockedCreateManyArgs>(
      args?: SelectSubset<T, BlockedCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Blocked.
     * @param {BlockedDeleteArgs} args - Arguments to delete one Blocked.
     * @example
     * // Delete one Blocked
     * const Blocked = await prisma.blocked.delete({
     *   where: {
     *     // ... filter to delete one Blocked
     *   }
     * })
     * 
    **/
    delete<T extends BlockedDeleteArgs>(
      args: SelectSubset<T, BlockedDeleteArgs>
    ): Prisma__BlockedClient<BlockedGetPayload<T>>

    /**
     * Update one Blocked.
     * @param {BlockedUpdateArgs} args - Arguments to update one Blocked.
     * @example
     * // Update one Blocked
     * const blocked = await prisma.blocked.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BlockedUpdateArgs>(
      args: SelectSubset<T, BlockedUpdateArgs>
    ): Prisma__BlockedClient<BlockedGetPayload<T>>

    /**
     * Delete zero or more Blockeds.
     * @param {BlockedDeleteManyArgs} args - Arguments to filter Blockeds to delete.
     * @example
     * // Delete a few Blockeds
     * const { count } = await prisma.blocked.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BlockedDeleteManyArgs>(
      args?: SelectSubset<T, BlockedDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Blockeds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlockedUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Blockeds
     * const blocked = await prisma.blocked.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BlockedUpdateManyArgs>(
      args: SelectSubset<T, BlockedUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Blocked.
     * @param {BlockedUpsertArgs} args - Arguments to update or create a Blocked.
     * @example
     * // Update or create a Blocked
     * const blocked = await prisma.blocked.upsert({
     *   create: {
     *     // ... data to create a Blocked
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Blocked we want to update
     *   }
     * })
    **/
    upsert<T extends BlockedUpsertArgs>(
      args: SelectSubset<T, BlockedUpsertArgs>
    ): Prisma__BlockedClient<BlockedGetPayload<T>>

    /**
     * Count the number of Blockeds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlockedCountArgs} args - Arguments to filter Blockeds to count.
     * @example
     * // Count the number of Blockeds
     * const count = await prisma.blocked.count({
     *   where: {
     *     // ... the filter for the Blockeds we want to count
     *   }
     * })
    **/
    count<T extends BlockedCountArgs>(
      args?: Subset<T, BlockedCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BlockedCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Blocked.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlockedAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BlockedAggregateArgs>(args: Subset<T, BlockedAggregateArgs>): Prisma.PrismaPromise<GetBlockedAggregateType<T>>

    /**
     * Group by Blocked.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlockedGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BlockedGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BlockedGroupByArgs['orderBy'] }
        : { orderBy?: BlockedGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BlockedGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBlockedGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Blocked.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BlockedClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    blockerRef<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    blockeeRef<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Blocked base type for findUnique actions
   */
  export type BlockedFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Blocked
     */
    select?: BlockedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlockedInclude | null
    /**
     * Filter, which Blocked to fetch.
     */
    where: BlockedWhereUniqueInput
  }

  /**
   * Blocked findUnique
   */
  export interface BlockedFindUniqueArgs extends BlockedFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Blocked findUniqueOrThrow
   */
  export type BlockedFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Blocked
     */
    select?: BlockedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlockedInclude | null
    /**
     * Filter, which Blocked to fetch.
     */
    where: BlockedWhereUniqueInput
  }


  /**
   * Blocked base type for findFirst actions
   */
  export type BlockedFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Blocked
     */
    select?: BlockedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlockedInclude | null
    /**
     * Filter, which Blocked to fetch.
     */
    where?: BlockedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Blockeds to fetch.
     */
    orderBy?: Enumerable<BlockedOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Blockeds.
     */
    cursor?: BlockedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Blockeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Blockeds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Blockeds.
     */
    distinct?: Enumerable<BlockedScalarFieldEnum>
  }

  /**
   * Blocked findFirst
   */
  export interface BlockedFindFirstArgs extends BlockedFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Blocked findFirstOrThrow
   */
  export type BlockedFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Blocked
     */
    select?: BlockedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlockedInclude | null
    /**
     * Filter, which Blocked to fetch.
     */
    where?: BlockedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Blockeds to fetch.
     */
    orderBy?: Enumerable<BlockedOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Blockeds.
     */
    cursor?: BlockedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Blockeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Blockeds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Blockeds.
     */
    distinct?: Enumerable<BlockedScalarFieldEnum>
  }


  /**
   * Blocked findMany
   */
  export type BlockedFindManyArgs = {
    /**
     * Select specific fields to fetch from the Blocked
     */
    select?: BlockedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlockedInclude | null
    /**
     * Filter, which Blockeds to fetch.
     */
    where?: BlockedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Blockeds to fetch.
     */
    orderBy?: Enumerable<BlockedOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Blockeds.
     */
    cursor?: BlockedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Blockeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Blockeds.
     */
    skip?: number
    distinct?: Enumerable<BlockedScalarFieldEnum>
  }


  /**
   * Blocked create
   */
  export type BlockedCreateArgs = {
    /**
     * Select specific fields to fetch from the Blocked
     */
    select?: BlockedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlockedInclude | null
    /**
     * The data needed to create a Blocked.
     */
    data: XOR<BlockedCreateInput, BlockedUncheckedCreateInput>
  }


  /**
   * Blocked createMany
   */
  export type BlockedCreateManyArgs = {
    /**
     * The data used to create many Blockeds.
     */
    data: Enumerable<BlockedCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Blocked update
   */
  export type BlockedUpdateArgs = {
    /**
     * Select specific fields to fetch from the Blocked
     */
    select?: BlockedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlockedInclude | null
    /**
     * The data needed to update a Blocked.
     */
    data: XOR<BlockedUpdateInput, BlockedUncheckedUpdateInput>
    /**
     * Choose, which Blocked to update.
     */
    where: BlockedWhereUniqueInput
  }


  /**
   * Blocked updateMany
   */
  export type BlockedUpdateManyArgs = {
    /**
     * The data used to update Blockeds.
     */
    data: XOR<BlockedUpdateManyMutationInput, BlockedUncheckedUpdateManyInput>
    /**
     * Filter which Blockeds to update
     */
    where?: BlockedWhereInput
  }


  /**
   * Blocked upsert
   */
  export type BlockedUpsertArgs = {
    /**
     * Select specific fields to fetch from the Blocked
     */
    select?: BlockedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlockedInclude | null
    /**
     * The filter to search for the Blocked to update in case it exists.
     */
    where: BlockedWhereUniqueInput
    /**
     * In case the Blocked found by the `where` argument doesn't exist, create a new Blocked with this data.
     */
    create: XOR<BlockedCreateInput, BlockedUncheckedCreateInput>
    /**
     * In case the Blocked was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BlockedUpdateInput, BlockedUncheckedUpdateInput>
  }


  /**
   * Blocked delete
   */
  export type BlockedDeleteArgs = {
    /**
     * Select specific fields to fetch from the Blocked
     */
    select?: BlockedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlockedInclude | null
    /**
     * Filter which Blocked to delete.
     */
    where: BlockedWhereUniqueInput
  }


  /**
   * Blocked deleteMany
   */
  export type BlockedDeleteManyArgs = {
    /**
     * Filter which Blockeds to delete
     */
    where?: BlockedWhereInput
  }


  /**
   * Blocked without action
   */
  export type BlockedArgs = {
    /**
     * Select specific fields to fetch from the Blocked
     */
    select?: BlockedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlockedInclude | null
  }



  /**
   * Model Channel
   */


  export type AggregateChannel = {
    _count: ChannelCountAggregateOutputType | null
    _avg: ChannelAvgAggregateOutputType | null
    _sum: ChannelSumAggregateOutputType | null
    _min: ChannelMinAggregateOutputType | null
    _max: ChannelMaxAggregateOutputType | null
  }

  export type ChannelAvgAggregateOutputType = {
    id: number | null
    owner: number | null
  }

  export type ChannelSumAggregateOutputType = {
    id: number | null
    owner: number | null
  }

  export type ChannelMinAggregateOutputType = {
    id: number | null
    name: string | null
    owner: number | null
    type: ChanType | null
    passwd: string | null
  }

  export type ChannelMaxAggregateOutputType = {
    id: number | null
    name: string | null
    owner: number | null
    type: ChanType | null
    passwd: string | null
  }

  export type ChannelCountAggregateOutputType = {
    id: number
    name: number
    owner: number
    type: number
    passwd: number
    _all: number
  }


  export type ChannelAvgAggregateInputType = {
    id?: true
    owner?: true
  }

  export type ChannelSumAggregateInputType = {
    id?: true
    owner?: true
  }

  export type ChannelMinAggregateInputType = {
    id?: true
    name?: true
    owner?: true
    type?: true
    passwd?: true
  }

  export type ChannelMaxAggregateInputType = {
    id?: true
    name?: true
    owner?: true
    type?: true
    passwd?: true
  }

  export type ChannelCountAggregateInputType = {
    id?: true
    name?: true
    owner?: true
    type?: true
    passwd?: true
    _all?: true
  }

  export type ChannelAggregateArgs = {
    /**
     * Filter which Channel to aggregate.
     */
    where?: ChannelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Channels to fetch.
     */
    orderBy?: Enumerable<ChannelOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChannelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Channels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Channels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Channels
    **/
    _count?: true | ChannelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChannelAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChannelSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChannelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChannelMaxAggregateInputType
  }

  export type GetChannelAggregateType<T extends ChannelAggregateArgs> = {
        [P in keyof T & keyof AggregateChannel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChannel[P]>
      : GetScalarType<T[P], AggregateChannel[P]>
  }




  export type ChannelGroupByArgs = {
    where?: ChannelWhereInput
    orderBy?: Enumerable<ChannelOrderByWithAggregationInput>
    by: ChannelScalarFieldEnum[]
    having?: ChannelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChannelCountAggregateInputType | true
    _avg?: ChannelAvgAggregateInputType
    _sum?: ChannelSumAggregateInputType
    _min?: ChannelMinAggregateInputType
    _max?: ChannelMaxAggregateInputType
  }


  export type ChannelGroupByOutputType = {
    id: number
    name: string
    owner: number
    type: ChanType
    passwd: string | null
    _count: ChannelCountAggregateOutputType | null
    _avg: ChannelAvgAggregateOutputType | null
    _sum: ChannelSumAggregateOutputType | null
    _min: ChannelMinAggregateOutputType | null
    _max: ChannelMaxAggregateOutputType | null
  }

  type GetChannelGroupByPayload<T extends ChannelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ChannelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChannelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChannelGroupByOutputType[P]>
            : GetScalarType<T[P], ChannelGroupByOutputType[P]>
        }
      >
    >


  export type ChannelSelect = {
    id?: boolean
    name?: boolean
    owner?: boolean
    type?: boolean
    passwd?: boolean
    ownerRef?: boolean | UserArgs
    memChan?: boolean | Channel$memChanArgs
    banChan?: boolean | Channel$banChanArgs
    messChan?: boolean | Channel$messChanArgs
    _count?: boolean | ChannelCountOutputTypeArgs
  }


  export type ChannelInclude = {
    ownerRef?: boolean | UserArgs
    memChan?: boolean | Channel$memChanArgs
    banChan?: boolean | Channel$banChanArgs
    messChan?: boolean | Channel$messChanArgs
    _count?: boolean | ChannelCountOutputTypeArgs
  }

  export type ChannelGetPayload<S extends boolean | null | undefined | ChannelArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Channel :
    S extends undefined ? never :
    S extends { include: any } & (ChannelArgs | ChannelFindManyArgs)
    ? Channel  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'ownerRef' ? UserGetPayload<S['include'][P]> :
        P extends 'memChan' ? Array < ChanMemberGetPayload<S['include'][P]>>  :
        P extends 'banChan' ? Array < ChanBanGetPayload<S['include'][P]>>  :
        P extends 'messChan' ? Array < ChanMessageGetPayload<S['include'][P]>>  :
        P extends '_count' ? ChannelCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ChannelArgs | ChannelFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'ownerRef' ? UserGetPayload<S['select'][P]> :
        P extends 'memChan' ? Array < ChanMemberGetPayload<S['select'][P]>>  :
        P extends 'banChan' ? Array < ChanBanGetPayload<S['select'][P]>>  :
        P extends 'messChan' ? Array < ChanMessageGetPayload<S['select'][P]>>  :
        P extends '_count' ? ChannelCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Channel ? Channel[P] : never
  } 
      : Channel


  type ChannelCountArgs = 
    Omit<ChannelFindManyArgs, 'select' | 'include'> & {
      select?: ChannelCountAggregateInputType | true
    }

  export interface ChannelDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Channel that matches the filter.
     * @param {ChannelFindUniqueArgs} args - Arguments to find a Channel
     * @example
     * // Get one Channel
     * const channel = await prisma.channel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ChannelFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ChannelFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Channel'> extends True ? Prisma__ChannelClient<ChannelGetPayload<T>> : Prisma__ChannelClient<ChannelGetPayload<T> | null, null>

    /**
     * Find one Channel that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ChannelFindUniqueOrThrowArgs} args - Arguments to find a Channel
     * @example
     * // Get one Channel
     * const channel = await prisma.channel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ChannelFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ChannelFindUniqueOrThrowArgs>
    ): Prisma__ChannelClient<ChannelGetPayload<T>>

    /**
     * Find the first Channel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelFindFirstArgs} args - Arguments to find a Channel
     * @example
     * // Get one Channel
     * const channel = await prisma.channel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ChannelFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ChannelFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Channel'> extends True ? Prisma__ChannelClient<ChannelGetPayload<T>> : Prisma__ChannelClient<ChannelGetPayload<T> | null, null>

    /**
     * Find the first Channel that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelFindFirstOrThrowArgs} args - Arguments to find a Channel
     * @example
     * // Get one Channel
     * const channel = await prisma.channel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ChannelFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ChannelFindFirstOrThrowArgs>
    ): Prisma__ChannelClient<ChannelGetPayload<T>>

    /**
     * Find zero or more Channels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Channels
     * const channels = await prisma.channel.findMany()
     * 
     * // Get first 10 Channels
     * const channels = await prisma.channel.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const channelWithIdOnly = await prisma.channel.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ChannelFindManyArgs>(
      args?: SelectSubset<T, ChannelFindManyArgs>
    ): Prisma.PrismaPromise<Array<ChannelGetPayload<T>>>

    /**
     * Create a Channel.
     * @param {ChannelCreateArgs} args - Arguments to create a Channel.
     * @example
     * // Create one Channel
     * const Channel = await prisma.channel.create({
     *   data: {
     *     // ... data to create a Channel
     *   }
     * })
     * 
    **/
    create<T extends ChannelCreateArgs>(
      args: SelectSubset<T, ChannelCreateArgs>
    ): Prisma__ChannelClient<ChannelGetPayload<T>>

    /**
     * Create many Channels.
     *     @param {ChannelCreateManyArgs} args - Arguments to create many Channels.
     *     @example
     *     // Create many Channels
     *     const channel = await prisma.channel.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ChannelCreateManyArgs>(
      args?: SelectSubset<T, ChannelCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Channel.
     * @param {ChannelDeleteArgs} args - Arguments to delete one Channel.
     * @example
     * // Delete one Channel
     * const Channel = await prisma.channel.delete({
     *   where: {
     *     // ... filter to delete one Channel
     *   }
     * })
     * 
    **/
    delete<T extends ChannelDeleteArgs>(
      args: SelectSubset<T, ChannelDeleteArgs>
    ): Prisma__ChannelClient<ChannelGetPayload<T>>

    /**
     * Update one Channel.
     * @param {ChannelUpdateArgs} args - Arguments to update one Channel.
     * @example
     * // Update one Channel
     * const channel = await prisma.channel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ChannelUpdateArgs>(
      args: SelectSubset<T, ChannelUpdateArgs>
    ): Prisma__ChannelClient<ChannelGetPayload<T>>

    /**
     * Delete zero or more Channels.
     * @param {ChannelDeleteManyArgs} args - Arguments to filter Channels to delete.
     * @example
     * // Delete a few Channels
     * const { count } = await prisma.channel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ChannelDeleteManyArgs>(
      args?: SelectSubset<T, ChannelDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Channels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Channels
     * const channel = await prisma.channel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ChannelUpdateManyArgs>(
      args: SelectSubset<T, ChannelUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Channel.
     * @param {ChannelUpsertArgs} args - Arguments to update or create a Channel.
     * @example
     * // Update or create a Channel
     * const channel = await prisma.channel.upsert({
     *   create: {
     *     // ... data to create a Channel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Channel we want to update
     *   }
     * })
    **/
    upsert<T extends ChannelUpsertArgs>(
      args: SelectSubset<T, ChannelUpsertArgs>
    ): Prisma__ChannelClient<ChannelGetPayload<T>>

    /**
     * Count the number of Channels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelCountArgs} args - Arguments to filter Channels to count.
     * @example
     * // Count the number of Channels
     * const count = await prisma.channel.count({
     *   where: {
     *     // ... the filter for the Channels we want to count
     *   }
     * })
    **/
    count<T extends ChannelCountArgs>(
      args?: Subset<T, ChannelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChannelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Channel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChannelAggregateArgs>(args: Subset<T, ChannelAggregateArgs>): Prisma.PrismaPromise<GetChannelAggregateType<T>>

    /**
     * Group by Channel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChannelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChannelGroupByArgs['orderBy'] }
        : { orderBy?: ChannelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChannelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChannelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Channel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ChannelClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    ownerRef<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    memChan<T extends Channel$memChanArgs= {}>(args?: Subset<T, Channel$memChanArgs>): Prisma.PrismaPromise<Array<ChanMemberGetPayload<T>>| Null>;

    banChan<T extends Channel$banChanArgs= {}>(args?: Subset<T, Channel$banChanArgs>): Prisma.PrismaPromise<Array<ChanBanGetPayload<T>>| Null>;

    messChan<T extends Channel$messChanArgs= {}>(args?: Subset<T, Channel$messChanArgs>): Prisma.PrismaPromise<Array<ChanMessageGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Channel base type for findUnique actions
   */
  export type ChannelFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude | null
    /**
     * Filter, which Channel to fetch.
     */
    where: ChannelWhereUniqueInput
  }

  /**
   * Channel findUnique
   */
  export interface ChannelFindUniqueArgs extends ChannelFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Channel findUniqueOrThrow
   */
  export type ChannelFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude | null
    /**
     * Filter, which Channel to fetch.
     */
    where: ChannelWhereUniqueInput
  }


  /**
   * Channel base type for findFirst actions
   */
  export type ChannelFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude | null
    /**
     * Filter, which Channel to fetch.
     */
    where?: ChannelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Channels to fetch.
     */
    orderBy?: Enumerable<ChannelOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Channels.
     */
    cursor?: ChannelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Channels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Channels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Channels.
     */
    distinct?: Enumerable<ChannelScalarFieldEnum>
  }

  /**
   * Channel findFirst
   */
  export interface ChannelFindFirstArgs extends ChannelFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Channel findFirstOrThrow
   */
  export type ChannelFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude | null
    /**
     * Filter, which Channel to fetch.
     */
    where?: ChannelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Channels to fetch.
     */
    orderBy?: Enumerable<ChannelOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Channels.
     */
    cursor?: ChannelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Channels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Channels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Channels.
     */
    distinct?: Enumerable<ChannelScalarFieldEnum>
  }


  /**
   * Channel findMany
   */
  export type ChannelFindManyArgs = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude | null
    /**
     * Filter, which Channels to fetch.
     */
    where?: ChannelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Channels to fetch.
     */
    orderBy?: Enumerable<ChannelOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Channels.
     */
    cursor?: ChannelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Channels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Channels.
     */
    skip?: number
    distinct?: Enumerable<ChannelScalarFieldEnum>
  }


  /**
   * Channel create
   */
  export type ChannelCreateArgs = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude | null
    /**
     * The data needed to create a Channel.
     */
    data: XOR<ChannelCreateInput, ChannelUncheckedCreateInput>
  }


  /**
   * Channel createMany
   */
  export type ChannelCreateManyArgs = {
    /**
     * The data used to create many Channels.
     */
    data: Enumerable<ChannelCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Channel update
   */
  export type ChannelUpdateArgs = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude | null
    /**
     * The data needed to update a Channel.
     */
    data: XOR<ChannelUpdateInput, ChannelUncheckedUpdateInput>
    /**
     * Choose, which Channel to update.
     */
    where: ChannelWhereUniqueInput
  }


  /**
   * Channel updateMany
   */
  export type ChannelUpdateManyArgs = {
    /**
     * The data used to update Channels.
     */
    data: XOR<ChannelUpdateManyMutationInput, ChannelUncheckedUpdateManyInput>
    /**
     * Filter which Channels to update
     */
    where?: ChannelWhereInput
  }


  /**
   * Channel upsert
   */
  export type ChannelUpsertArgs = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude | null
    /**
     * The filter to search for the Channel to update in case it exists.
     */
    where: ChannelWhereUniqueInput
    /**
     * In case the Channel found by the `where` argument doesn't exist, create a new Channel with this data.
     */
    create: XOR<ChannelCreateInput, ChannelUncheckedCreateInput>
    /**
     * In case the Channel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChannelUpdateInput, ChannelUncheckedUpdateInput>
  }


  /**
   * Channel delete
   */
  export type ChannelDeleteArgs = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude | null
    /**
     * Filter which Channel to delete.
     */
    where: ChannelWhereUniqueInput
  }


  /**
   * Channel deleteMany
   */
  export type ChannelDeleteManyArgs = {
    /**
     * Filter which Channels to delete
     */
    where?: ChannelWhereInput
  }


  /**
   * Channel.memChan
   */
  export type Channel$memChanArgs = {
    /**
     * Select specific fields to fetch from the ChanMember
     */
    select?: ChanMemberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChanMemberInclude | null
    where?: ChanMemberWhereInput
    orderBy?: Enumerable<ChanMemberOrderByWithRelationInput>
    cursor?: ChanMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ChanMemberScalarFieldEnum>
  }


  /**
   * Channel.banChan
   */
  export type Channel$banChanArgs = {
    /**
     * Select specific fields to fetch from the ChanBan
     */
    select?: ChanBanSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChanBanInclude | null
    where?: ChanBanWhereInput
    orderBy?: Enumerable<ChanBanOrderByWithRelationInput>
    cursor?: ChanBanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ChanBanScalarFieldEnum>
  }


  /**
   * Channel.messChan
   */
  export type Channel$messChanArgs = {
    /**
     * Select specific fields to fetch from the ChanMessage
     */
    select?: ChanMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChanMessageInclude | null
    where?: ChanMessageWhereInput
    orderBy?: Enumerable<ChanMessageOrderByWithRelationInput>
    cursor?: ChanMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ChanMessageScalarFieldEnum>
  }


  /**
   * Channel without action
   */
  export type ChannelArgs = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude | null
  }



  /**
   * Model ChanMember
   */


  export type AggregateChanMember = {
    _count: ChanMemberCountAggregateOutputType | null
    _avg: ChanMemberAvgAggregateOutputType | null
    _sum: ChanMemberSumAggregateOutputType | null
    _min: ChanMemberMinAggregateOutputType | null
    _max: ChanMemberMaxAggregateOutputType | null
  }

  export type ChanMemberAvgAggregateOutputType = {
    chanId: number | null
    member: number | null
  }

  export type ChanMemberSumAggregateOutputType = {
    chanId: number | null
    member: number | null
  }

  export type ChanMemberMinAggregateOutputType = {
    chanId: number | null
    member: number | null
    isAdmin: boolean | null
    muteTime: Date | null
  }

  export type ChanMemberMaxAggregateOutputType = {
    chanId: number | null
    member: number | null
    isAdmin: boolean | null
    muteTime: Date | null
  }

  export type ChanMemberCountAggregateOutputType = {
    chanId: number
    member: number
    isAdmin: number
    muteTime: number
    _all: number
  }


  export type ChanMemberAvgAggregateInputType = {
    chanId?: true
    member?: true
  }

  export type ChanMemberSumAggregateInputType = {
    chanId?: true
    member?: true
  }

  export type ChanMemberMinAggregateInputType = {
    chanId?: true
    member?: true
    isAdmin?: true
    muteTime?: true
  }

  export type ChanMemberMaxAggregateInputType = {
    chanId?: true
    member?: true
    isAdmin?: true
    muteTime?: true
  }

  export type ChanMemberCountAggregateInputType = {
    chanId?: true
    member?: true
    isAdmin?: true
    muteTime?: true
    _all?: true
  }

  export type ChanMemberAggregateArgs = {
    /**
     * Filter which ChanMember to aggregate.
     */
    where?: ChanMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChanMembers to fetch.
     */
    orderBy?: Enumerable<ChanMemberOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChanMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChanMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChanMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChanMembers
    **/
    _count?: true | ChanMemberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChanMemberAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChanMemberSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChanMemberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChanMemberMaxAggregateInputType
  }

  export type GetChanMemberAggregateType<T extends ChanMemberAggregateArgs> = {
        [P in keyof T & keyof AggregateChanMember]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChanMember[P]>
      : GetScalarType<T[P], AggregateChanMember[P]>
  }




  export type ChanMemberGroupByArgs = {
    where?: ChanMemberWhereInput
    orderBy?: Enumerable<ChanMemberOrderByWithAggregationInput>
    by: ChanMemberScalarFieldEnum[]
    having?: ChanMemberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChanMemberCountAggregateInputType | true
    _avg?: ChanMemberAvgAggregateInputType
    _sum?: ChanMemberSumAggregateInputType
    _min?: ChanMemberMinAggregateInputType
    _max?: ChanMemberMaxAggregateInputType
  }


  export type ChanMemberGroupByOutputType = {
    chanId: number
    member: number
    isAdmin: boolean
    muteTime: Date
    _count: ChanMemberCountAggregateOutputType | null
    _avg: ChanMemberAvgAggregateOutputType | null
    _sum: ChanMemberSumAggregateOutputType | null
    _min: ChanMemberMinAggregateOutputType | null
    _max: ChanMemberMaxAggregateOutputType | null
  }

  type GetChanMemberGroupByPayload<T extends ChanMemberGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ChanMemberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChanMemberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChanMemberGroupByOutputType[P]>
            : GetScalarType<T[P], ChanMemberGroupByOutputType[P]>
        }
      >
    >


  export type ChanMemberSelect = {
    chanId?: boolean
    member?: boolean
    isAdmin?: boolean
    muteTime?: boolean
    chanRef?: boolean | ChannelArgs
    memberRef?: boolean | UserArgs
  }


  export type ChanMemberInclude = {
    chanRef?: boolean | ChannelArgs
    memberRef?: boolean | UserArgs
  }

  export type ChanMemberGetPayload<S extends boolean | null | undefined | ChanMemberArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ChanMember :
    S extends undefined ? never :
    S extends { include: any } & (ChanMemberArgs | ChanMemberFindManyArgs)
    ? ChanMember  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'chanRef' ? ChannelGetPayload<S['include'][P]> :
        P extends 'memberRef' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ChanMemberArgs | ChanMemberFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'chanRef' ? ChannelGetPayload<S['select'][P]> :
        P extends 'memberRef' ? UserGetPayload<S['select'][P]> :  P extends keyof ChanMember ? ChanMember[P] : never
  } 
      : ChanMember


  type ChanMemberCountArgs = 
    Omit<ChanMemberFindManyArgs, 'select' | 'include'> & {
      select?: ChanMemberCountAggregateInputType | true
    }

  export interface ChanMemberDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one ChanMember that matches the filter.
     * @param {ChanMemberFindUniqueArgs} args - Arguments to find a ChanMember
     * @example
     * // Get one ChanMember
     * const chanMember = await prisma.chanMember.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ChanMemberFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ChanMemberFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ChanMember'> extends True ? Prisma__ChanMemberClient<ChanMemberGetPayload<T>> : Prisma__ChanMemberClient<ChanMemberGetPayload<T> | null, null>

    /**
     * Find one ChanMember that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ChanMemberFindUniqueOrThrowArgs} args - Arguments to find a ChanMember
     * @example
     * // Get one ChanMember
     * const chanMember = await prisma.chanMember.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ChanMemberFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ChanMemberFindUniqueOrThrowArgs>
    ): Prisma__ChanMemberClient<ChanMemberGetPayload<T>>

    /**
     * Find the first ChanMember that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChanMemberFindFirstArgs} args - Arguments to find a ChanMember
     * @example
     * // Get one ChanMember
     * const chanMember = await prisma.chanMember.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ChanMemberFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ChanMemberFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ChanMember'> extends True ? Prisma__ChanMemberClient<ChanMemberGetPayload<T>> : Prisma__ChanMemberClient<ChanMemberGetPayload<T> | null, null>

    /**
     * Find the first ChanMember that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChanMemberFindFirstOrThrowArgs} args - Arguments to find a ChanMember
     * @example
     * // Get one ChanMember
     * const chanMember = await prisma.chanMember.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ChanMemberFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ChanMemberFindFirstOrThrowArgs>
    ): Prisma__ChanMemberClient<ChanMemberGetPayload<T>>

    /**
     * Find zero or more ChanMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChanMemberFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChanMembers
     * const chanMembers = await prisma.chanMember.findMany()
     * 
     * // Get first 10 ChanMembers
     * const chanMembers = await prisma.chanMember.findMany({ take: 10 })
     * 
     * // Only select the `chanId`
     * const chanMemberWithChanIdOnly = await prisma.chanMember.findMany({ select: { chanId: true } })
     * 
    **/
    findMany<T extends ChanMemberFindManyArgs>(
      args?: SelectSubset<T, ChanMemberFindManyArgs>
    ): Prisma.PrismaPromise<Array<ChanMemberGetPayload<T>>>

    /**
     * Create a ChanMember.
     * @param {ChanMemberCreateArgs} args - Arguments to create a ChanMember.
     * @example
     * // Create one ChanMember
     * const ChanMember = await prisma.chanMember.create({
     *   data: {
     *     // ... data to create a ChanMember
     *   }
     * })
     * 
    **/
    create<T extends ChanMemberCreateArgs>(
      args: SelectSubset<T, ChanMemberCreateArgs>
    ): Prisma__ChanMemberClient<ChanMemberGetPayload<T>>

    /**
     * Create many ChanMembers.
     *     @param {ChanMemberCreateManyArgs} args - Arguments to create many ChanMembers.
     *     @example
     *     // Create many ChanMembers
     *     const chanMember = await prisma.chanMember.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ChanMemberCreateManyArgs>(
      args?: SelectSubset<T, ChanMemberCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ChanMember.
     * @param {ChanMemberDeleteArgs} args - Arguments to delete one ChanMember.
     * @example
     * // Delete one ChanMember
     * const ChanMember = await prisma.chanMember.delete({
     *   where: {
     *     // ... filter to delete one ChanMember
     *   }
     * })
     * 
    **/
    delete<T extends ChanMemberDeleteArgs>(
      args: SelectSubset<T, ChanMemberDeleteArgs>
    ): Prisma__ChanMemberClient<ChanMemberGetPayload<T>>

    /**
     * Update one ChanMember.
     * @param {ChanMemberUpdateArgs} args - Arguments to update one ChanMember.
     * @example
     * // Update one ChanMember
     * const chanMember = await prisma.chanMember.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ChanMemberUpdateArgs>(
      args: SelectSubset<T, ChanMemberUpdateArgs>
    ): Prisma__ChanMemberClient<ChanMemberGetPayload<T>>

    /**
     * Delete zero or more ChanMembers.
     * @param {ChanMemberDeleteManyArgs} args - Arguments to filter ChanMembers to delete.
     * @example
     * // Delete a few ChanMembers
     * const { count } = await prisma.chanMember.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ChanMemberDeleteManyArgs>(
      args?: SelectSubset<T, ChanMemberDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChanMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChanMemberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChanMembers
     * const chanMember = await prisma.chanMember.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ChanMemberUpdateManyArgs>(
      args: SelectSubset<T, ChanMemberUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ChanMember.
     * @param {ChanMemberUpsertArgs} args - Arguments to update or create a ChanMember.
     * @example
     * // Update or create a ChanMember
     * const chanMember = await prisma.chanMember.upsert({
     *   create: {
     *     // ... data to create a ChanMember
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChanMember we want to update
     *   }
     * })
    **/
    upsert<T extends ChanMemberUpsertArgs>(
      args: SelectSubset<T, ChanMemberUpsertArgs>
    ): Prisma__ChanMemberClient<ChanMemberGetPayload<T>>

    /**
     * Count the number of ChanMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChanMemberCountArgs} args - Arguments to filter ChanMembers to count.
     * @example
     * // Count the number of ChanMembers
     * const count = await prisma.chanMember.count({
     *   where: {
     *     // ... the filter for the ChanMembers we want to count
     *   }
     * })
    **/
    count<T extends ChanMemberCountArgs>(
      args?: Subset<T, ChanMemberCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChanMemberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChanMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChanMemberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChanMemberAggregateArgs>(args: Subset<T, ChanMemberAggregateArgs>): Prisma.PrismaPromise<GetChanMemberAggregateType<T>>

    /**
     * Group by ChanMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChanMemberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChanMemberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChanMemberGroupByArgs['orderBy'] }
        : { orderBy?: ChanMemberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChanMemberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChanMemberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ChanMember.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ChanMemberClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    chanRef<T extends ChannelArgs= {}>(args?: Subset<T, ChannelArgs>): Prisma__ChannelClient<ChannelGetPayload<T> | Null>;

    memberRef<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ChanMember base type for findUnique actions
   */
  export type ChanMemberFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the ChanMember
     */
    select?: ChanMemberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChanMemberInclude | null
    /**
     * Filter, which ChanMember to fetch.
     */
    where: ChanMemberWhereUniqueInput
  }

  /**
   * ChanMember findUnique
   */
  export interface ChanMemberFindUniqueArgs extends ChanMemberFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ChanMember findUniqueOrThrow
   */
  export type ChanMemberFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ChanMember
     */
    select?: ChanMemberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChanMemberInclude | null
    /**
     * Filter, which ChanMember to fetch.
     */
    where: ChanMemberWhereUniqueInput
  }


  /**
   * ChanMember base type for findFirst actions
   */
  export type ChanMemberFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the ChanMember
     */
    select?: ChanMemberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChanMemberInclude | null
    /**
     * Filter, which ChanMember to fetch.
     */
    where?: ChanMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChanMembers to fetch.
     */
    orderBy?: Enumerable<ChanMemberOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChanMembers.
     */
    cursor?: ChanMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChanMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChanMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChanMembers.
     */
    distinct?: Enumerable<ChanMemberScalarFieldEnum>
  }

  /**
   * ChanMember findFirst
   */
  export interface ChanMemberFindFirstArgs extends ChanMemberFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ChanMember findFirstOrThrow
   */
  export type ChanMemberFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ChanMember
     */
    select?: ChanMemberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChanMemberInclude | null
    /**
     * Filter, which ChanMember to fetch.
     */
    where?: ChanMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChanMembers to fetch.
     */
    orderBy?: Enumerable<ChanMemberOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChanMembers.
     */
    cursor?: ChanMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChanMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChanMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChanMembers.
     */
    distinct?: Enumerable<ChanMemberScalarFieldEnum>
  }


  /**
   * ChanMember findMany
   */
  export type ChanMemberFindManyArgs = {
    /**
     * Select specific fields to fetch from the ChanMember
     */
    select?: ChanMemberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChanMemberInclude | null
    /**
     * Filter, which ChanMembers to fetch.
     */
    where?: ChanMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChanMembers to fetch.
     */
    orderBy?: Enumerable<ChanMemberOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChanMembers.
     */
    cursor?: ChanMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChanMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChanMembers.
     */
    skip?: number
    distinct?: Enumerable<ChanMemberScalarFieldEnum>
  }


  /**
   * ChanMember create
   */
  export type ChanMemberCreateArgs = {
    /**
     * Select specific fields to fetch from the ChanMember
     */
    select?: ChanMemberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChanMemberInclude | null
    /**
     * The data needed to create a ChanMember.
     */
    data: XOR<ChanMemberCreateInput, ChanMemberUncheckedCreateInput>
  }


  /**
   * ChanMember createMany
   */
  export type ChanMemberCreateManyArgs = {
    /**
     * The data used to create many ChanMembers.
     */
    data: Enumerable<ChanMemberCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ChanMember update
   */
  export type ChanMemberUpdateArgs = {
    /**
     * Select specific fields to fetch from the ChanMember
     */
    select?: ChanMemberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChanMemberInclude | null
    /**
     * The data needed to update a ChanMember.
     */
    data: XOR<ChanMemberUpdateInput, ChanMemberUncheckedUpdateInput>
    /**
     * Choose, which ChanMember to update.
     */
    where: ChanMemberWhereUniqueInput
  }


  /**
   * ChanMember updateMany
   */
  export type ChanMemberUpdateManyArgs = {
    /**
     * The data used to update ChanMembers.
     */
    data: XOR<ChanMemberUpdateManyMutationInput, ChanMemberUncheckedUpdateManyInput>
    /**
     * Filter which ChanMembers to update
     */
    where?: ChanMemberWhereInput
  }


  /**
   * ChanMember upsert
   */
  export type ChanMemberUpsertArgs = {
    /**
     * Select specific fields to fetch from the ChanMember
     */
    select?: ChanMemberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChanMemberInclude | null
    /**
     * The filter to search for the ChanMember to update in case it exists.
     */
    where: ChanMemberWhereUniqueInput
    /**
     * In case the ChanMember found by the `where` argument doesn't exist, create a new ChanMember with this data.
     */
    create: XOR<ChanMemberCreateInput, ChanMemberUncheckedCreateInput>
    /**
     * In case the ChanMember was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChanMemberUpdateInput, ChanMemberUncheckedUpdateInput>
  }


  /**
   * ChanMember delete
   */
  export type ChanMemberDeleteArgs = {
    /**
     * Select specific fields to fetch from the ChanMember
     */
    select?: ChanMemberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChanMemberInclude | null
    /**
     * Filter which ChanMember to delete.
     */
    where: ChanMemberWhereUniqueInput
  }


  /**
   * ChanMember deleteMany
   */
  export type ChanMemberDeleteManyArgs = {
    /**
     * Filter which ChanMembers to delete
     */
    where?: ChanMemberWhereInput
  }


  /**
   * ChanMember without action
   */
  export type ChanMemberArgs = {
    /**
     * Select specific fields to fetch from the ChanMember
     */
    select?: ChanMemberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChanMemberInclude | null
  }



  /**
   * Model ChanBan
   */


  export type AggregateChanBan = {
    _count: ChanBanCountAggregateOutputType | null
    _avg: ChanBanAvgAggregateOutputType | null
    _sum: ChanBanSumAggregateOutputType | null
    _min: ChanBanMinAggregateOutputType | null
    _max: ChanBanMaxAggregateOutputType | null
  }

  export type ChanBanAvgAggregateOutputType = {
    chanId: number | null
    bannedUser: number | null
  }

  export type ChanBanSumAggregateOutputType = {
    chanId: number | null
    bannedUser: number | null
  }

  export type ChanBanMinAggregateOutputType = {
    chanId: number | null
    bannedUser: number | null
  }

  export type ChanBanMaxAggregateOutputType = {
    chanId: number | null
    bannedUser: number | null
  }

  export type ChanBanCountAggregateOutputType = {
    chanId: number
    bannedUser: number
    _all: number
  }


  export type ChanBanAvgAggregateInputType = {
    chanId?: true
    bannedUser?: true
  }

  export type ChanBanSumAggregateInputType = {
    chanId?: true
    bannedUser?: true
  }

  export type ChanBanMinAggregateInputType = {
    chanId?: true
    bannedUser?: true
  }

  export type ChanBanMaxAggregateInputType = {
    chanId?: true
    bannedUser?: true
  }

  export type ChanBanCountAggregateInputType = {
    chanId?: true
    bannedUser?: true
    _all?: true
  }

  export type ChanBanAggregateArgs = {
    /**
     * Filter which ChanBan to aggregate.
     */
    where?: ChanBanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChanBans to fetch.
     */
    orderBy?: Enumerable<ChanBanOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChanBanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChanBans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChanBans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChanBans
    **/
    _count?: true | ChanBanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChanBanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChanBanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChanBanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChanBanMaxAggregateInputType
  }

  export type GetChanBanAggregateType<T extends ChanBanAggregateArgs> = {
        [P in keyof T & keyof AggregateChanBan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChanBan[P]>
      : GetScalarType<T[P], AggregateChanBan[P]>
  }




  export type ChanBanGroupByArgs = {
    where?: ChanBanWhereInput
    orderBy?: Enumerable<ChanBanOrderByWithAggregationInput>
    by: ChanBanScalarFieldEnum[]
    having?: ChanBanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChanBanCountAggregateInputType | true
    _avg?: ChanBanAvgAggregateInputType
    _sum?: ChanBanSumAggregateInputType
    _min?: ChanBanMinAggregateInputType
    _max?: ChanBanMaxAggregateInputType
  }


  export type ChanBanGroupByOutputType = {
    chanId: number
    bannedUser: number
    _count: ChanBanCountAggregateOutputType | null
    _avg: ChanBanAvgAggregateOutputType | null
    _sum: ChanBanSumAggregateOutputType | null
    _min: ChanBanMinAggregateOutputType | null
    _max: ChanBanMaxAggregateOutputType | null
  }

  type GetChanBanGroupByPayload<T extends ChanBanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ChanBanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChanBanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChanBanGroupByOutputType[P]>
            : GetScalarType<T[P], ChanBanGroupByOutputType[P]>
        }
      >
    >


  export type ChanBanSelect = {
    chanId?: boolean
    bannedUser?: boolean
    chanRef?: boolean | ChannelArgs
    bannedRef?: boolean | UserArgs
  }


  export type ChanBanInclude = {
    chanRef?: boolean | ChannelArgs
    bannedRef?: boolean | UserArgs
  }

  export type ChanBanGetPayload<S extends boolean | null | undefined | ChanBanArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ChanBan :
    S extends undefined ? never :
    S extends { include: any } & (ChanBanArgs | ChanBanFindManyArgs)
    ? ChanBan  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'chanRef' ? ChannelGetPayload<S['include'][P]> :
        P extends 'bannedRef' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ChanBanArgs | ChanBanFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'chanRef' ? ChannelGetPayload<S['select'][P]> :
        P extends 'bannedRef' ? UserGetPayload<S['select'][P]> :  P extends keyof ChanBan ? ChanBan[P] : never
  } 
      : ChanBan


  type ChanBanCountArgs = 
    Omit<ChanBanFindManyArgs, 'select' | 'include'> & {
      select?: ChanBanCountAggregateInputType | true
    }

  export interface ChanBanDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one ChanBan that matches the filter.
     * @param {ChanBanFindUniqueArgs} args - Arguments to find a ChanBan
     * @example
     * // Get one ChanBan
     * const chanBan = await prisma.chanBan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ChanBanFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ChanBanFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ChanBan'> extends True ? Prisma__ChanBanClient<ChanBanGetPayload<T>> : Prisma__ChanBanClient<ChanBanGetPayload<T> | null, null>

    /**
     * Find one ChanBan that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ChanBanFindUniqueOrThrowArgs} args - Arguments to find a ChanBan
     * @example
     * // Get one ChanBan
     * const chanBan = await prisma.chanBan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ChanBanFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ChanBanFindUniqueOrThrowArgs>
    ): Prisma__ChanBanClient<ChanBanGetPayload<T>>

    /**
     * Find the first ChanBan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChanBanFindFirstArgs} args - Arguments to find a ChanBan
     * @example
     * // Get one ChanBan
     * const chanBan = await prisma.chanBan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ChanBanFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ChanBanFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ChanBan'> extends True ? Prisma__ChanBanClient<ChanBanGetPayload<T>> : Prisma__ChanBanClient<ChanBanGetPayload<T> | null, null>

    /**
     * Find the first ChanBan that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChanBanFindFirstOrThrowArgs} args - Arguments to find a ChanBan
     * @example
     * // Get one ChanBan
     * const chanBan = await prisma.chanBan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ChanBanFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ChanBanFindFirstOrThrowArgs>
    ): Prisma__ChanBanClient<ChanBanGetPayload<T>>

    /**
     * Find zero or more ChanBans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChanBanFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChanBans
     * const chanBans = await prisma.chanBan.findMany()
     * 
     * // Get first 10 ChanBans
     * const chanBans = await prisma.chanBan.findMany({ take: 10 })
     * 
     * // Only select the `chanId`
     * const chanBanWithChanIdOnly = await prisma.chanBan.findMany({ select: { chanId: true } })
     * 
    **/
    findMany<T extends ChanBanFindManyArgs>(
      args?: SelectSubset<T, ChanBanFindManyArgs>
    ): Prisma.PrismaPromise<Array<ChanBanGetPayload<T>>>

    /**
     * Create a ChanBan.
     * @param {ChanBanCreateArgs} args - Arguments to create a ChanBan.
     * @example
     * // Create one ChanBan
     * const ChanBan = await prisma.chanBan.create({
     *   data: {
     *     // ... data to create a ChanBan
     *   }
     * })
     * 
    **/
    create<T extends ChanBanCreateArgs>(
      args: SelectSubset<T, ChanBanCreateArgs>
    ): Prisma__ChanBanClient<ChanBanGetPayload<T>>

    /**
     * Create many ChanBans.
     *     @param {ChanBanCreateManyArgs} args - Arguments to create many ChanBans.
     *     @example
     *     // Create many ChanBans
     *     const chanBan = await prisma.chanBan.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ChanBanCreateManyArgs>(
      args?: SelectSubset<T, ChanBanCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ChanBan.
     * @param {ChanBanDeleteArgs} args - Arguments to delete one ChanBan.
     * @example
     * // Delete one ChanBan
     * const ChanBan = await prisma.chanBan.delete({
     *   where: {
     *     // ... filter to delete one ChanBan
     *   }
     * })
     * 
    **/
    delete<T extends ChanBanDeleteArgs>(
      args: SelectSubset<T, ChanBanDeleteArgs>
    ): Prisma__ChanBanClient<ChanBanGetPayload<T>>

    /**
     * Update one ChanBan.
     * @param {ChanBanUpdateArgs} args - Arguments to update one ChanBan.
     * @example
     * // Update one ChanBan
     * const chanBan = await prisma.chanBan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ChanBanUpdateArgs>(
      args: SelectSubset<T, ChanBanUpdateArgs>
    ): Prisma__ChanBanClient<ChanBanGetPayload<T>>

    /**
     * Delete zero or more ChanBans.
     * @param {ChanBanDeleteManyArgs} args - Arguments to filter ChanBans to delete.
     * @example
     * // Delete a few ChanBans
     * const { count } = await prisma.chanBan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ChanBanDeleteManyArgs>(
      args?: SelectSubset<T, ChanBanDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChanBans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChanBanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChanBans
     * const chanBan = await prisma.chanBan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ChanBanUpdateManyArgs>(
      args: SelectSubset<T, ChanBanUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ChanBan.
     * @param {ChanBanUpsertArgs} args - Arguments to update or create a ChanBan.
     * @example
     * // Update or create a ChanBan
     * const chanBan = await prisma.chanBan.upsert({
     *   create: {
     *     // ... data to create a ChanBan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChanBan we want to update
     *   }
     * })
    **/
    upsert<T extends ChanBanUpsertArgs>(
      args: SelectSubset<T, ChanBanUpsertArgs>
    ): Prisma__ChanBanClient<ChanBanGetPayload<T>>

    /**
     * Count the number of ChanBans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChanBanCountArgs} args - Arguments to filter ChanBans to count.
     * @example
     * // Count the number of ChanBans
     * const count = await prisma.chanBan.count({
     *   where: {
     *     // ... the filter for the ChanBans we want to count
     *   }
     * })
    **/
    count<T extends ChanBanCountArgs>(
      args?: Subset<T, ChanBanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChanBanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChanBan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChanBanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChanBanAggregateArgs>(args: Subset<T, ChanBanAggregateArgs>): Prisma.PrismaPromise<GetChanBanAggregateType<T>>

    /**
     * Group by ChanBan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChanBanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChanBanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChanBanGroupByArgs['orderBy'] }
        : { orderBy?: ChanBanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChanBanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChanBanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ChanBan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ChanBanClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    chanRef<T extends ChannelArgs= {}>(args?: Subset<T, ChannelArgs>): Prisma__ChannelClient<ChannelGetPayload<T> | Null>;

    bannedRef<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ChanBan base type for findUnique actions
   */
  export type ChanBanFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the ChanBan
     */
    select?: ChanBanSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChanBanInclude | null
    /**
     * Filter, which ChanBan to fetch.
     */
    where: ChanBanWhereUniqueInput
  }

  /**
   * ChanBan findUnique
   */
  export interface ChanBanFindUniqueArgs extends ChanBanFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ChanBan findUniqueOrThrow
   */
  export type ChanBanFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ChanBan
     */
    select?: ChanBanSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChanBanInclude | null
    /**
     * Filter, which ChanBan to fetch.
     */
    where: ChanBanWhereUniqueInput
  }


  /**
   * ChanBan base type for findFirst actions
   */
  export type ChanBanFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the ChanBan
     */
    select?: ChanBanSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChanBanInclude | null
    /**
     * Filter, which ChanBan to fetch.
     */
    where?: ChanBanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChanBans to fetch.
     */
    orderBy?: Enumerable<ChanBanOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChanBans.
     */
    cursor?: ChanBanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChanBans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChanBans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChanBans.
     */
    distinct?: Enumerable<ChanBanScalarFieldEnum>
  }

  /**
   * ChanBan findFirst
   */
  export interface ChanBanFindFirstArgs extends ChanBanFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ChanBan findFirstOrThrow
   */
  export type ChanBanFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ChanBan
     */
    select?: ChanBanSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChanBanInclude | null
    /**
     * Filter, which ChanBan to fetch.
     */
    where?: ChanBanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChanBans to fetch.
     */
    orderBy?: Enumerable<ChanBanOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChanBans.
     */
    cursor?: ChanBanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChanBans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChanBans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChanBans.
     */
    distinct?: Enumerable<ChanBanScalarFieldEnum>
  }


  /**
   * ChanBan findMany
   */
  export type ChanBanFindManyArgs = {
    /**
     * Select specific fields to fetch from the ChanBan
     */
    select?: ChanBanSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChanBanInclude | null
    /**
     * Filter, which ChanBans to fetch.
     */
    where?: ChanBanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChanBans to fetch.
     */
    orderBy?: Enumerable<ChanBanOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChanBans.
     */
    cursor?: ChanBanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChanBans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChanBans.
     */
    skip?: number
    distinct?: Enumerable<ChanBanScalarFieldEnum>
  }


  /**
   * ChanBan create
   */
  export type ChanBanCreateArgs = {
    /**
     * Select specific fields to fetch from the ChanBan
     */
    select?: ChanBanSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChanBanInclude | null
    /**
     * The data needed to create a ChanBan.
     */
    data: XOR<ChanBanCreateInput, ChanBanUncheckedCreateInput>
  }


  /**
   * ChanBan createMany
   */
  export type ChanBanCreateManyArgs = {
    /**
     * The data used to create many ChanBans.
     */
    data: Enumerable<ChanBanCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ChanBan update
   */
  export type ChanBanUpdateArgs = {
    /**
     * Select specific fields to fetch from the ChanBan
     */
    select?: ChanBanSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChanBanInclude | null
    /**
     * The data needed to update a ChanBan.
     */
    data: XOR<ChanBanUpdateInput, ChanBanUncheckedUpdateInput>
    /**
     * Choose, which ChanBan to update.
     */
    where: ChanBanWhereUniqueInput
  }


  /**
   * ChanBan updateMany
   */
  export type ChanBanUpdateManyArgs = {
    /**
     * The data used to update ChanBans.
     */
    data: XOR<ChanBanUpdateManyMutationInput, ChanBanUncheckedUpdateManyInput>
    /**
     * Filter which ChanBans to update
     */
    where?: ChanBanWhereInput
  }


  /**
   * ChanBan upsert
   */
  export type ChanBanUpsertArgs = {
    /**
     * Select specific fields to fetch from the ChanBan
     */
    select?: ChanBanSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChanBanInclude | null
    /**
     * The filter to search for the ChanBan to update in case it exists.
     */
    where: ChanBanWhereUniqueInput
    /**
     * In case the ChanBan found by the `where` argument doesn't exist, create a new ChanBan with this data.
     */
    create: XOR<ChanBanCreateInput, ChanBanUncheckedCreateInput>
    /**
     * In case the ChanBan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChanBanUpdateInput, ChanBanUncheckedUpdateInput>
  }


  /**
   * ChanBan delete
   */
  export type ChanBanDeleteArgs = {
    /**
     * Select specific fields to fetch from the ChanBan
     */
    select?: ChanBanSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChanBanInclude | null
    /**
     * Filter which ChanBan to delete.
     */
    where: ChanBanWhereUniqueInput
  }


  /**
   * ChanBan deleteMany
   */
  export type ChanBanDeleteManyArgs = {
    /**
     * Filter which ChanBans to delete
     */
    where?: ChanBanWhereInput
  }


  /**
   * ChanBan without action
   */
  export type ChanBanArgs = {
    /**
     * Select specific fields to fetch from the ChanBan
     */
    select?: ChanBanSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChanBanInclude | null
  }



  /**
   * Model ChanMessage
   */


  export type AggregateChanMessage = {
    _count: ChanMessageCountAggregateOutputType | null
    _avg: ChanMessageAvgAggregateOutputType | null
    _sum: ChanMessageSumAggregateOutputType | null
    _min: ChanMessageMinAggregateOutputType | null
    _max: ChanMessageMaxAggregateOutputType | null
  }

  export type ChanMessageAvgAggregateOutputType = {
    sender: number | null
    chanId: number | null
  }

  export type ChanMessageSumAggregateOutputType = {
    sender: number | null
    chanId: number | null
  }

  export type ChanMessageMinAggregateOutputType = {
    sender: number | null
    chanId: number | null
    timeSent: Date | null
    content: string | null
  }

  export type ChanMessageMaxAggregateOutputType = {
    sender: number | null
    chanId: number | null
    timeSent: Date | null
    content: string | null
  }

  export type ChanMessageCountAggregateOutputType = {
    sender: number
    chanId: number
    timeSent: number
    content: number
    _all: number
  }


  export type ChanMessageAvgAggregateInputType = {
    sender?: true
    chanId?: true
  }

  export type ChanMessageSumAggregateInputType = {
    sender?: true
    chanId?: true
  }

  export type ChanMessageMinAggregateInputType = {
    sender?: true
    chanId?: true
    timeSent?: true
    content?: true
  }

  export type ChanMessageMaxAggregateInputType = {
    sender?: true
    chanId?: true
    timeSent?: true
    content?: true
  }

  export type ChanMessageCountAggregateInputType = {
    sender?: true
    chanId?: true
    timeSent?: true
    content?: true
    _all?: true
  }

  export type ChanMessageAggregateArgs = {
    /**
     * Filter which ChanMessage to aggregate.
     */
    where?: ChanMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChanMessages to fetch.
     */
    orderBy?: Enumerable<ChanMessageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChanMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChanMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChanMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChanMessages
    **/
    _count?: true | ChanMessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChanMessageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChanMessageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChanMessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChanMessageMaxAggregateInputType
  }

  export type GetChanMessageAggregateType<T extends ChanMessageAggregateArgs> = {
        [P in keyof T & keyof AggregateChanMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChanMessage[P]>
      : GetScalarType<T[P], AggregateChanMessage[P]>
  }




  export type ChanMessageGroupByArgs = {
    where?: ChanMessageWhereInput
    orderBy?: Enumerable<ChanMessageOrderByWithAggregationInput>
    by: ChanMessageScalarFieldEnum[]
    having?: ChanMessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChanMessageCountAggregateInputType | true
    _avg?: ChanMessageAvgAggregateInputType
    _sum?: ChanMessageSumAggregateInputType
    _min?: ChanMessageMinAggregateInputType
    _max?: ChanMessageMaxAggregateInputType
  }


  export type ChanMessageGroupByOutputType = {
    sender: number
    chanId: number
    timeSent: Date
    content: string
    _count: ChanMessageCountAggregateOutputType | null
    _avg: ChanMessageAvgAggregateOutputType | null
    _sum: ChanMessageSumAggregateOutputType | null
    _min: ChanMessageMinAggregateOutputType | null
    _max: ChanMessageMaxAggregateOutputType | null
  }

  type GetChanMessageGroupByPayload<T extends ChanMessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ChanMessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChanMessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChanMessageGroupByOutputType[P]>
            : GetScalarType<T[P], ChanMessageGroupByOutputType[P]>
        }
      >
    >


  export type ChanMessageSelect = {
    sender?: boolean
    chanId?: boolean
    timeSent?: boolean
    content?: boolean
    senderRef?: boolean | UserArgs
    chanRef?: boolean | ChannelArgs
  }


  export type ChanMessageInclude = {
    senderRef?: boolean | UserArgs
    chanRef?: boolean | ChannelArgs
  }

  export type ChanMessageGetPayload<S extends boolean | null | undefined | ChanMessageArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ChanMessage :
    S extends undefined ? never :
    S extends { include: any } & (ChanMessageArgs | ChanMessageFindManyArgs)
    ? ChanMessage  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'senderRef' ? UserGetPayload<S['include'][P]> :
        P extends 'chanRef' ? ChannelGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ChanMessageArgs | ChanMessageFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'senderRef' ? UserGetPayload<S['select'][P]> :
        P extends 'chanRef' ? ChannelGetPayload<S['select'][P]> :  P extends keyof ChanMessage ? ChanMessage[P] : never
  } 
      : ChanMessage


  type ChanMessageCountArgs = 
    Omit<ChanMessageFindManyArgs, 'select' | 'include'> & {
      select?: ChanMessageCountAggregateInputType | true
    }

  export interface ChanMessageDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one ChanMessage that matches the filter.
     * @param {ChanMessageFindUniqueArgs} args - Arguments to find a ChanMessage
     * @example
     * // Get one ChanMessage
     * const chanMessage = await prisma.chanMessage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ChanMessageFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ChanMessageFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ChanMessage'> extends True ? Prisma__ChanMessageClient<ChanMessageGetPayload<T>> : Prisma__ChanMessageClient<ChanMessageGetPayload<T> | null, null>

    /**
     * Find one ChanMessage that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ChanMessageFindUniqueOrThrowArgs} args - Arguments to find a ChanMessage
     * @example
     * // Get one ChanMessage
     * const chanMessage = await prisma.chanMessage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ChanMessageFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ChanMessageFindUniqueOrThrowArgs>
    ): Prisma__ChanMessageClient<ChanMessageGetPayload<T>>

    /**
     * Find the first ChanMessage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChanMessageFindFirstArgs} args - Arguments to find a ChanMessage
     * @example
     * // Get one ChanMessage
     * const chanMessage = await prisma.chanMessage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ChanMessageFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ChanMessageFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ChanMessage'> extends True ? Prisma__ChanMessageClient<ChanMessageGetPayload<T>> : Prisma__ChanMessageClient<ChanMessageGetPayload<T> | null, null>

    /**
     * Find the first ChanMessage that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChanMessageFindFirstOrThrowArgs} args - Arguments to find a ChanMessage
     * @example
     * // Get one ChanMessage
     * const chanMessage = await prisma.chanMessage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ChanMessageFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ChanMessageFindFirstOrThrowArgs>
    ): Prisma__ChanMessageClient<ChanMessageGetPayload<T>>

    /**
     * Find zero or more ChanMessages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChanMessageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChanMessages
     * const chanMessages = await prisma.chanMessage.findMany()
     * 
     * // Get first 10 ChanMessages
     * const chanMessages = await prisma.chanMessage.findMany({ take: 10 })
     * 
     * // Only select the `sender`
     * const chanMessageWithSenderOnly = await prisma.chanMessage.findMany({ select: { sender: true } })
     * 
    **/
    findMany<T extends ChanMessageFindManyArgs>(
      args?: SelectSubset<T, ChanMessageFindManyArgs>
    ): Prisma.PrismaPromise<Array<ChanMessageGetPayload<T>>>

    /**
     * Create a ChanMessage.
     * @param {ChanMessageCreateArgs} args - Arguments to create a ChanMessage.
     * @example
     * // Create one ChanMessage
     * const ChanMessage = await prisma.chanMessage.create({
     *   data: {
     *     // ... data to create a ChanMessage
     *   }
     * })
     * 
    **/
    create<T extends ChanMessageCreateArgs>(
      args: SelectSubset<T, ChanMessageCreateArgs>
    ): Prisma__ChanMessageClient<ChanMessageGetPayload<T>>

    /**
     * Create many ChanMessages.
     *     @param {ChanMessageCreateManyArgs} args - Arguments to create many ChanMessages.
     *     @example
     *     // Create many ChanMessages
     *     const chanMessage = await prisma.chanMessage.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ChanMessageCreateManyArgs>(
      args?: SelectSubset<T, ChanMessageCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ChanMessage.
     * @param {ChanMessageDeleteArgs} args - Arguments to delete one ChanMessage.
     * @example
     * // Delete one ChanMessage
     * const ChanMessage = await prisma.chanMessage.delete({
     *   where: {
     *     // ... filter to delete one ChanMessage
     *   }
     * })
     * 
    **/
    delete<T extends ChanMessageDeleteArgs>(
      args: SelectSubset<T, ChanMessageDeleteArgs>
    ): Prisma__ChanMessageClient<ChanMessageGetPayload<T>>

    /**
     * Update one ChanMessage.
     * @param {ChanMessageUpdateArgs} args - Arguments to update one ChanMessage.
     * @example
     * // Update one ChanMessage
     * const chanMessage = await prisma.chanMessage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ChanMessageUpdateArgs>(
      args: SelectSubset<T, ChanMessageUpdateArgs>
    ): Prisma__ChanMessageClient<ChanMessageGetPayload<T>>

    /**
     * Delete zero or more ChanMessages.
     * @param {ChanMessageDeleteManyArgs} args - Arguments to filter ChanMessages to delete.
     * @example
     * // Delete a few ChanMessages
     * const { count } = await prisma.chanMessage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ChanMessageDeleteManyArgs>(
      args?: SelectSubset<T, ChanMessageDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChanMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChanMessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChanMessages
     * const chanMessage = await prisma.chanMessage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ChanMessageUpdateManyArgs>(
      args: SelectSubset<T, ChanMessageUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ChanMessage.
     * @param {ChanMessageUpsertArgs} args - Arguments to update or create a ChanMessage.
     * @example
     * // Update or create a ChanMessage
     * const chanMessage = await prisma.chanMessage.upsert({
     *   create: {
     *     // ... data to create a ChanMessage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChanMessage we want to update
     *   }
     * })
    **/
    upsert<T extends ChanMessageUpsertArgs>(
      args: SelectSubset<T, ChanMessageUpsertArgs>
    ): Prisma__ChanMessageClient<ChanMessageGetPayload<T>>

    /**
     * Count the number of ChanMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChanMessageCountArgs} args - Arguments to filter ChanMessages to count.
     * @example
     * // Count the number of ChanMessages
     * const count = await prisma.chanMessage.count({
     *   where: {
     *     // ... the filter for the ChanMessages we want to count
     *   }
     * })
    **/
    count<T extends ChanMessageCountArgs>(
      args?: Subset<T, ChanMessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChanMessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChanMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChanMessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChanMessageAggregateArgs>(args: Subset<T, ChanMessageAggregateArgs>): Prisma.PrismaPromise<GetChanMessageAggregateType<T>>

    /**
     * Group by ChanMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChanMessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChanMessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChanMessageGroupByArgs['orderBy'] }
        : { orderBy?: ChanMessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChanMessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChanMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ChanMessage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ChanMessageClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    senderRef<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    chanRef<T extends ChannelArgs= {}>(args?: Subset<T, ChannelArgs>): Prisma__ChannelClient<ChannelGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ChanMessage base type for findUnique actions
   */
  export type ChanMessageFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the ChanMessage
     */
    select?: ChanMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChanMessageInclude | null
    /**
     * Filter, which ChanMessage to fetch.
     */
    where: ChanMessageWhereUniqueInput
  }

  /**
   * ChanMessage findUnique
   */
  export interface ChanMessageFindUniqueArgs extends ChanMessageFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ChanMessage findUniqueOrThrow
   */
  export type ChanMessageFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ChanMessage
     */
    select?: ChanMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChanMessageInclude | null
    /**
     * Filter, which ChanMessage to fetch.
     */
    where: ChanMessageWhereUniqueInput
  }


  /**
   * ChanMessage base type for findFirst actions
   */
  export type ChanMessageFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the ChanMessage
     */
    select?: ChanMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChanMessageInclude | null
    /**
     * Filter, which ChanMessage to fetch.
     */
    where?: ChanMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChanMessages to fetch.
     */
    orderBy?: Enumerable<ChanMessageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChanMessages.
     */
    cursor?: ChanMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChanMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChanMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChanMessages.
     */
    distinct?: Enumerable<ChanMessageScalarFieldEnum>
  }

  /**
   * ChanMessage findFirst
   */
  export interface ChanMessageFindFirstArgs extends ChanMessageFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ChanMessage findFirstOrThrow
   */
  export type ChanMessageFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ChanMessage
     */
    select?: ChanMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChanMessageInclude | null
    /**
     * Filter, which ChanMessage to fetch.
     */
    where?: ChanMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChanMessages to fetch.
     */
    orderBy?: Enumerable<ChanMessageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChanMessages.
     */
    cursor?: ChanMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChanMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChanMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChanMessages.
     */
    distinct?: Enumerable<ChanMessageScalarFieldEnum>
  }


  /**
   * ChanMessage findMany
   */
  export type ChanMessageFindManyArgs = {
    /**
     * Select specific fields to fetch from the ChanMessage
     */
    select?: ChanMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChanMessageInclude | null
    /**
     * Filter, which ChanMessages to fetch.
     */
    where?: ChanMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChanMessages to fetch.
     */
    orderBy?: Enumerable<ChanMessageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChanMessages.
     */
    cursor?: ChanMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChanMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChanMessages.
     */
    skip?: number
    distinct?: Enumerable<ChanMessageScalarFieldEnum>
  }


  /**
   * ChanMessage create
   */
  export type ChanMessageCreateArgs = {
    /**
     * Select specific fields to fetch from the ChanMessage
     */
    select?: ChanMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChanMessageInclude | null
    /**
     * The data needed to create a ChanMessage.
     */
    data: XOR<ChanMessageCreateInput, ChanMessageUncheckedCreateInput>
  }


  /**
   * ChanMessage createMany
   */
  export type ChanMessageCreateManyArgs = {
    /**
     * The data used to create many ChanMessages.
     */
    data: Enumerable<ChanMessageCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ChanMessage update
   */
  export type ChanMessageUpdateArgs = {
    /**
     * Select specific fields to fetch from the ChanMessage
     */
    select?: ChanMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChanMessageInclude | null
    /**
     * The data needed to update a ChanMessage.
     */
    data: XOR<ChanMessageUpdateInput, ChanMessageUncheckedUpdateInput>
    /**
     * Choose, which ChanMessage to update.
     */
    where: ChanMessageWhereUniqueInput
  }


  /**
   * ChanMessage updateMany
   */
  export type ChanMessageUpdateManyArgs = {
    /**
     * The data used to update ChanMessages.
     */
    data: XOR<ChanMessageUpdateManyMutationInput, ChanMessageUncheckedUpdateManyInput>
    /**
     * Filter which ChanMessages to update
     */
    where?: ChanMessageWhereInput
  }


  /**
   * ChanMessage upsert
   */
  export type ChanMessageUpsertArgs = {
    /**
     * Select specific fields to fetch from the ChanMessage
     */
    select?: ChanMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChanMessageInclude | null
    /**
     * The filter to search for the ChanMessage to update in case it exists.
     */
    where: ChanMessageWhereUniqueInput
    /**
     * In case the ChanMessage found by the `where` argument doesn't exist, create a new ChanMessage with this data.
     */
    create: XOR<ChanMessageCreateInput, ChanMessageUncheckedCreateInput>
    /**
     * In case the ChanMessage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChanMessageUpdateInput, ChanMessageUncheckedUpdateInput>
  }


  /**
   * ChanMessage delete
   */
  export type ChanMessageDeleteArgs = {
    /**
     * Select specific fields to fetch from the ChanMessage
     */
    select?: ChanMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChanMessageInclude | null
    /**
     * Filter which ChanMessage to delete.
     */
    where: ChanMessageWhereUniqueInput
  }


  /**
   * ChanMessage deleteMany
   */
  export type ChanMessageDeleteManyArgs = {
    /**
     * Filter which ChanMessages to delete
     */
    where?: ChanMessageWhereInput
  }


  /**
   * ChanMessage without action
   */
  export type ChanMessageArgs = {
    /**
     * Select specific fields to fetch from the ChanMessage
     */
    select?: ChanMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChanMessageInclude | null
  }



  /**
   * Model PrivMessage
   */


  export type AggregatePrivMessage = {
    _count: PrivMessageCountAggregateOutputType | null
    _avg: PrivMessageAvgAggregateOutputType | null
    _sum: PrivMessageSumAggregateOutputType | null
    _min: PrivMessageMinAggregateOutputType | null
    _max: PrivMessageMaxAggregateOutputType | null
  }

  export type PrivMessageAvgAggregateOutputType = {
    sender: number | null
    recipient: number | null
  }

  export type PrivMessageSumAggregateOutputType = {
    sender: number | null
    recipient: number | null
  }

  export type PrivMessageMinAggregateOutputType = {
    sender: number | null
    recipient: number | null
    timeSent: Date | null
    content: string | null
  }

  export type PrivMessageMaxAggregateOutputType = {
    sender: number | null
    recipient: number | null
    timeSent: Date | null
    content: string | null
  }

  export type PrivMessageCountAggregateOutputType = {
    sender: number
    recipient: number
    timeSent: number
    content: number
    _all: number
  }


  export type PrivMessageAvgAggregateInputType = {
    sender?: true
    recipient?: true
  }

  export type PrivMessageSumAggregateInputType = {
    sender?: true
    recipient?: true
  }

  export type PrivMessageMinAggregateInputType = {
    sender?: true
    recipient?: true
    timeSent?: true
    content?: true
  }

  export type PrivMessageMaxAggregateInputType = {
    sender?: true
    recipient?: true
    timeSent?: true
    content?: true
  }

  export type PrivMessageCountAggregateInputType = {
    sender?: true
    recipient?: true
    timeSent?: true
    content?: true
    _all?: true
  }

  export type PrivMessageAggregateArgs = {
    /**
     * Filter which PrivMessage to aggregate.
     */
    where?: PrivMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrivMessages to fetch.
     */
    orderBy?: Enumerable<PrivMessageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PrivMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrivMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrivMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PrivMessages
    **/
    _count?: true | PrivMessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PrivMessageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PrivMessageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PrivMessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PrivMessageMaxAggregateInputType
  }

  export type GetPrivMessageAggregateType<T extends PrivMessageAggregateArgs> = {
        [P in keyof T & keyof AggregatePrivMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePrivMessage[P]>
      : GetScalarType<T[P], AggregatePrivMessage[P]>
  }




  export type PrivMessageGroupByArgs = {
    where?: PrivMessageWhereInput
    orderBy?: Enumerable<PrivMessageOrderByWithAggregationInput>
    by: PrivMessageScalarFieldEnum[]
    having?: PrivMessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PrivMessageCountAggregateInputType | true
    _avg?: PrivMessageAvgAggregateInputType
    _sum?: PrivMessageSumAggregateInputType
    _min?: PrivMessageMinAggregateInputType
    _max?: PrivMessageMaxAggregateInputType
  }


  export type PrivMessageGroupByOutputType = {
    sender: number
    recipient: number
    timeSent: Date
    content: string
    _count: PrivMessageCountAggregateOutputType | null
    _avg: PrivMessageAvgAggregateOutputType | null
    _sum: PrivMessageSumAggregateOutputType | null
    _min: PrivMessageMinAggregateOutputType | null
    _max: PrivMessageMaxAggregateOutputType | null
  }

  type GetPrivMessageGroupByPayload<T extends PrivMessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<PrivMessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PrivMessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PrivMessageGroupByOutputType[P]>
            : GetScalarType<T[P], PrivMessageGroupByOutputType[P]>
        }
      >
    >


  export type PrivMessageSelect = {
    sender?: boolean
    recipient?: boolean
    timeSent?: boolean
    content?: boolean
    senderRef?: boolean | UserArgs
    receiptRef?: boolean | UserArgs
  }


  export type PrivMessageInclude = {
    senderRef?: boolean | UserArgs
    receiptRef?: boolean | UserArgs
  }

  export type PrivMessageGetPayload<S extends boolean | null | undefined | PrivMessageArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? PrivMessage :
    S extends undefined ? never :
    S extends { include: any } & (PrivMessageArgs | PrivMessageFindManyArgs)
    ? PrivMessage  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'senderRef' ? UserGetPayload<S['include'][P]> :
        P extends 'receiptRef' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (PrivMessageArgs | PrivMessageFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'senderRef' ? UserGetPayload<S['select'][P]> :
        P extends 'receiptRef' ? UserGetPayload<S['select'][P]> :  P extends keyof PrivMessage ? PrivMessage[P] : never
  } 
      : PrivMessage


  type PrivMessageCountArgs = 
    Omit<PrivMessageFindManyArgs, 'select' | 'include'> & {
      select?: PrivMessageCountAggregateInputType | true
    }

  export interface PrivMessageDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one PrivMessage that matches the filter.
     * @param {PrivMessageFindUniqueArgs} args - Arguments to find a PrivMessage
     * @example
     * // Get one PrivMessage
     * const privMessage = await prisma.privMessage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PrivMessageFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PrivMessageFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'PrivMessage'> extends True ? Prisma__PrivMessageClient<PrivMessageGetPayload<T>> : Prisma__PrivMessageClient<PrivMessageGetPayload<T> | null, null>

    /**
     * Find one PrivMessage that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PrivMessageFindUniqueOrThrowArgs} args - Arguments to find a PrivMessage
     * @example
     * // Get one PrivMessage
     * const privMessage = await prisma.privMessage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PrivMessageFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, PrivMessageFindUniqueOrThrowArgs>
    ): Prisma__PrivMessageClient<PrivMessageGetPayload<T>>

    /**
     * Find the first PrivMessage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrivMessageFindFirstArgs} args - Arguments to find a PrivMessage
     * @example
     * // Get one PrivMessage
     * const privMessage = await prisma.privMessage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PrivMessageFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PrivMessageFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'PrivMessage'> extends True ? Prisma__PrivMessageClient<PrivMessageGetPayload<T>> : Prisma__PrivMessageClient<PrivMessageGetPayload<T> | null, null>

    /**
     * Find the first PrivMessage that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrivMessageFindFirstOrThrowArgs} args - Arguments to find a PrivMessage
     * @example
     * // Get one PrivMessage
     * const privMessage = await prisma.privMessage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PrivMessageFindFirstOrThrowArgs>(
      args?: SelectSubset<T, PrivMessageFindFirstOrThrowArgs>
    ): Prisma__PrivMessageClient<PrivMessageGetPayload<T>>

    /**
     * Find zero or more PrivMessages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrivMessageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PrivMessages
     * const privMessages = await prisma.privMessage.findMany()
     * 
     * // Get first 10 PrivMessages
     * const privMessages = await prisma.privMessage.findMany({ take: 10 })
     * 
     * // Only select the `sender`
     * const privMessageWithSenderOnly = await prisma.privMessage.findMany({ select: { sender: true } })
     * 
    **/
    findMany<T extends PrivMessageFindManyArgs>(
      args?: SelectSubset<T, PrivMessageFindManyArgs>
    ): Prisma.PrismaPromise<Array<PrivMessageGetPayload<T>>>

    /**
     * Create a PrivMessage.
     * @param {PrivMessageCreateArgs} args - Arguments to create a PrivMessage.
     * @example
     * // Create one PrivMessage
     * const PrivMessage = await prisma.privMessage.create({
     *   data: {
     *     // ... data to create a PrivMessage
     *   }
     * })
     * 
    **/
    create<T extends PrivMessageCreateArgs>(
      args: SelectSubset<T, PrivMessageCreateArgs>
    ): Prisma__PrivMessageClient<PrivMessageGetPayload<T>>

    /**
     * Create many PrivMessages.
     *     @param {PrivMessageCreateManyArgs} args - Arguments to create many PrivMessages.
     *     @example
     *     // Create many PrivMessages
     *     const privMessage = await prisma.privMessage.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PrivMessageCreateManyArgs>(
      args?: SelectSubset<T, PrivMessageCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PrivMessage.
     * @param {PrivMessageDeleteArgs} args - Arguments to delete one PrivMessage.
     * @example
     * // Delete one PrivMessage
     * const PrivMessage = await prisma.privMessage.delete({
     *   where: {
     *     // ... filter to delete one PrivMessage
     *   }
     * })
     * 
    **/
    delete<T extends PrivMessageDeleteArgs>(
      args: SelectSubset<T, PrivMessageDeleteArgs>
    ): Prisma__PrivMessageClient<PrivMessageGetPayload<T>>

    /**
     * Update one PrivMessage.
     * @param {PrivMessageUpdateArgs} args - Arguments to update one PrivMessage.
     * @example
     * // Update one PrivMessage
     * const privMessage = await prisma.privMessage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PrivMessageUpdateArgs>(
      args: SelectSubset<T, PrivMessageUpdateArgs>
    ): Prisma__PrivMessageClient<PrivMessageGetPayload<T>>

    /**
     * Delete zero or more PrivMessages.
     * @param {PrivMessageDeleteManyArgs} args - Arguments to filter PrivMessages to delete.
     * @example
     * // Delete a few PrivMessages
     * const { count } = await prisma.privMessage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PrivMessageDeleteManyArgs>(
      args?: SelectSubset<T, PrivMessageDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PrivMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrivMessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PrivMessages
     * const privMessage = await prisma.privMessage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PrivMessageUpdateManyArgs>(
      args: SelectSubset<T, PrivMessageUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PrivMessage.
     * @param {PrivMessageUpsertArgs} args - Arguments to update or create a PrivMessage.
     * @example
     * // Update or create a PrivMessage
     * const privMessage = await prisma.privMessage.upsert({
     *   create: {
     *     // ... data to create a PrivMessage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PrivMessage we want to update
     *   }
     * })
    **/
    upsert<T extends PrivMessageUpsertArgs>(
      args: SelectSubset<T, PrivMessageUpsertArgs>
    ): Prisma__PrivMessageClient<PrivMessageGetPayload<T>>

    /**
     * Count the number of PrivMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrivMessageCountArgs} args - Arguments to filter PrivMessages to count.
     * @example
     * // Count the number of PrivMessages
     * const count = await prisma.privMessage.count({
     *   where: {
     *     // ... the filter for the PrivMessages we want to count
     *   }
     * })
    **/
    count<T extends PrivMessageCountArgs>(
      args?: Subset<T, PrivMessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PrivMessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PrivMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrivMessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PrivMessageAggregateArgs>(args: Subset<T, PrivMessageAggregateArgs>): Prisma.PrismaPromise<GetPrivMessageAggregateType<T>>

    /**
     * Group by PrivMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrivMessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PrivMessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PrivMessageGroupByArgs['orderBy'] }
        : { orderBy?: PrivMessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PrivMessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPrivMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for PrivMessage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PrivMessageClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    senderRef<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    receiptRef<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * PrivMessage base type for findUnique actions
   */
  export type PrivMessageFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the PrivMessage
     */
    select?: PrivMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrivMessageInclude | null
    /**
     * Filter, which PrivMessage to fetch.
     */
    where: PrivMessageWhereUniqueInput
  }

  /**
   * PrivMessage findUnique
   */
  export interface PrivMessageFindUniqueArgs extends PrivMessageFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * PrivMessage findUniqueOrThrow
   */
  export type PrivMessageFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the PrivMessage
     */
    select?: PrivMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrivMessageInclude | null
    /**
     * Filter, which PrivMessage to fetch.
     */
    where: PrivMessageWhereUniqueInput
  }


  /**
   * PrivMessage base type for findFirst actions
   */
  export type PrivMessageFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the PrivMessage
     */
    select?: PrivMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrivMessageInclude | null
    /**
     * Filter, which PrivMessage to fetch.
     */
    where?: PrivMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrivMessages to fetch.
     */
    orderBy?: Enumerable<PrivMessageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PrivMessages.
     */
    cursor?: PrivMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrivMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrivMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PrivMessages.
     */
    distinct?: Enumerable<PrivMessageScalarFieldEnum>
  }

  /**
   * PrivMessage findFirst
   */
  export interface PrivMessageFindFirstArgs extends PrivMessageFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * PrivMessage findFirstOrThrow
   */
  export type PrivMessageFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the PrivMessage
     */
    select?: PrivMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrivMessageInclude | null
    /**
     * Filter, which PrivMessage to fetch.
     */
    where?: PrivMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrivMessages to fetch.
     */
    orderBy?: Enumerable<PrivMessageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PrivMessages.
     */
    cursor?: PrivMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrivMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrivMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PrivMessages.
     */
    distinct?: Enumerable<PrivMessageScalarFieldEnum>
  }


  /**
   * PrivMessage findMany
   */
  export type PrivMessageFindManyArgs = {
    /**
     * Select specific fields to fetch from the PrivMessage
     */
    select?: PrivMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrivMessageInclude | null
    /**
     * Filter, which PrivMessages to fetch.
     */
    where?: PrivMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrivMessages to fetch.
     */
    orderBy?: Enumerable<PrivMessageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PrivMessages.
     */
    cursor?: PrivMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrivMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrivMessages.
     */
    skip?: number
    distinct?: Enumerable<PrivMessageScalarFieldEnum>
  }


  /**
   * PrivMessage create
   */
  export type PrivMessageCreateArgs = {
    /**
     * Select specific fields to fetch from the PrivMessage
     */
    select?: PrivMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrivMessageInclude | null
    /**
     * The data needed to create a PrivMessage.
     */
    data: XOR<PrivMessageCreateInput, PrivMessageUncheckedCreateInput>
  }


  /**
   * PrivMessage createMany
   */
  export type PrivMessageCreateManyArgs = {
    /**
     * The data used to create many PrivMessages.
     */
    data: Enumerable<PrivMessageCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * PrivMessage update
   */
  export type PrivMessageUpdateArgs = {
    /**
     * Select specific fields to fetch from the PrivMessage
     */
    select?: PrivMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrivMessageInclude | null
    /**
     * The data needed to update a PrivMessage.
     */
    data: XOR<PrivMessageUpdateInput, PrivMessageUncheckedUpdateInput>
    /**
     * Choose, which PrivMessage to update.
     */
    where: PrivMessageWhereUniqueInput
  }


  /**
   * PrivMessage updateMany
   */
  export type PrivMessageUpdateManyArgs = {
    /**
     * The data used to update PrivMessages.
     */
    data: XOR<PrivMessageUpdateManyMutationInput, PrivMessageUncheckedUpdateManyInput>
    /**
     * Filter which PrivMessages to update
     */
    where?: PrivMessageWhereInput
  }


  /**
   * PrivMessage upsert
   */
  export type PrivMessageUpsertArgs = {
    /**
     * Select specific fields to fetch from the PrivMessage
     */
    select?: PrivMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrivMessageInclude | null
    /**
     * The filter to search for the PrivMessage to update in case it exists.
     */
    where: PrivMessageWhereUniqueInput
    /**
     * In case the PrivMessage found by the `where` argument doesn't exist, create a new PrivMessage with this data.
     */
    create: XOR<PrivMessageCreateInput, PrivMessageUncheckedCreateInput>
    /**
     * In case the PrivMessage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PrivMessageUpdateInput, PrivMessageUncheckedUpdateInput>
  }


  /**
   * PrivMessage delete
   */
  export type PrivMessageDeleteArgs = {
    /**
     * Select specific fields to fetch from the PrivMessage
     */
    select?: PrivMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrivMessageInclude | null
    /**
     * Filter which PrivMessage to delete.
     */
    where: PrivMessageWhereUniqueInput
  }


  /**
   * PrivMessage deleteMany
   */
  export type PrivMessageDeleteManyArgs = {
    /**
     * Filter which PrivMessages to delete
     */
    where?: PrivMessageWhereInput
  }


  /**
   * PrivMessage without action
   */
  export type PrivMessageArgs = {
    /**
     * Select specific fields to fetch from the PrivMessage
     */
    select?: PrivMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PrivMessageInclude | null
  }



  /**
   * Model MatchHistory
   */


  export type AggregateMatchHistory = {
    _count: MatchHistoryCountAggregateOutputType | null
    _avg: MatchHistoryAvgAggregateOutputType | null
    _sum: MatchHistorySumAggregateOutputType | null
    _min: MatchHistoryMinAggregateOutputType | null
    _max: MatchHistoryMaxAggregateOutputType | null
  }

  export type MatchHistoryAvgAggregateOutputType = {
    id: number | null
    player1: number | null
    player2: number | null
    winner: number | null
  }

  export type MatchHistorySumAggregateOutputType = {
    id: number | null
    player1: number | null
    player2: number | null
    winner: number | null
  }

  export type MatchHistoryMinAggregateOutputType = {
    id: number | null
    player1: number | null
    player2: number | null
    timeStart: Date | null
    timeEnd: Date | null
    winner: number | null
  }

  export type MatchHistoryMaxAggregateOutputType = {
    id: number | null
    player1: number | null
    player2: number | null
    timeStart: Date | null
    timeEnd: Date | null
    winner: number | null
  }

  export type MatchHistoryCountAggregateOutputType = {
    id: number
    player1: number
    player2: number
    timeStart: number
    timeEnd: number
    winner: number
    _all: number
  }


  export type MatchHistoryAvgAggregateInputType = {
    id?: true
    player1?: true
    player2?: true
    winner?: true
  }

  export type MatchHistorySumAggregateInputType = {
    id?: true
    player1?: true
    player2?: true
    winner?: true
  }

  export type MatchHistoryMinAggregateInputType = {
    id?: true
    player1?: true
    player2?: true
    timeStart?: true
    timeEnd?: true
    winner?: true
  }

  export type MatchHistoryMaxAggregateInputType = {
    id?: true
    player1?: true
    player2?: true
    timeStart?: true
    timeEnd?: true
    winner?: true
  }

  export type MatchHistoryCountAggregateInputType = {
    id?: true
    player1?: true
    player2?: true
    timeStart?: true
    timeEnd?: true
    winner?: true
    _all?: true
  }

  export type MatchHistoryAggregateArgs = {
    /**
     * Filter which MatchHistory to aggregate.
     */
    where?: MatchHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchHistories to fetch.
     */
    orderBy?: Enumerable<MatchHistoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MatchHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MatchHistories
    **/
    _count?: true | MatchHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MatchHistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MatchHistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MatchHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MatchHistoryMaxAggregateInputType
  }

  export type GetMatchHistoryAggregateType<T extends MatchHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateMatchHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMatchHistory[P]>
      : GetScalarType<T[P], AggregateMatchHistory[P]>
  }




  export type MatchHistoryGroupByArgs = {
    where?: MatchHistoryWhereInput
    orderBy?: Enumerable<MatchHistoryOrderByWithAggregationInput>
    by: MatchHistoryScalarFieldEnum[]
    having?: MatchHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MatchHistoryCountAggregateInputType | true
    _avg?: MatchHistoryAvgAggregateInputType
    _sum?: MatchHistorySumAggregateInputType
    _min?: MatchHistoryMinAggregateInputType
    _max?: MatchHistoryMaxAggregateInputType
  }


  export type MatchHistoryGroupByOutputType = {
    id: number
    player1: number
    player2: number
    timeStart: Date
    timeEnd: Date | null
    winner: number | null
    _count: MatchHistoryCountAggregateOutputType | null
    _avg: MatchHistoryAvgAggregateOutputType | null
    _sum: MatchHistorySumAggregateOutputType | null
    _min: MatchHistoryMinAggregateOutputType | null
    _max: MatchHistoryMaxAggregateOutputType | null
  }

  type GetMatchHistoryGroupByPayload<T extends MatchHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<MatchHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MatchHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MatchHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], MatchHistoryGroupByOutputType[P]>
        }
      >
    >


  export type MatchHistorySelect = {
    id?: boolean
    player1?: boolean
    player2?: boolean
    timeStart?: boolean
    timeEnd?: boolean
    winner?: boolean
    player1Ref?: boolean | UserArgs
    player2Ref?: boolean | UserArgs
    winnerRef?: boolean | UserArgs
  }


  export type MatchHistoryInclude = {
    player1Ref?: boolean | UserArgs
    player2Ref?: boolean | UserArgs
    winnerRef?: boolean | UserArgs
  }

  export type MatchHistoryGetPayload<S extends boolean | null | undefined | MatchHistoryArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? MatchHistory :
    S extends undefined ? never :
    S extends { include: any } & (MatchHistoryArgs | MatchHistoryFindManyArgs)
    ? MatchHistory  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'player1Ref' ? UserGetPayload<S['include'][P]> :
        P extends 'player2Ref' ? UserGetPayload<S['include'][P]> :
        P extends 'winnerRef' ? UserGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (MatchHistoryArgs | MatchHistoryFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'player1Ref' ? UserGetPayload<S['select'][P]> :
        P extends 'player2Ref' ? UserGetPayload<S['select'][P]> :
        P extends 'winnerRef' ? UserGetPayload<S['select'][P]> | null :  P extends keyof MatchHistory ? MatchHistory[P] : never
  } 
      : MatchHistory


  type MatchHistoryCountArgs = 
    Omit<MatchHistoryFindManyArgs, 'select' | 'include'> & {
      select?: MatchHistoryCountAggregateInputType | true
    }

  export interface MatchHistoryDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one MatchHistory that matches the filter.
     * @param {MatchHistoryFindUniqueArgs} args - Arguments to find a MatchHistory
     * @example
     * // Get one MatchHistory
     * const matchHistory = await prisma.matchHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MatchHistoryFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, MatchHistoryFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'MatchHistory'> extends True ? Prisma__MatchHistoryClient<MatchHistoryGetPayload<T>> : Prisma__MatchHistoryClient<MatchHistoryGetPayload<T> | null, null>

    /**
     * Find one MatchHistory that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MatchHistoryFindUniqueOrThrowArgs} args - Arguments to find a MatchHistory
     * @example
     * // Get one MatchHistory
     * const matchHistory = await prisma.matchHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MatchHistoryFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, MatchHistoryFindUniqueOrThrowArgs>
    ): Prisma__MatchHistoryClient<MatchHistoryGetPayload<T>>

    /**
     * Find the first MatchHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchHistoryFindFirstArgs} args - Arguments to find a MatchHistory
     * @example
     * // Get one MatchHistory
     * const matchHistory = await prisma.matchHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MatchHistoryFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, MatchHistoryFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'MatchHistory'> extends True ? Prisma__MatchHistoryClient<MatchHistoryGetPayload<T>> : Prisma__MatchHistoryClient<MatchHistoryGetPayload<T> | null, null>

    /**
     * Find the first MatchHistory that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchHistoryFindFirstOrThrowArgs} args - Arguments to find a MatchHistory
     * @example
     * // Get one MatchHistory
     * const matchHistory = await prisma.matchHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MatchHistoryFindFirstOrThrowArgs>(
      args?: SelectSubset<T, MatchHistoryFindFirstOrThrowArgs>
    ): Prisma__MatchHistoryClient<MatchHistoryGetPayload<T>>

    /**
     * Find zero or more MatchHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchHistoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MatchHistories
     * const matchHistories = await prisma.matchHistory.findMany()
     * 
     * // Get first 10 MatchHistories
     * const matchHistories = await prisma.matchHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const matchHistoryWithIdOnly = await prisma.matchHistory.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MatchHistoryFindManyArgs>(
      args?: SelectSubset<T, MatchHistoryFindManyArgs>
    ): Prisma.PrismaPromise<Array<MatchHistoryGetPayload<T>>>

    /**
     * Create a MatchHistory.
     * @param {MatchHistoryCreateArgs} args - Arguments to create a MatchHistory.
     * @example
     * // Create one MatchHistory
     * const MatchHistory = await prisma.matchHistory.create({
     *   data: {
     *     // ... data to create a MatchHistory
     *   }
     * })
     * 
    **/
    create<T extends MatchHistoryCreateArgs>(
      args: SelectSubset<T, MatchHistoryCreateArgs>
    ): Prisma__MatchHistoryClient<MatchHistoryGetPayload<T>>

    /**
     * Create many MatchHistories.
     *     @param {MatchHistoryCreateManyArgs} args - Arguments to create many MatchHistories.
     *     @example
     *     // Create many MatchHistories
     *     const matchHistory = await prisma.matchHistory.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MatchHistoryCreateManyArgs>(
      args?: SelectSubset<T, MatchHistoryCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MatchHistory.
     * @param {MatchHistoryDeleteArgs} args - Arguments to delete one MatchHistory.
     * @example
     * // Delete one MatchHistory
     * const MatchHistory = await prisma.matchHistory.delete({
     *   where: {
     *     // ... filter to delete one MatchHistory
     *   }
     * })
     * 
    **/
    delete<T extends MatchHistoryDeleteArgs>(
      args: SelectSubset<T, MatchHistoryDeleteArgs>
    ): Prisma__MatchHistoryClient<MatchHistoryGetPayload<T>>

    /**
     * Update one MatchHistory.
     * @param {MatchHistoryUpdateArgs} args - Arguments to update one MatchHistory.
     * @example
     * // Update one MatchHistory
     * const matchHistory = await prisma.matchHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MatchHistoryUpdateArgs>(
      args: SelectSubset<T, MatchHistoryUpdateArgs>
    ): Prisma__MatchHistoryClient<MatchHistoryGetPayload<T>>

    /**
     * Delete zero or more MatchHistories.
     * @param {MatchHistoryDeleteManyArgs} args - Arguments to filter MatchHistories to delete.
     * @example
     * // Delete a few MatchHistories
     * const { count } = await prisma.matchHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MatchHistoryDeleteManyArgs>(
      args?: SelectSubset<T, MatchHistoryDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MatchHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MatchHistories
     * const matchHistory = await prisma.matchHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MatchHistoryUpdateManyArgs>(
      args: SelectSubset<T, MatchHistoryUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MatchHistory.
     * @param {MatchHistoryUpsertArgs} args - Arguments to update or create a MatchHistory.
     * @example
     * // Update or create a MatchHistory
     * const matchHistory = await prisma.matchHistory.upsert({
     *   create: {
     *     // ... data to create a MatchHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MatchHistory we want to update
     *   }
     * })
    **/
    upsert<T extends MatchHistoryUpsertArgs>(
      args: SelectSubset<T, MatchHistoryUpsertArgs>
    ): Prisma__MatchHistoryClient<MatchHistoryGetPayload<T>>

    /**
     * Count the number of MatchHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchHistoryCountArgs} args - Arguments to filter MatchHistories to count.
     * @example
     * // Count the number of MatchHistories
     * const count = await prisma.matchHistory.count({
     *   where: {
     *     // ... the filter for the MatchHistories we want to count
     *   }
     * })
    **/
    count<T extends MatchHistoryCountArgs>(
      args?: Subset<T, MatchHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MatchHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MatchHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MatchHistoryAggregateArgs>(args: Subset<T, MatchHistoryAggregateArgs>): Prisma.PrismaPromise<GetMatchHistoryAggregateType<T>>

    /**
     * Group by MatchHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MatchHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MatchHistoryGroupByArgs['orderBy'] }
        : { orderBy?: MatchHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MatchHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMatchHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for MatchHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MatchHistoryClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    player1Ref<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    player2Ref<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    winnerRef<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * MatchHistory base type for findUnique actions
   */
  export type MatchHistoryFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the MatchHistory
     */
    select?: MatchHistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchHistoryInclude | null
    /**
     * Filter, which MatchHistory to fetch.
     */
    where: MatchHistoryWhereUniqueInput
  }

  /**
   * MatchHistory findUnique
   */
  export interface MatchHistoryFindUniqueArgs extends MatchHistoryFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * MatchHistory findUniqueOrThrow
   */
  export type MatchHistoryFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the MatchHistory
     */
    select?: MatchHistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchHistoryInclude | null
    /**
     * Filter, which MatchHistory to fetch.
     */
    where: MatchHistoryWhereUniqueInput
  }


  /**
   * MatchHistory base type for findFirst actions
   */
  export type MatchHistoryFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the MatchHistory
     */
    select?: MatchHistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchHistoryInclude | null
    /**
     * Filter, which MatchHistory to fetch.
     */
    where?: MatchHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchHistories to fetch.
     */
    orderBy?: Enumerable<MatchHistoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MatchHistories.
     */
    cursor?: MatchHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MatchHistories.
     */
    distinct?: Enumerable<MatchHistoryScalarFieldEnum>
  }

  /**
   * MatchHistory findFirst
   */
  export interface MatchHistoryFindFirstArgs extends MatchHistoryFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * MatchHistory findFirstOrThrow
   */
  export type MatchHistoryFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the MatchHistory
     */
    select?: MatchHistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchHistoryInclude | null
    /**
     * Filter, which MatchHistory to fetch.
     */
    where?: MatchHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchHistories to fetch.
     */
    orderBy?: Enumerable<MatchHistoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MatchHistories.
     */
    cursor?: MatchHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MatchHistories.
     */
    distinct?: Enumerable<MatchHistoryScalarFieldEnum>
  }


  /**
   * MatchHistory findMany
   */
  export type MatchHistoryFindManyArgs = {
    /**
     * Select specific fields to fetch from the MatchHistory
     */
    select?: MatchHistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchHistoryInclude | null
    /**
     * Filter, which MatchHistories to fetch.
     */
    where?: MatchHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchHistories to fetch.
     */
    orderBy?: Enumerable<MatchHistoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MatchHistories.
     */
    cursor?: MatchHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchHistories.
     */
    skip?: number
    distinct?: Enumerable<MatchHistoryScalarFieldEnum>
  }


  /**
   * MatchHistory create
   */
  export type MatchHistoryCreateArgs = {
    /**
     * Select specific fields to fetch from the MatchHistory
     */
    select?: MatchHistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchHistoryInclude | null
    /**
     * The data needed to create a MatchHistory.
     */
    data: XOR<MatchHistoryCreateInput, MatchHistoryUncheckedCreateInput>
  }


  /**
   * MatchHistory createMany
   */
  export type MatchHistoryCreateManyArgs = {
    /**
     * The data used to create many MatchHistories.
     */
    data: Enumerable<MatchHistoryCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * MatchHistory update
   */
  export type MatchHistoryUpdateArgs = {
    /**
     * Select specific fields to fetch from the MatchHistory
     */
    select?: MatchHistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchHistoryInclude | null
    /**
     * The data needed to update a MatchHistory.
     */
    data: XOR<MatchHistoryUpdateInput, MatchHistoryUncheckedUpdateInput>
    /**
     * Choose, which MatchHistory to update.
     */
    where: MatchHistoryWhereUniqueInput
  }


  /**
   * MatchHistory updateMany
   */
  export type MatchHistoryUpdateManyArgs = {
    /**
     * The data used to update MatchHistories.
     */
    data: XOR<MatchHistoryUpdateManyMutationInput, MatchHistoryUncheckedUpdateManyInput>
    /**
     * Filter which MatchHistories to update
     */
    where?: MatchHistoryWhereInput
  }


  /**
   * MatchHistory upsert
   */
  export type MatchHistoryUpsertArgs = {
    /**
     * Select specific fields to fetch from the MatchHistory
     */
    select?: MatchHistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchHistoryInclude | null
    /**
     * The filter to search for the MatchHistory to update in case it exists.
     */
    where: MatchHistoryWhereUniqueInput
    /**
     * In case the MatchHistory found by the `where` argument doesn't exist, create a new MatchHistory with this data.
     */
    create: XOR<MatchHistoryCreateInput, MatchHistoryUncheckedCreateInput>
    /**
     * In case the MatchHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MatchHistoryUpdateInput, MatchHistoryUncheckedUpdateInput>
  }


  /**
   * MatchHistory delete
   */
  export type MatchHistoryDeleteArgs = {
    /**
     * Select specific fields to fetch from the MatchHistory
     */
    select?: MatchHistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchHistoryInclude | null
    /**
     * Filter which MatchHistory to delete.
     */
    where: MatchHistoryWhereUniqueInput
  }


  /**
   * MatchHistory deleteMany
   */
  export type MatchHistoryDeleteManyArgs = {
    /**
     * Filter which MatchHistories to delete
     */
    where?: MatchHistoryWhereInput
  }


  /**
   * MatchHistory without action
   */
  export type MatchHistoryArgs = {
    /**
     * Select specific fields to fetch from the MatchHistory
     */
    select?: MatchHistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchHistoryInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const BlockedScalarFieldEnum: {
    blocker: 'blocker',
    blockee: 'blockee'
  };

  export type BlockedScalarFieldEnum = (typeof BlockedScalarFieldEnum)[keyof typeof BlockedScalarFieldEnum]


  export const ChanBanScalarFieldEnum: {
    chanId: 'chanId',
    bannedUser: 'bannedUser'
  };

  export type ChanBanScalarFieldEnum = (typeof ChanBanScalarFieldEnum)[keyof typeof ChanBanScalarFieldEnum]


  export const ChanMemberScalarFieldEnum: {
    chanId: 'chanId',
    member: 'member',
    isAdmin: 'isAdmin',
    muteTime: 'muteTime'
  };

  export type ChanMemberScalarFieldEnum = (typeof ChanMemberScalarFieldEnum)[keyof typeof ChanMemberScalarFieldEnum]


  export const ChanMessageScalarFieldEnum: {
    sender: 'sender',
    chanId: 'chanId',
    timeSent: 'timeSent',
    content: 'content'
  };

  export type ChanMessageScalarFieldEnum = (typeof ChanMessageScalarFieldEnum)[keyof typeof ChanMessageScalarFieldEnum]


  export const ChannelScalarFieldEnum: {
    id: 'id',
    name: 'name',
    owner: 'owner',
    type: 'type',
    passwd: 'passwd'
  };

  export type ChannelScalarFieldEnum = (typeof ChannelScalarFieldEnum)[keyof typeof ChannelScalarFieldEnum]


  export const FriendScalarFieldEnum: {
    requester: 'requester',
    requestee: 'requestee',
    status: 'status'
  };

  export type FriendScalarFieldEnum = (typeof FriendScalarFieldEnum)[keyof typeof FriendScalarFieldEnum]


  export const MatchHistoryScalarFieldEnum: {
    id: 'id',
    player1: 'player1',
    player2: 'player2',
    timeStart: 'timeStart',
    timeEnd: 'timeEnd',
    winner: 'winner'
  };

  export type MatchHistoryScalarFieldEnum = (typeof MatchHistoryScalarFieldEnum)[keyof typeof MatchHistoryScalarFieldEnum]


  export const PrivMessageScalarFieldEnum: {
    sender: 'sender',
    recipient: 'recipient',
    timeSent: 'timeSent',
    content: 'content'
  };

  export type PrivMessageScalarFieldEnum = (typeof PrivMessageScalarFieldEnum)[keyof typeof PrivMessageScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    login: 'login',
    nickname: 'nickname',
    avatarURL: 'avatarURL'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    login?: StringNullableFilter | string | null
    nickname?: StringFilter | string
    avatarURL?: StringFilter | string
    requester?: FriendListRelationFilter
    requestee?: FriendListRelationFilter
    blocker?: BlockedListRelationFilter
    blockee?: BlockedListRelationFilter
    owner?: ChannelListRelationFilter
    member?: ChanMemberListRelationFilter
    banned?: ChanBanListRelationFilter
    chanSender?: ChanMessageListRelationFilter
    privSender?: PrivMessageListRelationFilter
    privReceipt?: PrivMessageListRelationFilter
    player1?: MatchHistoryListRelationFilter
    player2?: MatchHistoryListRelationFilter
    winner?: MatchHistoryListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    login?: SortOrder
    nickname?: SortOrder
    avatarURL?: SortOrder
    requester?: FriendOrderByRelationAggregateInput
    requestee?: FriendOrderByRelationAggregateInput
    blocker?: BlockedOrderByRelationAggregateInput
    blockee?: BlockedOrderByRelationAggregateInput
    owner?: ChannelOrderByRelationAggregateInput
    member?: ChanMemberOrderByRelationAggregateInput
    banned?: ChanBanOrderByRelationAggregateInput
    chanSender?: ChanMessageOrderByRelationAggregateInput
    privSender?: PrivMessageOrderByRelationAggregateInput
    privReceipt?: PrivMessageOrderByRelationAggregateInput
    player1?: MatchHistoryOrderByRelationAggregateInput
    player2?: MatchHistoryOrderByRelationAggregateInput
    winner?: MatchHistoryOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: number
    login?: string
    nickname?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    login?: SortOrder
    nickname?: SortOrder
    avatarURL?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    login?: StringNullableWithAggregatesFilter | string | null
    nickname?: StringWithAggregatesFilter | string
    avatarURL?: StringWithAggregatesFilter | string
  }

  export type FriendWhereInput = {
    AND?: Enumerable<FriendWhereInput>
    OR?: Enumerable<FriendWhereInput>
    NOT?: Enumerable<FriendWhereInput>
    requester?: IntFilter | number
    requestee?: IntFilter | number
    status?: BoolFilter | boolean
    requesterRef?: XOR<UserRelationFilter, UserWhereInput>
    requesteeRef?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type FriendOrderByWithRelationInput = {
    requester?: SortOrder
    requestee?: SortOrder
    status?: SortOrder
    requesterRef?: UserOrderByWithRelationInput
    requesteeRef?: UserOrderByWithRelationInput
  }

  export type FriendWhereUniqueInput = {
    requester_requestee?: FriendRequesterRequesteeCompoundUniqueInput
  }

  export type FriendOrderByWithAggregationInput = {
    requester?: SortOrder
    requestee?: SortOrder
    status?: SortOrder
    _count?: FriendCountOrderByAggregateInput
    _avg?: FriendAvgOrderByAggregateInput
    _max?: FriendMaxOrderByAggregateInput
    _min?: FriendMinOrderByAggregateInput
    _sum?: FriendSumOrderByAggregateInput
  }

  export type FriendScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FriendScalarWhereWithAggregatesInput>
    OR?: Enumerable<FriendScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FriendScalarWhereWithAggregatesInput>
    requester?: IntWithAggregatesFilter | number
    requestee?: IntWithAggregatesFilter | number
    status?: BoolWithAggregatesFilter | boolean
  }

  export type BlockedWhereInput = {
    AND?: Enumerable<BlockedWhereInput>
    OR?: Enumerable<BlockedWhereInput>
    NOT?: Enumerable<BlockedWhereInput>
    blocker?: IntFilter | number
    blockee?: IntFilter | number
    blockerRef?: XOR<UserRelationFilter, UserWhereInput>
    blockeeRef?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type BlockedOrderByWithRelationInput = {
    blocker?: SortOrder
    blockee?: SortOrder
    blockerRef?: UserOrderByWithRelationInput
    blockeeRef?: UserOrderByWithRelationInput
  }

  export type BlockedWhereUniqueInput = {
    blocker_blockee?: BlockedBlockerBlockeeCompoundUniqueInput
  }

  export type BlockedOrderByWithAggregationInput = {
    blocker?: SortOrder
    blockee?: SortOrder
    _count?: BlockedCountOrderByAggregateInput
    _avg?: BlockedAvgOrderByAggregateInput
    _max?: BlockedMaxOrderByAggregateInput
    _min?: BlockedMinOrderByAggregateInput
    _sum?: BlockedSumOrderByAggregateInput
  }

  export type BlockedScalarWhereWithAggregatesInput = {
    AND?: Enumerable<BlockedScalarWhereWithAggregatesInput>
    OR?: Enumerable<BlockedScalarWhereWithAggregatesInput>
    NOT?: Enumerable<BlockedScalarWhereWithAggregatesInput>
    blocker?: IntWithAggregatesFilter | number
    blockee?: IntWithAggregatesFilter | number
  }

  export type ChannelWhereInput = {
    AND?: Enumerable<ChannelWhereInput>
    OR?: Enumerable<ChannelWhereInput>
    NOT?: Enumerable<ChannelWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    owner?: IntFilter | number
    type?: EnumChanTypeFilter | ChanType
    passwd?: StringNullableFilter | string | null
    ownerRef?: XOR<UserRelationFilter, UserWhereInput>
    memChan?: ChanMemberListRelationFilter
    banChan?: ChanBanListRelationFilter
    messChan?: ChanMessageListRelationFilter
  }

  export type ChannelOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    owner?: SortOrder
    type?: SortOrder
    passwd?: SortOrder
    ownerRef?: UserOrderByWithRelationInput
    memChan?: ChanMemberOrderByRelationAggregateInput
    banChan?: ChanBanOrderByRelationAggregateInput
    messChan?: ChanMessageOrderByRelationAggregateInput
  }

  export type ChannelWhereUniqueInput = {
    id?: number
    name?: string
  }

  export type ChannelOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    owner?: SortOrder
    type?: SortOrder
    passwd?: SortOrder
    _count?: ChannelCountOrderByAggregateInput
    _avg?: ChannelAvgOrderByAggregateInput
    _max?: ChannelMaxOrderByAggregateInput
    _min?: ChannelMinOrderByAggregateInput
    _sum?: ChannelSumOrderByAggregateInput
  }

  export type ChannelScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ChannelScalarWhereWithAggregatesInput>
    OR?: Enumerable<ChannelScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ChannelScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    owner?: IntWithAggregatesFilter | number
    type?: EnumChanTypeWithAggregatesFilter | ChanType
    passwd?: StringNullableWithAggregatesFilter | string | null
  }

  export type ChanMemberWhereInput = {
    AND?: Enumerable<ChanMemberWhereInput>
    OR?: Enumerable<ChanMemberWhereInput>
    NOT?: Enumerable<ChanMemberWhereInput>
    chanId?: IntFilter | number
    member?: IntFilter | number
    isAdmin?: BoolFilter | boolean
    muteTime?: DateTimeFilter | Date | string
    chanRef?: XOR<ChannelRelationFilter, ChannelWhereInput>
    memberRef?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ChanMemberOrderByWithRelationInput = {
    chanId?: SortOrder
    member?: SortOrder
    isAdmin?: SortOrder
    muteTime?: SortOrder
    chanRef?: ChannelOrderByWithRelationInput
    memberRef?: UserOrderByWithRelationInput
  }

  export type ChanMemberWhereUniqueInput = {
    chanId_member?: ChanMemberChanIdMemberCompoundUniqueInput
  }

  export type ChanMemberOrderByWithAggregationInput = {
    chanId?: SortOrder
    member?: SortOrder
    isAdmin?: SortOrder
    muteTime?: SortOrder
    _count?: ChanMemberCountOrderByAggregateInput
    _avg?: ChanMemberAvgOrderByAggregateInput
    _max?: ChanMemberMaxOrderByAggregateInput
    _min?: ChanMemberMinOrderByAggregateInput
    _sum?: ChanMemberSumOrderByAggregateInput
  }

  export type ChanMemberScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ChanMemberScalarWhereWithAggregatesInput>
    OR?: Enumerable<ChanMemberScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ChanMemberScalarWhereWithAggregatesInput>
    chanId?: IntWithAggregatesFilter | number
    member?: IntWithAggregatesFilter | number
    isAdmin?: BoolWithAggregatesFilter | boolean
    muteTime?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ChanBanWhereInput = {
    AND?: Enumerable<ChanBanWhereInput>
    OR?: Enumerable<ChanBanWhereInput>
    NOT?: Enumerable<ChanBanWhereInput>
    chanId?: IntFilter | number
    bannedUser?: IntFilter | number
    chanRef?: XOR<ChannelRelationFilter, ChannelWhereInput>
    bannedRef?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ChanBanOrderByWithRelationInput = {
    chanId?: SortOrder
    bannedUser?: SortOrder
    chanRef?: ChannelOrderByWithRelationInput
    bannedRef?: UserOrderByWithRelationInput
  }

  export type ChanBanWhereUniqueInput = {
    chanId_bannedUser?: ChanBanChanIdBannedUserCompoundUniqueInput
  }

  export type ChanBanOrderByWithAggregationInput = {
    chanId?: SortOrder
    bannedUser?: SortOrder
    _count?: ChanBanCountOrderByAggregateInput
    _avg?: ChanBanAvgOrderByAggregateInput
    _max?: ChanBanMaxOrderByAggregateInput
    _min?: ChanBanMinOrderByAggregateInput
    _sum?: ChanBanSumOrderByAggregateInput
  }

  export type ChanBanScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ChanBanScalarWhereWithAggregatesInput>
    OR?: Enumerable<ChanBanScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ChanBanScalarWhereWithAggregatesInput>
    chanId?: IntWithAggregatesFilter | number
    bannedUser?: IntWithAggregatesFilter | number
  }

  export type ChanMessageWhereInput = {
    AND?: Enumerable<ChanMessageWhereInput>
    OR?: Enumerable<ChanMessageWhereInput>
    NOT?: Enumerable<ChanMessageWhereInput>
    sender?: IntFilter | number
    chanId?: IntFilter | number
    timeSent?: DateTimeFilter | Date | string
    content?: StringFilter | string
    senderRef?: XOR<UserRelationFilter, UserWhereInput>
    chanRef?: XOR<ChannelRelationFilter, ChannelWhereInput>
  }

  export type ChanMessageOrderByWithRelationInput = {
    sender?: SortOrder
    chanId?: SortOrder
    timeSent?: SortOrder
    content?: SortOrder
    senderRef?: UserOrderByWithRelationInput
    chanRef?: ChannelOrderByWithRelationInput
  }

  export type ChanMessageWhereUniqueInput = {
    sender_chanId_timeSent?: ChanMessageSenderChanIdTimeSentCompoundUniqueInput
  }

  export type ChanMessageOrderByWithAggregationInput = {
    sender?: SortOrder
    chanId?: SortOrder
    timeSent?: SortOrder
    content?: SortOrder
    _count?: ChanMessageCountOrderByAggregateInput
    _avg?: ChanMessageAvgOrderByAggregateInput
    _max?: ChanMessageMaxOrderByAggregateInput
    _min?: ChanMessageMinOrderByAggregateInput
    _sum?: ChanMessageSumOrderByAggregateInput
  }

  export type ChanMessageScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ChanMessageScalarWhereWithAggregatesInput>
    OR?: Enumerable<ChanMessageScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ChanMessageScalarWhereWithAggregatesInput>
    sender?: IntWithAggregatesFilter | number
    chanId?: IntWithAggregatesFilter | number
    timeSent?: DateTimeWithAggregatesFilter | Date | string
    content?: StringWithAggregatesFilter | string
  }

  export type PrivMessageWhereInput = {
    AND?: Enumerable<PrivMessageWhereInput>
    OR?: Enumerable<PrivMessageWhereInput>
    NOT?: Enumerable<PrivMessageWhereInput>
    sender?: IntFilter | number
    recipient?: IntFilter | number
    timeSent?: DateTimeFilter | Date | string
    content?: StringFilter | string
    senderRef?: XOR<UserRelationFilter, UserWhereInput>
    receiptRef?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type PrivMessageOrderByWithRelationInput = {
    sender?: SortOrder
    recipient?: SortOrder
    timeSent?: SortOrder
    content?: SortOrder
    senderRef?: UserOrderByWithRelationInput
    receiptRef?: UserOrderByWithRelationInput
  }

  export type PrivMessageWhereUniqueInput = {
    sender_recipient_timeSent?: PrivMessageSenderRecipientTimeSentCompoundUniqueInput
  }

  export type PrivMessageOrderByWithAggregationInput = {
    sender?: SortOrder
    recipient?: SortOrder
    timeSent?: SortOrder
    content?: SortOrder
    _count?: PrivMessageCountOrderByAggregateInput
    _avg?: PrivMessageAvgOrderByAggregateInput
    _max?: PrivMessageMaxOrderByAggregateInput
    _min?: PrivMessageMinOrderByAggregateInput
    _sum?: PrivMessageSumOrderByAggregateInput
  }

  export type PrivMessageScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PrivMessageScalarWhereWithAggregatesInput>
    OR?: Enumerable<PrivMessageScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PrivMessageScalarWhereWithAggregatesInput>
    sender?: IntWithAggregatesFilter | number
    recipient?: IntWithAggregatesFilter | number
    timeSent?: DateTimeWithAggregatesFilter | Date | string
    content?: StringWithAggregatesFilter | string
  }

  export type MatchHistoryWhereInput = {
    AND?: Enumerable<MatchHistoryWhereInput>
    OR?: Enumerable<MatchHistoryWhereInput>
    NOT?: Enumerable<MatchHistoryWhereInput>
    id?: IntFilter | number
    player1?: IntFilter | number
    player2?: IntFilter | number
    timeStart?: DateTimeFilter | Date | string
    timeEnd?: DateTimeNullableFilter | Date | string | null
    winner?: IntNullableFilter | number | null
    player1Ref?: XOR<UserRelationFilter, UserWhereInput>
    player2Ref?: XOR<UserRelationFilter, UserWhereInput>
    winnerRef?: XOR<UserRelationFilter, UserWhereInput> | null
  }

  export type MatchHistoryOrderByWithRelationInput = {
    id?: SortOrder
    player1?: SortOrder
    player2?: SortOrder
    timeStart?: SortOrder
    timeEnd?: SortOrder
    winner?: SortOrder
    player1Ref?: UserOrderByWithRelationInput
    player2Ref?: UserOrderByWithRelationInput
    winnerRef?: UserOrderByWithRelationInput
  }

  export type MatchHistoryWhereUniqueInput = {
    id?: number
  }

  export type MatchHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    player1?: SortOrder
    player2?: SortOrder
    timeStart?: SortOrder
    timeEnd?: SortOrder
    winner?: SortOrder
    _count?: MatchHistoryCountOrderByAggregateInput
    _avg?: MatchHistoryAvgOrderByAggregateInput
    _max?: MatchHistoryMaxOrderByAggregateInput
    _min?: MatchHistoryMinOrderByAggregateInput
    _sum?: MatchHistorySumOrderByAggregateInput
  }

  export type MatchHistoryScalarWhereWithAggregatesInput = {
    AND?: Enumerable<MatchHistoryScalarWhereWithAggregatesInput>
    OR?: Enumerable<MatchHistoryScalarWhereWithAggregatesInput>
    NOT?: Enumerable<MatchHistoryScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    player1?: IntWithAggregatesFilter | number
    player2?: IntWithAggregatesFilter | number
    timeStart?: DateTimeWithAggregatesFilter | Date | string
    timeEnd?: DateTimeNullableWithAggregatesFilter | Date | string | null
    winner?: IntNullableWithAggregatesFilter | number | null
  }

  export type UserCreateInput = {
    login?: string | null
    nickname: string
    avatarURL: string
    requester?: FriendCreateNestedManyWithoutRequesterRefInput
    requestee?: FriendCreateNestedManyWithoutRequesteeRefInput
    blocker?: BlockedCreateNestedManyWithoutBlockerRefInput
    blockee?: BlockedCreateNestedManyWithoutBlockeeRefInput
    owner?: ChannelCreateNestedManyWithoutOwnerRefInput
    member?: ChanMemberCreateNestedManyWithoutMemberRefInput
    banned?: ChanBanCreateNestedManyWithoutBannedRefInput
    chanSender?: ChanMessageCreateNestedManyWithoutSenderRefInput
    privSender?: PrivMessageCreateNestedManyWithoutSenderRefInput
    privReceipt?: PrivMessageCreateNestedManyWithoutReceiptRefInput
    player1?: MatchHistoryCreateNestedManyWithoutPlayer1RefInput
    player2?: MatchHistoryCreateNestedManyWithoutPlayer2RefInput
    winner?: MatchHistoryCreateNestedManyWithoutWinnerRefInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    login?: string | null
    nickname: string
    avatarURL: string
    requester?: FriendUncheckedCreateNestedManyWithoutRequesterRefInput
    requestee?: FriendUncheckedCreateNestedManyWithoutRequesteeRefInput
    blocker?: BlockedUncheckedCreateNestedManyWithoutBlockerRefInput
    blockee?: BlockedUncheckedCreateNestedManyWithoutBlockeeRefInput
    owner?: ChannelUncheckedCreateNestedManyWithoutOwnerRefInput
    member?: ChanMemberUncheckedCreateNestedManyWithoutMemberRefInput
    banned?: ChanBanUncheckedCreateNestedManyWithoutBannedRefInput
    chanSender?: ChanMessageUncheckedCreateNestedManyWithoutSenderRefInput
    privSender?: PrivMessageUncheckedCreateNestedManyWithoutSenderRefInput
    privReceipt?: PrivMessageUncheckedCreateNestedManyWithoutReceiptRefInput
    player1?: MatchHistoryUncheckedCreateNestedManyWithoutPlayer1RefInput
    player2?: MatchHistoryUncheckedCreateNestedManyWithoutPlayer2RefInput
    winner?: MatchHistoryUncheckedCreateNestedManyWithoutWinnerRefInput
  }

  export type UserUpdateInput = {
    login?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatarURL?: StringFieldUpdateOperationsInput | string
    requester?: FriendUpdateManyWithoutRequesterRefNestedInput
    requestee?: FriendUpdateManyWithoutRequesteeRefNestedInput
    blocker?: BlockedUpdateManyWithoutBlockerRefNestedInput
    blockee?: BlockedUpdateManyWithoutBlockeeRefNestedInput
    owner?: ChannelUpdateManyWithoutOwnerRefNestedInput
    member?: ChanMemberUpdateManyWithoutMemberRefNestedInput
    banned?: ChanBanUpdateManyWithoutBannedRefNestedInput
    chanSender?: ChanMessageUpdateManyWithoutSenderRefNestedInput
    privSender?: PrivMessageUpdateManyWithoutSenderRefNestedInput
    privReceipt?: PrivMessageUpdateManyWithoutReceiptRefNestedInput
    player1?: MatchHistoryUpdateManyWithoutPlayer1RefNestedInput
    player2?: MatchHistoryUpdateManyWithoutPlayer2RefNestedInput
    winner?: MatchHistoryUpdateManyWithoutWinnerRefNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    login?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatarURL?: StringFieldUpdateOperationsInput | string
    requester?: FriendUncheckedUpdateManyWithoutRequesterRefNestedInput
    requestee?: FriendUncheckedUpdateManyWithoutRequesteeRefNestedInput
    blocker?: BlockedUncheckedUpdateManyWithoutBlockerRefNestedInput
    blockee?: BlockedUncheckedUpdateManyWithoutBlockeeRefNestedInput
    owner?: ChannelUncheckedUpdateManyWithoutOwnerRefNestedInput
    member?: ChanMemberUncheckedUpdateManyWithoutMemberRefNestedInput
    banned?: ChanBanUncheckedUpdateManyWithoutBannedRefNestedInput
    chanSender?: ChanMessageUncheckedUpdateManyWithoutSenderRefNestedInput
    privSender?: PrivMessageUncheckedUpdateManyWithoutSenderRefNestedInput
    privReceipt?: PrivMessageUncheckedUpdateManyWithoutReceiptRefNestedInput
    player1?: MatchHistoryUncheckedUpdateManyWithoutPlayer1RefNestedInput
    player2?: MatchHistoryUncheckedUpdateManyWithoutPlayer2RefNestedInput
    winner?: MatchHistoryUncheckedUpdateManyWithoutWinnerRefNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    login?: string | null
    nickname: string
    avatarURL: string
  }

  export type UserUpdateManyMutationInput = {
    login?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatarURL?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    login?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatarURL?: StringFieldUpdateOperationsInput | string
  }

  export type FriendCreateInput = {
    status?: boolean
    requesterRef: UserCreateNestedOneWithoutRequesterInput
    requesteeRef: UserCreateNestedOneWithoutRequesteeInput
  }

  export type FriendUncheckedCreateInput = {
    requester: number
    requestee: number
    status?: boolean
  }

  export type FriendUpdateInput = {
    status?: BoolFieldUpdateOperationsInput | boolean
    requesterRef?: UserUpdateOneRequiredWithoutRequesterNestedInput
    requesteeRef?: UserUpdateOneRequiredWithoutRequesteeNestedInput
  }

  export type FriendUncheckedUpdateInput = {
    requester?: IntFieldUpdateOperationsInput | number
    requestee?: IntFieldUpdateOperationsInput | number
    status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FriendCreateManyInput = {
    requester: number
    requestee: number
    status?: boolean
  }

  export type FriendUpdateManyMutationInput = {
    status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FriendUncheckedUpdateManyInput = {
    requester?: IntFieldUpdateOperationsInput | number
    requestee?: IntFieldUpdateOperationsInput | number
    status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type BlockedCreateInput = {
    blockerRef: UserCreateNestedOneWithoutBlockerInput
    blockeeRef: UserCreateNestedOneWithoutBlockeeInput
  }

  export type BlockedUncheckedCreateInput = {
    blocker: number
    blockee: number
  }

  export type BlockedUpdateInput = {
    blockerRef?: UserUpdateOneRequiredWithoutBlockerNestedInput
    blockeeRef?: UserUpdateOneRequiredWithoutBlockeeNestedInput
  }

  export type BlockedUncheckedUpdateInput = {
    blocker?: IntFieldUpdateOperationsInput | number
    blockee?: IntFieldUpdateOperationsInput | number
  }

  export type BlockedCreateManyInput = {
    blocker: number
    blockee: number
  }

  export type BlockedUpdateManyMutationInput = {

  }

  export type BlockedUncheckedUpdateManyInput = {
    blocker?: IntFieldUpdateOperationsInput | number
    blockee?: IntFieldUpdateOperationsInput | number
  }

  export type ChannelCreateInput = {
    name: string
    type?: ChanType
    passwd?: string | null
    ownerRef: UserCreateNestedOneWithoutOwnerInput
    memChan?: ChanMemberCreateNestedManyWithoutChanRefInput
    banChan?: ChanBanCreateNestedManyWithoutChanRefInput
    messChan?: ChanMessageCreateNestedManyWithoutChanRefInput
  }

  export type ChannelUncheckedCreateInput = {
    id?: number
    name: string
    owner: number
    type?: ChanType
    passwd?: string | null
    memChan?: ChanMemberUncheckedCreateNestedManyWithoutChanRefInput
    banChan?: ChanBanUncheckedCreateNestedManyWithoutChanRefInput
    messChan?: ChanMessageUncheckedCreateNestedManyWithoutChanRefInput
  }

  export type ChannelUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumChanTypeFieldUpdateOperationsInput | ChanType
    passwd?: NullableStringFieldUpdateOperationsInput | string | null
    ownerRef?: UserUpdateOneRequiredWithoutOwnerNestedInput
    memChan?: ChanMemberUpdateManyWithoutChanRefNestedInput
    banChan?: ChanBanUpdateManyWithoutChanRefNestedInput
    messChan?: ChanMessageUpdateManyWithoutChanRefNestedInput
  }

  export type ChannelUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    owner?: IntFieldUpdateOperationsInput | number
    type?: EnumChanTypeFieldUpdateOperationsInput | ChanType
    passwd?: NullableStringFieldUpdateOperationsInput | string | null
    memChan?: ChanMemberUncheckedUpdateManyWithoutChanRefNestedInput
    banChan?: ChanBanUncheckedUpdateManyWithoutChanRefNestedInput
    messChan?: ChanMessageUncheckedUpdateManyWithoutChanRefNestedInput
  }

  export type ChannelCreateManyInput = {
    id?: number
    name: string
    owner: number
    type?: ChanType
    passwd?: string | null
  }

  export type ChannelUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumChanTypeFieldUpdateOperationsInput | ChanType
    passwd?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChannelUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    owner?: IntFieldUpdateOperationsInput | number
    type?: EnumChanTypeFieldUpdateOperationsInput | ChanType
    passwd?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChanMemberCreateInput = {
    isAdmin?: boolean
    muteTime?: Date | string
    chanRef: ChannelCreateNestedOneWithoutMemChanInput
    memberRef: UserCreateNestedOneWithoutMemberInput
  }

  export type ChanMemberUncheckedCreateInput = {
    chanId: number
    member: number
    isAdmin?: boolean
    muteTime?: Date | string
  }

  export type ChanMemberUpdateInput = {
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    muteTime?: DateTimeFieldUpdateOperationsInput | Date | string
    chanRef?: ChannelUpdateOneRequiredWithoutMemChanNestedInput
    memberRef?: UserUpdateOneRequiredWithoutMemberNestedInput
  }

  export type ChanMemberUncheckedUpdateInput = {
    chanId?: IntFieldUpdateOperationsInput | number
    member?: IntFieldUpdateOperationsInput | number
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    muteTime?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChanMemberCreateManyInput = {
    chanId: number
    member: number
    isAdmin?: boolean
    muteTime?: Date | string
  }

  export type ChanMemberUpdateManyMutationInput = {
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    muteTime?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChanMemberUncheckedUpdateManyInput = {
    chanId?: IntFieldUpdateOperationsInput | number
    member?: IntFieldUpdateOperationsInput | number
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    muteTime?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChanBanCreateInput = {
    chanRef: ChannelCreateNestedOneWithoutBanChanInput
    bannedRef: UserCreateNestedOneWithoutBannedInput
  }

  export type ChanBanUncheckedCreateInput = {
    chanId: number
    bannedUser: number
  }

  export type ChanBanUpdateInput = {
    chanRef?: ChannelUpdateOneRequiredWithoutBanChanNestedInput
    bannedRef?: UserUpdateOneRequiredWithoutBannedNestedInput
  }

  export type ChanBanUncheckedUpdateInput = {
    chanId?: IntFieldUpdateOperationsInput | number
    bannedUser?: IntFieldUpdateOperationsInput | number
  }

  export type ChanBanCreateManyInput = {
    chanId: number
    bannedUser: number
  }

  export type ChanBanUpdateManyMutationInput = {

  }

  export type ChanBanUncheckedUpdateManyInput = {
    chanId?: IntFieldUpdateOperationsInput | number
    bannedUser?: IntFieldUpdateOperationsInput | number
  }

  export type ChanMessageCreateInput = {
    timeSent?: Date | string
    content: string
    senderRef: UserCreateNestedOneWithoutChanSenderInput
    chanRef: ChannelCreateNestedOneWithoutMessChanInput
  }

  export type ChanMessageUncheckedCreateInput = {
    sender: number
    chanId: number
    timeSent?: Date | string
    content: string
  }

  export type ChanMessageUpdateInput = {
    timeSent?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    senderRef?: UserUpdateOneRequiredWithoutChanSenderNestedInput
    chanRef?: ChannelUpdateOneRequiredWithoutMessChanNestedInput
  }

  export type ChanMessageUncheckedUpdateInput = {
    sender?: IntFieldUpdateOperationsInput | number
    chanId?: IntFieldUpdateOperationsInput | number
    timeSent?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type ChanMessageCreateManyInput = {
    sender: number
    chanId: number
    timeSent?: Date | string
    content: string
  }

  export type ChanMessageUpdateManyMutationInput = {
    timeSent?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type ChanMessageUncheckedUpdateManyInput = {
    sender?: IntFieldUpdateOperationsInput | number
    chanId?: IntFieldUpdateOperationsInput | number
    timeSent?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type PrivMessageCreateInput = {
    timeSent?: Date | string
    content: string
    senderRef: UserCreateNestedOneWithoutPrivSenderInput
    receiptRef: UserCreateNestedOneWithoutPrivReceiptInput
  }

  export type PrivMessageUncheckedCreateInput = {
    sender: number
    recipient: number
    timeSent?: Date | string
    content: string
  }

  export type PrivMessageUpdateInput = {
    timeSent?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    senderRef?: UserUpdateOneRequiredWithoutPrivSenderNestedInput
    receiptRef?: UserUpdateOneRequiredWithoutPrivReceiptNestedInput
  }

  export type PrivMessageUncheckedUpdateInput = {
    sender?: IntFieldUpdateOperationsInput | number
    recipient?: IntFieldUpdateOperationsInput | number
    timeSent?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type PrivMessageCreateManyInput = {
    sender: number
    recipient: number
    timeSent?: Date | string
    content: string
  }

  export type PrivMessageUpdateManyMutationInput = {
    timeSent?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type PrivMessageUncheckedUpdateManyInput = {
    sender?: IntFieldUpdateOperationsInput | number
    recipient?: IntFieldUpdateOperationsInput | number
    timeSent?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type MatchHistoryCreateInput = {
    id: number
    timeStart?: Date | string
    timeEnd?: Date | string | null
    player1Ref: UserCreateNestedOneWithoutPlayer1Input
    player2Ref: UserCreateNestedOneWithoutPlayer2Input
    winnerRef?: UserCreateNestedOneWithoutWinnerInput
  }

  export type MatchHistoryUncheckedCreateInput = {
    id: number
    player1: number
    player2: number
    timeStart?: Date | string
    timeEnd?: Date | string | null
    winner?: number | null
  }

  export type MatchHistoryUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    timeStart?: DateTimeFieldUpdateOperationsInput | Date | string
    timeEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    player1Ref?: UserUpdateOneRequiredWithoutPlayer1NestedInput
    player2Ref?: UserUpdateOneRequiredWithoutPlayer2NestedInput
    winnerRef?: UserUpdateOneWithoutWinnerNestedInput
  }

  export type MatchHistoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    player1?: IntFieldUpdateOperationsInput | number
    player2?: IntFieldUpdateOperationsInput | number
    timeStart?: DateTimeFieldUpdateOperationsInput | Date | string
    timeEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    winner?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type MatchHistoryCreateManyInput = {
    id: number
    player1: number
    player2: number
    timeStart?: Date | string
    timeEnd?: Date | string | null
    winner?: number | null
  }

  export type MatchHistoryUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    timeStart?: DateTimeFieldUpdateOperationsInput | Date | string
    timeEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MatchHistoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    player1?: IntFieldUpdateOperationsInput | number
    player2?: IntFieldUpdateOperationsInput | number
    timeStart?: DateTimeFieldUpdateOperationsInput | Date | string
    timeEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    winner?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type FriendListRelationFilter = {
    every?: FriendWhereInput
    some?: FriendWhereInput
    none?: FriendWhereInput
  }

  export type BlockedListRelationFilter = {
    every?: BlockedWhereInput
    some?: BlockedWhereInput
    none?: BlockedWhereInput
  }

  export type ChannelListRelationFilter = {
    every?: ChannelWhereInput
    some?: ChannelWhereInput
    none?: ChannelWhereInput
  }

  export type ChanMemberListRelationFilter = {
    every?: ChanMemberWhereInput
    some?: ChanMemberWhereInput
    none?: ChanMemberWhereInput
  }

  export type ChanBanListRelationFilter = {
    every?: ChanBanWhereInput
    some?: ChanBanWhereInput
    none?: ChanBanWhereInput
  }

  export type ChanMessageListRelationFilter = {
    every?: ChanMessageWhereInput
    some?: ChanMessageWhereInput
    none?: ChanMessageWhereInput
  }

  export type PrivMessageListRelationFilter = {
    every?: PrivMessageWhereInput
    some?: PrivMessageWhereInput
    none?: PrivMessageWhereInput
  }

  export type MatchHistoryListRelationFilter = {
    every?: MatchHistoryWhereInput
    some?: MatchHistoryWhereInput
    none?: MatchHistoryWhereInput
  }

  export type FriendOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BlockedOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChannelOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChanMemberOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChanBanOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChanMessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PrivMessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MatchHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    login?: SortOrder
    nickname?: SortOrder
    avatarURL?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    login?: SortOrder
    nickname?: SortOrder
    avatarURL?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    login?: SortOrder
    nickname?: SortOrder
    avatarURL?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type FriendRequesterRequesteeCompoundUniqueInput = {
    requester: number
    requestee: number
  }

  export type FriendCountOrderByAggregateInput = {
    requester?: SortOrder
    requestee?: SortOrder
    status?: SortOrder
  }

  export type FriendAvgOrderByAggregateInput = {
    requester?: SortOrder
    requestee?: SortOrder
  }

  export type FriendMaxOrderByAggregateInput = {
    requester?: SortOrder
    requestee?: SortOrder
    status?: SortOrder
  }

  export type FriendMinOrderByAggregateInput = {
    requester?: SortOrder
    requestee?: SortOrder
    status?: SortOrder
  }

  export type FriendSumOrderByAggregateInput = {
    requester?: SortOrder
    requestee?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type BlockedBlockerBlockeeCompoundUniqueInput = {
    blocker: number
    blockee: number
  }

  export type BlockedCountOrderByAggregateInput = {
    blocker?: SortOrder
    blockee?: SortOrder
  }

  export type BlockedAvgOrderByAggregateInput = {
    blocker?: SortOrder
    blockee?: SortOrder
  }

  export type BlockedMaxOrderByAggregateInput = {
    blocker?: SortOrder
    blockee?: SortOrder
  }

  export type BlockedMinOrderByAggregateInput = {
    blocker?: SortOrder
    blockee?: SortOrder
  }

  export type BlockedSumOrderByAggregateInput = {
    blocker?: SortOrder
    blockee?: SortOrder
  }

  export type EnumChanTypeFilter = {
    equals?: ChanType
    in?: Enumerable<ChanType>
    notIn?: Enumerable<ChanType>
    not?: NestedEnumChanTypeFilter | ChanType
  }

  export type ChannelCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    owner?: SortOrder
    type?: SortOrder
    passwd?: SortOrder
  }

  export type ChannelAvgOrderByAggregateInput = {
    id?: SortOrder
    owner?: SortOrder
  }

  export type ChannelMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    owner?: SortOrder
    type?: SortOrder
    passwd?: SortOrder
  }

  export type ChannelMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    owner?: SortOrder
    type?: SortOrder
    passwd?: SortOrder
  }

  export type ChannelSumOrderByAggregateInput = {
    id?: SortOrder
    owner?: SortOrder
  }

  export type EnumChanTypeWithAggregatesFilter = {
    equals?: ChanType
    in?: Enumerable<ChanType>
    notIn?: Enumerable<ChanType>
    not?: NestedEnumChanTypeWithAggregatesFilter | ChanType
    _count?: NestedIntFilter
    _min?: NestedEnumChanTypeFilter
    _max?: NestedEnumChanTypeFilter
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type ChannelRelationFilter = {
    is?: ChannelWhereInput
    isNot?: ChannelWhereInput
  }

  export type ChanMemberChanIdMemberCompoundUniqueInput = {
    chanId: number
    member: number
  }

  export type ChanMemberCountOrderByAggregateInput = {
    chanId?: SortOrder
    member?: SortOrder
    isAdmin?: SortOrder
    muteTime?: SortOrder
  }

  export type ChanMemberAvgOrderByAggregateInput = {
    chanId?: SortOrder
    member?: SortOrder
  }

  export type ChanMemberMaxOrderByAggregateInput = {
    chanId?: SortOrder
    member?: SortOrder
    isAdmin?: SortOrder
    muteTime?: SortOrder
  }

  export type ChanMemberMinOrderByAggregateInput = {
    chanId?: SortOrder
    member?: SortOrder
    isAdmin?: SortOrder
    muteTime?: SortOrder
  }

  export type ChanMemberSumOrderByAggregateInput = {
    chanId?: SortOrder
    member?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type ChanBanChanIdBannedUserCompoundUniqueInput = {
    chanId: number
    bannedUser: number
  }

  export type ChanBanCountOrderByAggregateInput = {
    chanId?: SortOrder
    bannedUser?: SortOrder
  }

  export type ChanBanAvgOrderByAggregateInput = {
    chanId?: SortOrder
    bannedUser?: SortOrder
  }

  export type ChanBanMaxOrderByAggregateInput = {
    chanId?: SortOrder
    bannedUser?: SortOrder
  }

  export type ChanBanMinOrderByAggregateInput = {
    chanId?: SortOrder
    bannedUser?: SortOrder
  }

  export type ChanBanSumOrderByAggregateInput = {
    chanId?: SortOrder
    bannedUser?: SortOrder
  }

  export type ChanMessageSenderChanIdTimeSentCompoundUniqueInput = {
    sender: number
    chanId: number
    timeSent: Date | string
  }

  export type ChanMessageCountOrderByAggregateInput = {
    sender?: SortOrder
    chanId?: SortOrder
    timeSent?: SortOrder
    content?: SortOrder
  }

  export type ChanMessageAvgOrderByAggregateInput = {
    sender?: SortOrder
    chanId?: SortOrder
  }

  export type ChanMessageMaxOrderByAggregateInput = {
    sender?: SortOrder
    chanId?: SortOrder
    timeSent?: SortOrder
    content?: SortOrder
  }

  export type ChanMessageMinOrderByAggregateInput = {
    sender?: SortOrder
    chanId?: SortOrder
    timeSent?: SortOrder
    content?: SortOrder
  }

  export type ChanMessageSumOrderByAggregateInput = {
    sender?: SortOrder
    chanId?: SortOrder
  }

  export type PrivMessageSenderRecipientTimeSentCompoundUniqueInput = {
    sender: number
    recipient: number
    timeSent: Date | string
  }

  export type PrivMessageCountOrderByAggregateInput = {
    sender?: SortOrder
    recipient?: SortOrder
    timeSent?: SortOrder
    content?: SortOrder
  }

  export type PrivMessageAvgOrderByAggregateInput = {
    sender?: SortOrder
    recipient?: SortOrder
  }

  export type PrivMessageMaxOrderByAggregateInput = {
    sender?: SortOrder
    recipient?: SortOrder
    timeSent?: SortOrder
    content?: SortOrder
  }

  export type PrivMessageMinOrderByAggregateInput = {
    sender?: SortOrder
    recipient?: SortOrder
    timeSent?: SortOrder
    content?: SortOrder
  }

  export type PrivMessageSumOrderByAggregateInput = {
    sender?: SortOrder
    recipient?: SortOrder
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type MatchHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    player1?: SortOrder
    player2?: SortOrder
    timeStart?: SortOrder
    timeEnd?: SortOrder
    winner?: SortOrder
  }

  export type MatchHistoryAvgOrderByAggregateInput = {
    id?: SortOrder
    player1?: SortOrder
    player2?: SortOrder
    winner?: SortOrder
  }

  export type MatchHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    player1?: SortOrder
    player2?: SortOrder
    timeStart?: SortOrder
    timeEnd?: SortOrder
    winner?: SortOrder
  }

  export type MatchHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    player1?: SortOrder
    player2?: SortOrder
    timeStart?: SortOrder
    timeEnd?: SortOrder
    winner?: SortOrder
  }

  export type MatchHistorySumOrderByAggregateInput = {
    id?: SortOrder
    player1?: SortOrder
    player2?: SortOrder
    winner?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type FriendCreateNestedManyWithoutRequesterRefInput = {
    create?: XOR<Enumerable<FriendCreateWithoutRequesterRefInput>, Enumerable<FriendUncheckedCreateWithoutRequesterRefInput>>
    connectOrCreate?: Enumerable<FriendCreateOrConnectWithoutRequesterRefInput>
    createMany?: FriendCreateManyRequesterRefInputEnvelope
    connect?: Enumerable<FriendWhereUniqueInput>
  }

  export type FriendCreateNestedManyWithoutRequesteeRefInput = {
    create?: XOR<Enumerable<FriendCreateWithoutRequesteeRefInput>, Enumerable<FriendUncheckedCreateWithoutRequesteeRefInput>>
    connectOrCreate?: Enumerable<FriendCreateOrConnectWithoutRequesteeRefInput>
    createMany?: FriendCreateManyRequesteeRefInputEnvelope
    connect?: Enumerable<FriendWhereUniqueInput>
  }

  export type BlockedCreateNestedManyWithoutBlockerRefInput = {
    create?: XOR<Enumerable<BlockedCreateWithoutBlockerRefInput>, Enumerable<BlockedUncheckedCreateWithoutBlockerRefInput>>
    connectOrCreate?: Enumerable<BlockedCreateOrConnectWithoutBlockerRefInput>
    createMany?: BlockedCreateManyBlockerRefInputEnvelope
    connect?: Enumerable<BlockedWhereUniqueInput>
  }

  export type BlockedCreateNestedManyWithoutBlockeeRefInput = {
    create?: XOR<Enumerable<BlockedCreateWithoutBlockeeRefInput>, Enumerable<BlockedUncheckedCreateWithoutBlockeeRefInput>>
    connectOrCreate?: Enumerable<BlockedCreateOrConnectWithoutBlockeeRefInput>
    createMany?: BlockedCreateManyBlockeeRefInputEnvelope
    connect?: Enumerable<BlockedWhereUniqueInput>
  }

  export type ChannelCreateNestedManyWithoutOwnerRefInput = {
    create?: XOR<Enumerable<ChannelCreateWithoutOwnerRefInput>, Enumerable<ChannelUncheckedCreateWithoutOwnerRefInput>>
    connectOrCreate?: Enumerable<ChannelCreateOrConnectWithoutOwnerRefInput>
    createMany?: ChannelCreateManyOwnerRefInputEnvelope
    connect?: Enumerable<ChannelWhereUniqueInput>
  }

  export type ChanMemberCreateNestedManyWithoutMemberRefInput = {
    create?: XOR<Enumerable<ChanMemberCreateWithoutMemberRefInput>, Enumerable<ChanMemberUncheckedCreateWithoutMemberRefInput>>
    connectOrCreate?: Enumerable<ChanMemberCreateOrConnectWithoutMemberRefInput>
    createMany?: ChanMemberCreateManyMemberRefInputEnvelope
    connect?: Enumerable<ChanMemberWhereUniqueInput>
  }

  export type ChanBanCreateNestedManyWithoutBannedRefInput = {
    create?: XOR<Enumerable<ChanBanCreateWithoutBannedRefInput>, Enumerable<ChanBanUncheckedCreateWithoutBannedRefInput>>
    connectOrCreate?: Enumerable<ChanBanCreateOrConnectWithoutBannedRefInput>
    createMany?: ChanBanCreateManyBannedRefInputEnvelope
    connect?: Enumerable<ChanBanWhereUniqueInput>
  }

  export type ChanMessageCreateNestedManyWithoutSenderRefInput = {
    create?: XOR<Enumerable<ChanMessageCreateWithoutSenderRefInput>, Enumerable<ChanMessageUncheckedCreateWithoutSenderRefInput>>
    connectOrCreate?: Enumerable<ChanMessageCreateOrConnectWithoutSenderRefInput>
    createMany?: ChanMessageCreateManySenderRefInputEnvelope
    connect?: Enumerable<ChanMessageWhereUniqueInput>
  }

  export type PrivMessageCreateNestedManyWithoutSenderRefInput = {
    create?: XOR<Enumerable<PrivMessageCreateWithoutSenderRefInput>, Enumerable<PrivMessageUncheckedCreateWithoutSenderRefInput>>
    connectOrCreate?: Enumerable<PrivMessageCreateOrConnectWithoutSenderRefInput>
    createMany?: PrivMessageCreateManySenderRefInputEnvelope
    connect?: Enumerable<PrivMessageWhereUniqueInput>
  }

  export type PrivMessageCreateNestedManyWithoutReceiptRefInput = {
    create?: XOR<Enumerable<PrivMessageCreateWithoutReceiptRefInput>, Enumerable<PrivMessageUncheckedCreateWithoutReceiptRefInput>>
    connectOrCreate?: Enumerable<PrivMessageCreateOrConnectWithoutReceiptRefInput>
    createMany?: PrivMessageCreateManyReceiptRefInputEnvelope
    connect?: Enumerable<PrivMessageWhereUniqueInput>
  }

  export type MatchHistoryCreateNestedManyWithoutPlayer1RefInput = {
    create?: XOR<Enumerable<MatchHistoryCreateWithoutPlayer1RefInput>, Enumerable<MatchHistoryUncheckedCreateWithoutPlayer1RefInput>>
    connectOrCreate?: Enumerable<MatchHistoryCreateOrConnectWithoutPlayer1RefInput>
    createMany?: MatchHistoryCreateManyPlayer1RefInputEnvelope
    connect?: Enumerable<MatchHistoryWhereUniqueInput>
  }

  export type MatchHistoryCreateNestedManyWithoutPlayer2RefInput = {
    create?: XOR<Enumerable<MatchHistoryCreateWithoutPlayer2RefInput>, Enumerable<MatchHistoryUncheckedCreateWithoutPlayer2RefInput>>
    connectOrCreate?: Enumerable<MatchHistoryCreateOrConnectWithoutPlayer2RefInput>
    createMany?: MatchHistoryCreateManyPlayer2RefInputEnvelope
    connect?: Enumerable<MatchHistoryWhereUniqueInput>
  }

  export type MatchHistoryCreateNestedManyWithoutWinnerRefInput = {
    create?: XOR<Enumerable<MatchHistoryCreateWithoutWinnerRefInput>, Enumerable<MatchHistoryUncheckedCreateWithoutWinnerRefInput>>
    connectOrCreate?: Enumerable<MatchHistoryCreateOrConnectWithoutWinnerRefInput>
    createMany?: MatchHistoryCreateManyWinnerRefInputEnvelope
    connect?: Enumerable<MatchHistoryWhereUniqueInput>
  }

  export type FriendUncheckedCreateNestedManyWithoutRequesterRefInput = {
    create?: XOR<Enumerable<FriendCreateWithoutRequesterRefInput>, Enumerable<FriendUncheckedCreateWithoutRequesterRefInput>>
    connectOrCreate?: Enumerable<FriendCreateOrConnectWithoutRequesterRefInput>
    createMany?: FriendCreateManyRequesterRefInputEnvelope
    connect?: Enumerable<FriendWhereUniqueInput>
  }

  export type FriendUncheckedCreateNestedManyWithoutRequesteeRefInput = {
    create?: XOR<Enumerable<FriendCreateWithoutRequesteeRefInput>, Enumerable<FriendUncheckedCreateWithoutRequesteeRefInput>>
    connectOrCreate?: Enumerable<FriendCreateOrConnectWithoutRequesteeRefInput>
    createMany?: FriendCreateManyRequesteeRefInputEnvelope
    connect?: Enumerable<FriendWhereUniqueInput>
  }

  export type BlockedUncheckedCreateNestedManyWithoutBlockerRefInput = {
    create?: XOR<Enumerable<BlockedCreateWithoutBlockerRefInput>, Enumerable<BlockedUncheckedCreateWithoutBlockerRefInput>>
    connectOrCreate?: Enumerable<BlockedCreateOrConnectWithoutBlockerRefInput>
    createMany?: BlockedCreateManyBlockerRefInputEnvelope
    connect?: Enumerable<BlockedWhereUniqueInput>
  }

  export type BlockedUncheckedCreateNestedManyWithoutBlockeeRefInput = {
    create?: XOR<Enumerable<BlockedCreateWithoutBlockeeRefInput>, Enumerable<BlockedUncheckedCreateWithoutBlockeeRefInput>>
    connectOrCreate?: Enumerable<BlockedCreateOrConnectWithoutBlockeeRefInput>
    createMany?: BlockedCreateManyBlockeeRefInputEnvelope
    connect?: Enumerable<BlockedWhereUniqueInput>
  }

  export type ChannelUncheckedCreateNestedManyWithoutOwnerRefInput = {
    create?: XOR<Enumerable<ChannelCreateWithoutOwnerRefInput>, Enumerable<ChannelUncheckedCreateWithoutOwnerRefInput>>
    connectOrCreate?: Enumerable<ChannelCreateOrConnectWithoutOwnerRefInput>
    createMany?: ChannelCreateManyOwnerRefInputEnvelope
    connect?: Enumerable<ChannelWhereUniqueInput>
  }

  export type ChanMemberUncheckedCreateNestedManyWithoutMemberRefInput = {
    create?: XOR<Enumerable<ChanMemberCreateWithoutMemberRefInput>, Enumerable<ChanMemberUncheckedCreateWithoutMemberRefInput>>
    connectOrCreate?: Enumerable<ChanMemberCreateOrConnectWithoutMemberRefInput>
    createMany?: ChanMemberCreateManyMemberRefInputEnvelope
    connect?: Enumerable<ChanMemberWhereUniqueInput>
  }

  export type ChanBanUncheckedCreateNestedManyWithoutBannedRefInput = {
    create?: XOR<Enumerable<ChanBanCreateWithoutBannedRefInput>, Enumerable<ChanBanUncheckedCreateWithoutBannedRefInput>>
    connectOrCreate?: Enumerable<ChanBanCreateOrConnectWithoutBannedRefInput>
    createMany?: ChanBanCreateManyBannedRefInputEnvelope
    connect?: Enumerable<ChanBanWhereUniqueInput>
  }

  export type ChanMessageUncheckedCreateNestedManyWithoutSenderRefInput = {
    create?: XOR<Enumerable<ChanMessageCreateWithoutSenderRefInput>, Enumerable<ChanMessageUncheckedCreateWithoutSenderRefInput>>
    connectOrCreate?: Enumerable<ChanMessageCreateOrConnectWithoutSenderRefInput>
    createMany?: ChanMessageCreateManySenderRefInputEnvelope
    connect?: Enumerable<ChanMessageWhereUniqueInput>
  }

  export type PrivMessageUncheckedCreateNestedManyWithoutSenderRefInput = {
    create?: XOR<Enumerable<PrivMessageCreateWithoutSenderRefInput>, Enumerable<PrivMessageUncheckedCreateWithoutSenderRefInput>>
    connectOrCreate?: Enumerable<PrivMessageCreateOrConnectWithoutSenderRefInput>
    createMany?: PrivMessageCreateManySenderRefInputEnvelope
    connect?: Enumerable<PrivMessageWhereUniqueInput>
  }

  export type PrivMessageUncheckedCreateNestedManyWithoutReceiptRefInput = {
    create?: XOR<Enumerable<PrivMessageCreateWithoutReceiptRefInput>, Enumerable<PrivMessageUncheckedCreateWithoutReceiptRefInput>>
    connectOrCreate?: Enumerable<PrivMessageCreateOrConnectWithoutReceiptRefInput>
    createMany?: PrivMessageCreateManyReceiptRefInputEnvelope
    connect?: Enumerable<PrivMessageWhereUniqueInput>
  }

  export type MatchHistoryUncheckedCreateNestedManyWithoutPlayer1RefInput = {
    create?: XOR<Enumerable<MatchHistoryCreateWithoutPlayer1RefInput>, Enumerable<MatchHistoryUncheckedCreateWithoutPlayer1RefInput>>
    connectOrCreate?: Enumerable<MatchHistoryCreateOrConnectWithoutPlayer1RefInput>
    createMany?: MatchHistoryCreateManyPlayer1RefInputEnvelope
    connect?: Enumerable<MatchHistoryWhereUniqueInput>
  }

  export type MatchHistoryUncheckedCreateNestedManyWithoutPlayer2RefInput = {
    create?: XOR<Enumerable<MatchHistoryCreateWithoutPlayer2RefInput>, Enumerable<MatchHistoryUncheckedCreateWithoutPlayer2RefInput>>
    connectOrCreate?: Enumerable<MatchHistoryCreateOrConnectWithoutPlayer2RefInput>
    createMany?: MatchHistoryCreateManyPlayer2RefInputEnvelope
    connect?: Enumerable<MatchHistoryWhereUniqueInput>
  }

  export type MatchHistoryUncheckedCreateNestedManyWithoutWinnerRefInput = {
    create?: XOR<Enumerable<MatchHistoryCreateWithoutWinnerRefInput>, Enumerable<MatchHistoryUncheckedCreateWithoutWinnerRefInput>>
    connectOrCreate?: Enumerable<MatchHistoryCreateOrConnectWithoutWinnerRefInput>
    createMany?: MatchHistoryCreateManyWinnerRefInputEnvelope
    connect?: Enumerable<MatchHistoryWhereUniqueInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type FriendUpdateManyWithoutRequesterRefNestedInput = {
    create?: XOR<Enumerable<FriendCreateWithoutRequesterRefInput>, Enumerable<FriendUncheckedCreateWithoutRequesterRefInput>>
    connectOrCreate?: Enumerable<FriendCreateOrConnectWithoutRequesterRefInput>
    upsert?: Enumerable<FriendUpsertWithWhereUniqueWithoutRequesterRefInput>
    createMany?: FriendCreateManyRequesterRefInputEnvelope
    set?: Enumerable<FriendWhereUniqueInput>
    disconnect?: Enumerable<FriendWhereUniqueInput>
    delete?: Enumerable<FriendWhereUniqueInput>
    connect?: Enumerable<FriendWhereUniqueInput>
    update?: Enumerable<FriendUpdateWithWhereUniqueWithoutRequesterRefInput>
    updateMany?: Enumerable<FriendUpdateManyWithWhereWithoutRequesterRefInput>
    deleteMany?: Enumerable<FriendScalarWhereInput>
  }

  export type FriendUpdateManyWithoutRequesteeRefNestedInput = {
    create?: XOR<Enumerable<FriendCreateWithoutRequesteeRefInput>, Enumerable<FriendUncheckedCreateWithoutRequesteeRefInput>>
    connectOrCreate?: Enumerable<FriendCreateOrConnectWithoutRequesteeRefInput>
    upsert?: Enumerable<FriendUpsertWithWhereUniqueWithoutRequesteeRefInput>
    createMany?: FriendCreateManyRequesteeRefInputEnvelope
    set?: Enumerable<FriendWhereUniqueInput>
    disconnect?: Enumerable<FriendWhereUniqueInput>
    delete?: Enumerable<FriendWhereUniqueInput>
    connect?: Enumerable<FriendWhereUniqueInput>
    update?: Enumerable<FriendUpdateWithWhereUniqueWithoutRequesteeRefInput>
    updateMany?: Enumerable<FriendUpdateManyWithWhereWithoutRequesteeRefInput>
    deleteMany?: Enumerable<FriendScalarWhereInput>
  }

  export type BlockedUpdateManyWithoutBlockerRefNestedInput = {
    create?: XOR<Enumerable<BlockedCreateWithoutBlockerRefInput>, Enumerable<BlockedUncheckedCreateWithoutBlockerRefInput>>
    connectOrCreate?: Enumerable<BlockedCreateOrConnectWithoutBlockerRefInput>
    upsert?: Enumerable<BlockedUpsertWithWhereUniqueWithoutBlockerRefInput>
    createMany?: BlockedCreateManyBlockerRefInputEnvelope
    set?: Enumerable<BlockedWhereUniqueInput>
    disconnect?: Enumerable<BlockedWhereUniqueInput>
    delete?: Enumerable<BlockedWhereUniqueInput>
    connect?: Enumerable<BlockedWhereUniqueInput>
    update?: Enumerable<BlockedUpdateWithWhereUniqueWithoutBlockerRefInput>
    updateMany?: Enumerable<BlockedUpdateManyWithWhereWithoutBlockerRefInput>
    deleteMany?: Enumerable<BlockedScalarWhereInput>
  }

  export type BlockedUpdateManyWithoutBlockeeRefNestedInput = {
    create?: XOR<Enumerable<BlockedCreateWithoutBlockeeRefInput>, Enumerable<BlockedUncheckedCreateWithoutBlockeeRefInput>>
    connectOrCreate?: Enumerable<BlockedCreateOrConnectWithoutBlockeeRefInput>
    upsert?: Enumerable<BlockedUpsertWithWhereUniqueWithoutBlockeeRefInput>
    createMany?: BlockedCreateManyBlockeeRefInputEnvelope
    set?: Enumerable<BlockedWhereUniqueInput>
    disconnect?: Enumerable<BlockedWhereUniqueInput>
    delete?: Enumerable<BlockedWhereUniqueInput>
    connect?: Enumerable<BlockedWhereUniqueInput>
    update?: Enumerable<BlockedUpdateWithWhereUniqueWithoutBlockeeRefInput>
    updateMany?: Enumerable<BlockedUpdateManyWithWhereWithoutBlockeeRefInput>
    deleteMany?: Enumerable<BlockedScalarWhereInput>
  }

  export type ChannelUpdateManyWithoutOwnerRefNestedInput = {
    create?: XOR<Enumerable<ChannelCreateWithoutOwnerRefInput>, Enumerable<ChannelUncheckedCreateWithoutOwnerRefInput>>
    connectOrCreate?: Enumerable<ChannelCreateOrConnectWithoutOwnerRefInput>
    upsert?: Enumerable<ChannelUpsertWithWhereUniqueWithoutOwnerRefInput>
    createMany?: ChannelCreateManyOwnerRefInputEnvelope
    set?: Enumerable<ChannelWhereUniqueInput>
    disconnect?: Enumerable<ChannelWhereUniqueInput>
    delete?: Enumerable<ChannelWhereUniqueInput>
    connect?: Enumerable<ChannelWhereUniqueInput>
    update?: Enumerable<ChannelUpdateWithWhereUniqueWithoutOwnerRefInput>
    updateMany?: Enumerable<ChannelUpdateManyWithWhereWithoutOwnerRefInput>
    deleteMany?: Enumerable<ChannelScalarWhereInput>
  }

  export type ChanMemberUpdateManyWithoutMemberRefNestedInput = {
    create?: XOR<Enumerable<ChanMemberCreateWithoutMemberRefInput>, Enumerable<ChanMemberUncheckedCreateWithoutMemberRefInput>>
    connectOrCreate?: Enumerable<ChanMemberCreateOrConnectWithoutMemberRefInput>
    upsert?: Enumerable<ChanMemberUpsertWithWhereUniqueWithoutMemberRefInput>
    createMany?: ChanMemberCreateManyMemberRefInputEnvelope
    set?: Enumerable<ChanMemberWhereUniqueInput>
    disconnect?: Enumerable<ChanMemberWhereUniqueInput>
    delete?: Enumerable<ChanMemberWhereUniqueInput>
    connect?: Enumerable<ChanMemberWhereUniqueInput>
    update?: Enumerable<ChanMemberUpdateWithWhereUniqueWithoutMemberRefInput>
    updateMany?: Enumerable<ChanMemberUpdateManyWithWhereWithoutMemberRefInput>
    deleteMany?: Enumerable<ChanMemberScalarWhereInput>
  }

  export type ChanBanUpdateManyWithoutBannedRefNestedInput = {
    create?: XOR<Enumerable<ChanBanCreateWithoutBannedRefInput>, Enumerable<ChanBanUncheckedCreateWithoutBannedRefInput>>
    connectOrCreate?: Enumerable<ChanBanCreateOrConnectWithoutBannedRefInput>
    upsert?: Enumerable<ChanBanUpsertWithWhereUniqueWithoutBannedRefInput>
    createMany?: ChanBanCreateManyBannedRefInputEnvelope
    set?: Enumerable<ChanBanWhereUniqueInput>
    disconnect?: Enumerable<ChanBanWhereUniqueInput>
    delete?: Enumerable<ChanBanWhereUniqueInput>
    connect?: Enumerable<ChanBanWhereUniqueInput>
    update?: Enumerable<ChanBanUpdateWithWhereUniqueWithoutBannedRefInput>
    updateMany?: Enumerable<ChanBanUpdateManyWithWhereWithoutBannedRefInput>
    deleteMany?: Enumerable<ChanBanScalarWhereInput>
  }

  export type ChanMessageUpdateManyWithoutSenderRefNestedInput = {
    create?: XOR<Enumerable<ChanMessageCreateWithoutSenderRefInput>, Enumerable<ChanMessageUncheckedCreateWithoutSenderRefInput>>
    connectOrCreate?: Enumerable<ChanMessageCreateOrConnectWithoutSenderRefInput>
    upsert?: Enumerable<ChanMessageUpsertWithWhereUniqueWithoutSenderRefInput>
    createMany?: ChanMessageCreateManySenderRefInputEnvelope
    set?: Enumerable<ChanMessageWhereUniqueInput>
    disconnect?: Enumerable<ChanMessageWhereUniqueInput>
    delete?: Enumerable<ChanMessageWhereUniqueInput>
    connect?: Enumerable<ChanMessageWhereUniqueInput>
    update?: Enumerable<ChanMessageUpdateWithWhereUniqueWithoutSenderRefInput>
    updateMany?: Enumerable<ChanMessageUpdateManyWithWhereWithoutSenderRefInput>
    deleteMany?: Enumerable<ChanMessageScalarWhereInput>
  }

  export type PrivMessageUpdateManyWithoutSenderRefNestedInput = {
    create?: XOR<Enumerable<PrivMessageCreateWithoutSenderRefInput>, Enumerable<PrivMessageUncheckedCreateWithoutSenderRefInput>>
    connectOrCreate?: Enumerable<PrivMessageCreateOrConnectWithoutSenderRefInput>
    upsert?: Enumerable<PrivMessageUpsertWithWhereUniqueWithoutSenderRefInput>
    createMany?: PrivMessageCreateManySenderRefInputEnvelope
    set?: Enumerable<PrivMessageWhereUniqueInput>
    disconnect?: Enumerable<PrivMessageWhereUniqueInput>
    delete?: Enumerable<PrivMessageWhereUniqueInput>
    connect?: Enumerable<PrivMessageWhereUniqueInput>
    update?: Enumerable<PrivMessageUpdateWithWhereUniqueWithoutSenderRefInput>
    updateMany?: Enumerable<PrivMessageUpdateManyWithWhereWithoutSenderRefInput>
    deleteMany?: Enumerable<PrivMessageScalarWhereInput>
  }

  export type PrivMessageUpdateManyWithoutReceiptRefNestedInput = {
    create?: XOR<Enumerable<PrivMessageCreateWithoutReceiptRefInput>, Enumerable<PrivMessageUncheckedCreateWithoutReceiptRefInput>>
    connectOrCreate?: Enumerable<PrivMessageCreateOrConnectWithoutReceiptRefInput>
    upsert?: Enumerable<PrivMessageUpsertWithWhereUniqueWithoutReceiptRefInput>
    createMany?: PrivMessageCreateManyReceiptRefInputEnvelope
    set?: Enumerable<PrivMessageWhereUniqueInput>
    disconnect?: Enumerable<PrivMessageWhereUniqueInput>
    delete?: Enumerable<PrivMessageWhereUniqueInput>
    connect?: Enumerable<PrivMessageWhereUniqueInput>
    update?: Enumerable<PrivMessageUpdateWithWhereUniqueWithoutReceiptRefInput>
    updateMany?: Enumerable<PrivMessageUpdateManyWithWhereWithoutReceiptRefInput>
    deleteMany?: Enumerable<PrivMessageScalarWhereInput>
  }

  export type MatchHistoryUpdateManyWithoutPlayer1RefNestedInput = {
    create?: XOR<Enumerable<MatchHistoryCreateWithoutPlayer1RefInput>, Enumerable<MatchHistoryUncheckedCreateWithoutPlayer1RefInput>>
    connectOrCreate?: Enumerable<MatchHistoryCreateOrConnectWithoutPlayer1RefInput>
    upsert?: Enumerable<MatchHistoryUpsertWithWhereUniqueWithoutPlayer1RefInput>
    createMany?: MatchHistoryCreateManyPlayer1RefInputEnvelope
    set?: Enumerable<MatchHistoryWhereUniqueInput>
    disconnect?: Enumerable<MatchHistoryWhereUniqueInput>
    delete?: Enumerable<MatchHistoryWhereUniqueInput>
    connect?: Enumerable<MatchHistoryWhereUniqueInput>
    update?: Enumerable<MatchHistoryUpdateWithWhereUniqueWithoutPlayer1RefInput>
    updateMany?: Enumerable<MatchHistoryUpdateManyWithWhereWithoutPlayer1RefInput>
    deleteMany?: Enumerable<MatchHistoryScalarWhereInput>
  }

  export type MatchHistoryUpdateManyWithoutPlayer2RefNestedInput = {
    create?: XOR<Enumerable<MatchHistoryCreateWithoutPlayer2RefInput>, Enumerable<MatchHistoryUncheckedCreateWithoutPlayer2RefInput>>
    connectOrCreate?: Enumerable<MatchHistoryCreateOrConnectWithoutPlayer2RefInput>
    upsert?: Enumerable<MatchHistoryUpsertWithWhereUniqueWithoutPlayer2RefInput>
    createMany?: MatchHistoryCreateManyPlayer2RefInputEnvelope
    set?: Enumerable<MatchHistoryWhereUniqueInput>
    disconnect?: Enumerable<MatchHistoryWhereUniqueInput>
    delete?: Enumerable<MatchHistoryWhereUniqueInput>
    connect?: Enumerable<MatchHistoryWhereUniqueInput>
    update?: Enumerable<MatchHistoryUpdateWithWhereUniqueWithoutPlayer2RefInput>
    updateMany?: Enumerable<MatchHistoryUpdateManyWithWhereWithoutPlayer2RefInput>
    deleteMany?: Enumerable<MatchHistoryScalarWhereInput>
  }

  export type MatchHistoryUpdateManyWithoutWinnerRefNestedInput = {
    create?: XOR<Enumerable<MatchHistoryCreateWithoutWinnerRefInput>, Enumerable<MatchHistoryUncheckedCreateWithoutWinnerRefInput>>
    connectOrCreate?: Enumerable<MatchHistoryCreateOrConnectWithoutWinnerRefInput>
    upsert?: Enumerable<MatchHistoryUpsertWithWhereUniqueWithoutWinnerRefInput>
    createMany?: MatchHistoryCreateManyWinnerRefInputEnvelope
    set?: Enumerable<MatchHistoryWhereUniqueInput>
    disconnect?: Enumerable<MatchHistoryWhereUniqueInput>
    delete?: Enumerable<MatchHistoryWhereUniqueInput>
    connect?: Enumerable<MatchHistoryWhereUniqueInput>
    update?: Enumerable<MatchHistoryUpdateWithWhereUniqueWithoutWinnerRefInput>
    updateMany?: Enumerable<MatchHistoryUpdateManyWithWhereWithoutWinnerRefInput>
    deleteMany?: Enumerable<MatchHistoryScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FriendUncheckedUpdateManyWithoutRequesterRefNestedInput = {
    create?: XOR<Enumerable<FriendCreateWithoutRequesterRefInput>, Enumerable<FriendUncheckedCreateWithoutRequesterRefInput>>
    connectOrCreate?: Enumerable<FriendCreateOrConnectWithoutRequesterRefInput>
    upsert?: Enumerable<FriendUpsertWithWhereUniqueWithoutRequesterRefInput>
    createMany?: FriendCreateManyRequesterRefInputEnvelope
    set?: Enumerable<FriendWhereUniqueInput>
    disconnect?: Enumerable<FriendWhereUniqueInput>
    delete?: Enumerable<FriendWhereUniqueInput>
    connect?: Enumerable<FriendWhereUniqueInput>
    update?: Enumerable<FriendUpdateWithWhereUniqueWithoutRequesterRefInput>
    updateMany?: Enumerable<FriendUpdateManyWithWhereWithoutRequesterRefInput>
    deleteMany?: Enumerable<FriendScalarWhereInput>
  }

  export type FriendUncheckedUpdateManyWithoutRequesteeRefNestedInput = {
    create?: XOR<Enumerable<FriendCreateWithoutRequesteeRefInput>, Enumerable<FriendUncheckedCreateWithoutRequesteeRefInput>>
    connectOrCreate?: Enumerable<FriendCreateOrConnectWithoutRequesteeRefInput>
    upsert?: Enumerable<FriendUpsertWithWhereUniqueWithoutRequesteeRefInput>
    createMany?: FriendCreateManyRequesteeRefInputEnvelope
    set?: Enumerable<FriendWhereUniqueInput>
    disconnect?: Enumerable<FriendWhereUniqueInput>
    delete?: Enumerable<FriendWhereUniqueInput>
    connect?: Enumerable<FriendWhereUniqueInput>
    update?: Enumerable<FriendUpdateWithWhereUniqueWithoutRequesteeRefInput>
    updateMany?: Enumerable<FriendUpdateManyWithWhereWithoutRequesteeRefInput>
    deleteMany?: Enumerable<FriendScalarWhereInput>
  }

  export type BlockedUncheckedUpdateManyWithoutBlockerRefNestedInput = {
    create?: XOR<Enumerable<BlockedCreateWithoutBlockerRefInput>, Enumerable<BlockedUncheckedCreateWithoutBlockerRefInput>>
    connectOrCreate?: Enumerable<BlockedCreateOrConnectWithoutBlockerRefInput>
    upsert?: Enumerable<BlockedUpsertWithWhereUniqueWithoutBlockerRefInput>
    createMany?: BlockedCreateManyBlockerRefInputEnvelope
    set?: Enumerable<BlockedWhereUniqueInput>
    disconnect?: Enumerable<BlockedWhereUniqueInput>
    delete?: Enumerable<BlockedWhereUniqueInput>
    connect?: Enumerable<BlockedWhereUniqueInput>
    update?: Enumerable<BlockedUpdateWithWhereUniqueWithoutBlockerRefInput>
    updateMany?: Enumerable<BlockedUpdateManyWithWhereWithoutBlockerRefInput>
    deleteMany?: Enumerable<BlockedScalarWhereInput>
  }

  export type BlockedUncheckedUpdateManyWithoutBlockeeRefNestedInput = {
    create?: XOR<Enumerable<BlockedCreateWithoutBlockeeRefInput>, Enumerable<BlockedUncheckedCreateWithoutBlockeeRefInput>>
    connectOrCreate?: Enumerable<BlockedCreateOrConnectWithoutBlockeeRefInput>
    upsert?: Enumerable<BlockedUpsertWithWhereUniqueWithoutBlockeeRefInput>
    createMany?: BlockedCreateManyBlockeeRefInputEnvelope
    set?: Enumerable<BlockedWhereUniqueInput>
    disconnect?: Enumerable<BlockedWhereUniqueInput>
    delete?: Enumerable<BlockedWhereUniqueInput>
    connect?: Enumerable<BlockedWhereUniqueInput>
    update?: Enumerable<BlockedUpdateWithWhereUniqueWithoutBlockeeRefInput>
    updateMany?: Enumerable<BlockedUpdateManyWithWhereWithoutBlockeeRefInput>
    deleteMany?: Enumerable<BlockedScalarWhereInput>
  }

  export type ChannelUncheckedUpdateManyWithoutOwnerRefNestedInput = {
    create?: XOR<Enumerable<ChannelCreateWithoutOwnerRefInput>, Enumerable<ChannelUncheckedCreateWithoutOwnerRefInput>>
    connectOrCreate?: Enumerable<ChannelCreateOrConnectWithoutOwnerRefInput>
    upsert?: Enumerable<ChannelUpsertWithWhereUniqueWithoutOwnerRefInput>
    createMany?: ChannelCreateManyOwnerRefInputEnvelope
    set?: Enumerable<ChannelWhereUniqueInput>
    disconnect?: Enumerable<ChannelWhereUniqueInput>
    delete?: Enumerable<ChannelWhereUniqueInput>
    connect?: Enumerable<ChannelWhereUniqueInput>
    update?: Enumerable<ChannelUpdateWithWhereUniqueWithoutOwnerRefInput>
    updateMany?: Enumerable<ChannelUpdateManyWithWhereWithoutOwnerRefInput>
    deleteMany?: Enumerable<ChannelScalarWhereInput>
  }

  export type ChanMemberUncheckedUpdateManyWithoutMemberRefNestedInput = {
    create?: XOR<Enumerable<ChanMemberCreateWithoutMemberRefInput>, Enumerable<ChanMemberUncheckedCreateWithoutMemberRefInput>>
    connectOrCreate?: Enumerable<ChanMemberCreateOrConnectWithoutMemberRefInput>
    upsert?: Enumerable<ChanMemberUpsertWithWhereUniqueWithoutMemberRefInput>
    createMany?: ChanMemberCreateManyMemberRefInputEnvelope
    set?: Enumerable<ChanMemberWhereUniqueInput>
    disconnect?: Enumerable<ChanMemberWhereUniqueInput>
    delete?: Enumerable<ChanMemberWhereUniqueInput>
    connect?: Enumerable<ChanMemberWhereUniqueInput>
    update?: Enumerable<ChanMemberUpdateWithWhereUniqueWithoutMemberRefInput>
    updateMany?: Enumerable<ChanMemberUpdateManyWithWhereWithoutMemberRefInput>
    deleteMany?: Enumerable<ChanMemberScalarWhereInput>
  }

  export type ChanBanUncheckedUpdateManyWithoutBannedRefNestedInput = {
    create?: XOR<Enumerable<ChanBanCreateWithoutBannedRefInput>, Enumerable<ChanBanUncheckedCreateWithoutBannedRefInput>>
    connectOrCreate?: Enumerable<ChanBanCreateOrConnectWithoutBannedRefInput>
    upsert?: Enumerable<ChanBanUpsertWithWhereUniqueWithoutBannedRefInput>
    createMany?: ChanBanCreateManyBannedRefInputEnvelope
    set?: Enumerable<ChanBanWhereUniqueInput>
    disconnect?: Enumerable<ChanBanWhereUniqueInput>
    delete?: Enumerable<ChanBanWhereUniqueInput>
    connect?: Enumerable<ChanBanWhereUniqueInput>
    update?: Enumerable<ChanBanUpdateWithWhereUniqueWithoutBannedRefInput>
    updateMany?: Enumerable<ChanBanUpdateManyWithWhereWithoutBannedRefInput>
    deleteMany?: Enumerable<ChanBanScalarWhereInput>
  }

  export type ChanMessageUncheckedUpdateManyWithoutSenderRefNestedInput = {
    create?: XOR<Enumerable<ChanMessageCreateWithoutSenderRefInput>, Enumerable<ChanMessageUncheckedCreateWithoutSenderRefInput>>
    connectOrCreate?: Enumerable<ChanMessageCreateOrConnectWithoutSenderRefInput>
    upsert?: Enumerable<ChanMessageUpsertWithWhereUniqueWithoutSenderRefInput>
    createMany?: ChanMessageCreateManySenderRefInputEnvelope
    set?: Enumerable<ChanMessageWhereUniqueInput>
    disconnect?: Enumerable<ChanMessageWhereUniqueInput>
    delete?: Enumerable<ChanMessageWhereUniqueInput>
    connect?: Enumerable<ChanMessageWhereUniqueInput>
    update?: Enumerable<ChanMessageUpdateWithWhereUniqueWithoutSenderRefInput>
    updateMany?: Enumerable<ChanMessageUpdateManyWithWhereWithoutSenderRefInput>
    deleteMany?: Enumerable<ChanMessageScalarWhereInput>
  }

  export type PrivMessageUncheckedUpdateManyWithoutSenderRefNestedInput = {
    create?: XOR<Enumerable<PrivMessageCreateWithoutSenderRefInput>, Enumerable<PrivMessageUncheckedCreateWithoutSenderRefInput>>
    connectOrCreate?: Enumerable<PrivMessageCreateOrConnectWithoutSenderRefInput>
    upsert?: Enumerable<PrivMessageUpsertWithWhereUniqueWithoutSenderRefInput>
    createMany?: PrivMessageCreateManySenderRefInputEnvelope
    set?: Enumerable<PrivMessageWhereUniqueInput>
    disconnect?: Enumerable<PrivMessageWhereUniqueInput>
    delete?: Enumerable<PrivMessageWhereUniqueInput>
    connect?: Enumerable<PrivMessageWhereUniqueInput>
    update?: Enumerable<PrivMessageUpdateWithWhereUniqueWithoutSenderRefInput>
    updateMany?: Enumerable<PrivMessageUpdateManyWithWhereWithoutSenderRefInput>
    deleteMany?: Enumerable<PrivMessageScalarWhereInput>
  }

  export type PrivMessageUncheckedUpdateManyWithoutReceiptRefNestedInput = {
    create?: XOR<Enumerable<PrivMessageCreateWithoutReceiptRefInput>, Enumerable<PrivMessageUncheckedCreateWithoutReceiptRefInput>>
    connectOrCreate?: Enumerable<PrivMessageCreateOrConnectWithoutReceiptRefInput>
    upsert?: Enumerable<PrivMessageUpsertWithWhereUniqueWithoutReceiptRefInput>
    createMany?: PrivMessageCreateManyReceiptRefInputEnvelope
    set?: Enumerable<PrivMessageWhereUniqueInput>
    disconnect?: Enumerable<PrivMessageWhereUniqueInput>
    delete?: Enumerable<PrivMessageWhereUniqueInput>
    connect?: Enumerable<PrivMessageWhereUniqueInput>
    update?: Enumerable<PrivMessageUpdateWithWhereUniqueWithoutReceiptRefInput>
    updateMany?: Enumerable<PrivMessageUpdateManyWithWhereWithoutReceiptRefInput>
    deleteMany?: Enumerable<PrivMessageScalarWhereInput>
  }

  export type MatchHistoryUncheckedUpdateManyWithoutPlayer1RefNestedInput = {
    create?: XOR<Enumerable<MatchHistoryCreateWithoutPlayer1RefInput>, Enumerable<MatchHistoryUncheckedCreateWithoutPlayer1RefInput>>
    connectOrCreate?: Enumerable<MatchHistoryCreateOrConnectWithoutPlayer1RefInput>
    upsert?: Enumerable<MatchHistoryUpsertWithWhereUniqueWithoutPlayer1RefInput>
    createMany?: MatchHistoryCreateManyPlayer1RefInputEnvelope
    set?: Enumerable<MatchHistoryWhereUniqueInput>
    disconnect?: Enumerable<MatchHistoryWhereUniqueInput>
    delete?: Enumerable<MatchHistoryWhereUniqueInput>
    connect?: Enumerable<MatchHistoryWhereUniqueInput>
    update?: Enumerable<MatchHistoryUpdateWithWhereUniqueWithoutPlayer1RefInput>
    updateMany?: Enumerable<MatchHistoryUpdateManyWithWhereWithoutPlayer1RefInput>
    deleteMany?: Enumerable<MatchHistoryScalarWhereInput>
  }

  export type MatchHistoryUncheckedUpdateManyWithoutPlayer2RefNestedInput = {
    create?: XOR<Enumerable<MatchHistoryCreateWithoutPlayer2RefInput>, Enumerable<MatchHistoryUncheckedCreateWithoutPlayer2RefInput>>
    connectOrCreate?: Enumerable<MatchHistoryCreateOrConnectWithoutPlayer2RefInput>
    upsert?: Enumerable<MatchHistoryUpsertWithWhereUniqueWithoutPlayer2RefInput>
    createMany?: MatchHistoryCreateManyPlayer2RefInputEnvelope
    set?: Enumerable<MatchHistoryWhereUniqueInput>
    disconnect?: Enumerable<MatchHistoryWhereUniqueInput>
    delete?: Enumerable<MatchHistoryWhereUniqueInput>
    connect?: Enumerable<MatchHistoryWhereUniqueInput>
    update?: Enumerable<MatchHistoryUpdateWithWhereUniqueWithoutPlayer2RefInput>
    updateMany?: Enumerable<MatchHistoryUpdateManyWithWhereWithoutPlayer2RefInput>
    deleteMany?: Enumerable<MatchHistoryScalarWhereInput>
  }

  export type MatchHistoryUncheckedUpdateManyWithoutWinnerRefNestedInput = {
    create?: XOR<Enumerable<MatchHistoryCreateWithoutWinnerRefInput>, Enumerable<MatchHistoryUncheckedCreateWithoutWinnerRefInput>>
    connectOrCreate?: Enumerable<MatchHistoryCreateOrConnectWithoutWinnerRefInput>
    upsert?: Enumerable<MatchHistoryUpsertWithWhereUniqueWithoutWinnerRefInput>
    createMany?: MatchHistoryCreateManyWinnerRefInputEnvelope
    set?: Enumerable<MatchHistoryWhereUniqueInput>
    disconnect?: Enumerable<MatchHistoryWhereUniqueInput>
    delete?: Enumerable<MatchHistoryWhereUniqueInput>
    connect?: Enumerable<MatchHistoryWhereUniqueInput>
    update?: Enumerable<MatchHistoryUpdateWithWhereUniqueWithoutWinnerRefInput>
    updateMany?: Enumerable<MatchHistoryUpdateManyWithWhereWithoutWinnerRefInput>
    deleteMany?: Enumerable<MatchHistoryScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutRequesterInput = {
    create?: XOR<UserCreateWithoutRequesterInput, UserUncheckedCreateWithoutRequesterInput>
    connectOrCreate?: UserCreateOrConnectWithoutRequesterInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutRequesteeInput = {
    create?: XOR<UserCreateWithoutRequesteeInput, UserUncheckedCreateWithoutRequesteeInput>
    connectOrCreate?: UserCreateOrConnectWithoutRequesteeInput
    connect?: UserWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutRequesterNestedInput = {
    create?: XOR<UserCreateWithoutRequesterInput, UserUncheckedCreateWithoutRequesterInput>
    connectOrCreate?: UserCreateOrConnectWithoutRequesterInput
    upsert?: UserUpsertWithoutRequesterInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutRequesterInput, UserUncheckedUpdateWithoutRequesterInput>
  }

  export type UserUpdateOneRequiredWithoutRequesteeNestedInput = {
    create?: XOR<UserCreateWithoutRequesteeInput, UserUncheckedCreateWithoutRequesteeInput>
    connectOrCreate?: UserCreateOrConnectWithoutRequesteeInput
    upsert?: UserUpsertWithoutRequesteeInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutRequesteeInput, UserUncheckedUpdateWithoutRequesteeInput>
  }

  export type UserCreateNestedOneWithoutBlockerInput = {
    create?: XOR<UserCreateWithoutBlockerInput, UserUncheckedCreateWithoutBlockerInput>
    connectOrCreate?: UserCreateOrConnectWithoutBlockerInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutBlockeeInput = {
    create?: XOR<UserCreateWithoutBlockeeInput, UserUncheckedCreateWithoutBlockeeInput>
    connectOrCreate?: UserCreateOrConnectWithoutBlockeeInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutBlockerNestedInput = {
    create?: XOR<UserCreateWithoutBlockerInput, UserUncheckedCreateWithoutBlockerInput>
    connectOrCreate?: UserCreateOrConnectWithoutBlockerInput
    upsert?: UserUpsertWithoutBlockerInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutBlockerInput, UserUncheckedUpdateWithoutBlockerInput>
  }

  export type UserUpdateOneRequiredWithoutBlockeeNestedInput = {
    create?: XOR<UserCreateWithoutBlockeeInput, UserUncheckedCreateWithoutBlockeeInput>
    connectOrCreate?: UserCreateOrConnectWithoutBlockeeInput
    upsert?: UserUpsertWithoutBlockeeInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutBlockeeInput, UserUncheckedUpdateWithoutBlockeeInput>
  }

  export type UserCreateNestedOneWithoutOwnerInput = {
    create?: XOR<UserCreateWithoutOwnerInput, UserUncheckedCreateWithoutOwnerInput>
    connectOrCreate?: UserCreateOrConnectWithoutOwnerInput
    connect?: UserWhereUniqueInput
  }

  export type ChanMemberCreateNestedManyWithoutChanRefInput = {
    create?: XOR<Enumerable<ChanMemberCreateWithoutChanRefInput>, Enumerable<ChanMemberUncheckedCreateWithoutChanRefInput>>
    connectOrCreate?: Enumerable<ChanMemberCreateOrConnectWithoutChanRefInput>
    createMany?: ChanMemberCreateManyChanRefInputEnvelope
    connect?: Enumerable<ChanMemberWhereUniqueInput>
  }

  export type ChanBanCreateNestedManyWithoutChanRefInput = {
    create?: XOR<Enumerable<ChanBanCreateWithoutChanRefInput>, Enumerable<ChanBanUncheckedCreateWithoutChanRefInput>>
    connectOrCreate?: Enumerable<ChanBanCreateOrConnectWithoutChanRefInput>
    createMany?: ChanBanCreateManyChanRefInputEnvelope
    connect?: Enumerable<ChanBanWhereUniqueInput>
  }

  export type ChanMessageCreateNestedManyWithoutChanRefInput = {
    create?: XOR<Enumerable<ChanMessageCreateWithoutChanRefInput>, Enumerable<ChanMessageUncheckedCreateWithoutChanRefInput>>
    connectOrCreate?: Enumerable<ChanMessageCreateOrConnectWithoutChanRefInput>
    createMany?: ChanMessageCreateManyChanRefInputEnvelope
    connect?: Enumerable<ChanMessageWhereUniqueInput>
  }

  export type ChanMemberUncheckedCreateNestedManyWithoutChanRefInput = {
    create?: XOR<Enumerable<ChanMemberCreateWithoutChanRefInput>, Enumerable<ChanMemberUncheckedCreateWithoutChanRefInput>>
    connectOrCreate?: Enumerable<ChanMemberCreateOrConnectWithoutChanRefInput>
    createMany?: ChanMemberCreateManyChanRefInputEnvelope
    connect?: Enumerable<ChanMemberWhereUniqueInput>
  }

  export type ChanBanUncheckedCreateNestedManyWithoutChanRefInput = {
    create?: XOR<Enumerable<ChanBanCreateWithoutChanRefInput>, Enumerable<ChanBanUncheckedCreateWithoutChanRefInput>>
    connectOrCreate?: Enumerable<ChanBanCreateOrConnectWithoutChanRefInput>
    createMany?: ChanBanCreateManyChanRefInputEnvelope
    connect?: Enumerable<ChanBanWhereUniqueInput>
  }

  export type ChanMessageUncheckedCreateNestedManyWithoutChanRefInput = {
    create?: XOR<Enumerable<ChanMessageCreateWithoutChanRefInput>, Enumerable<ChanMessageUncheckedCreateWithoutChanRefInput>>
    connectOrCreate?: Enumerable<ChanMessageCreateOrConnectWithoutChanRefInput>
    createMany?: ChanMessageCreateManyChanRefInputEnvelope
    connect?: Enumerable<ChanMessageWhereUniqueInput>
  }

  export type EnumChanTypeFieldUpdateOperationsInput = {
    set?: ChanType
  }

  export type UserUpdateOneRequiredWithoutOwnerNestedInput = {
    create?: XOR<UserCreateWithoutOwnerInput, UserUncheckedCreateWithoutOwnerInput>
    connectOrCreate?: UserCreateOrConnectWithoutOwnerInput
    upsert?: UserUpsertWithoutOwnerInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutOwnerInput, UserUncheckedUpdateWithoutOwnerInput>
  }

  export type ChanMemberUpdateManyWithoutChanRefNestedInput = {
    create?: XOR<Enumerable<ChanMemberCreateWithoutChanRefInput>, Enumerable<ChanMemberUncheckedCreateWithoutChanRefInput>>
    connectOrCreate?: Enumerable<ChanMemberCreateOrConnectWithoutChanRefInput>
    upsert?: Enumerable<ChanMemberUpsertWithWhereUniqueWithoutChanRefInput>
    createMany?: ChanMemberCreateManyChanRefInputEnvelope
    set?: Enumerable<ChanMemberWhereUniqueInput>
    disconnect?: Enumerable<ChanMemberWhereUniqueInput>
    delete?: Enumerable<ChanMemberWhereUniqueInput>
    connect?: Enumerable<ChanMemberWhereUniqueInput>
    update?: Enumerable<ChanMemberUpdateWithWhereUniqueWithoutChanRefInput>
    updateMany?: Enumerable<ChanMemberUpdateManyWithWhereWithoutChanRefInput>
    deleteMany?: Enumerable<ChanMemberScalarWhereInput>
  }

  export type ChanBanUpdateManyWithoutChanRefNestedInput = {
    create?: XOR<Enumerable<ChanBanCreateWithoutChanRefInput>, Enumerable<ChanBanUncheckedCreateWithoutChanRefInput>>
    connectOrCreate?: Enumerable<ChanBanCreateOrConnectWithoutChanRefInput>
    upsert?: Enumerable<ChanBanUpsertWithWhereUniqueWithoutChanRefInput>
    createMany?: ChanBanCreateManyChanRefInputEnvelope
    set?: Enumerable<ChanBanWhereUniqueInput>
    disconnect?: Enumerable<ChanBanWhereUniqueInput>
    delete?: Enumerable<ChanBanWhereUniqueInput>
    connect?: Enumerable<ChanBanWhereUniqueInput>
    update?: Enumerable<ChanBanUpdateWithWhereUniqueWithoutChanRefInput>
    updateMany?: Enumerable<ChanBanUpdateManyWithWhereWithoutChanRefInput>
    deleteMany?: Enumerable<ChanBanScalarWhereInput>
  }

  export type ChanMessageUpdateManyWithoutChanRefNestedInput = {
    create?: XOR<Enumerable<ChanMessageCreateWithoutChanRefInput>, Enumerable<ChanMessageUncheckedCreateWithoutChanRefInput>>
    connectOrCreate?: Enumerable<ChanMessageCreateOrConnectWithoutChanRefInput>
    upsert?: Enumerable<ChanMessageUpsertWithWhereUniqueWithoutChanRefInput>
    createMany?: ChanMessageCreateManyChanRefInputEnvelope
    set?: Enumerable<ChanMessageWhereUniqueInput>
    disconnect?: Enumerable<ChanMessageWhereUniqueInput>
    delete?: Enumerable<ChanMessageWhereUniqueInput>
    connect?: Enumerable<ChanMessageWhereUniqueInput>
    update?: Enumerable<ChanMessageUpdateWithWhereUniqueWithoutChanRefInput>
    updateMany?: Enumerable<ChanMessageUpdateManyWithWhereWithoutChanRefInput>
    deleteMany?: Enumerable<ChanMessageScalarWhereInput>
  }

  export type ChanMemberUncheckedUpdateManyWithoutChanRefNestedInput = {
    create?: XOR<Enumerable<ChanMemberCreateWithoutChanRefInput>, Enumerable<ChanMemberUncheckedCreateWithoutChanRefInput>>
    connectOrCreate?: Enumerable<ChanMemberCreateOrConnectWithoutChanRefInput>
    upsert?: Enumerable<ChanMemberUpsertWithWhereUniqueWithoutChanRefInput>
    createMany?: ChanMemberCreateManyChanRefInputEnvelope
    set?: Enumerable<ChanMemberWhereUniqueInput>
    disconnect?: Enumerable<ChanMemberWhereUniqueInput>
    delete?: Enumerable<ChanMemberWhereUniqueInput>
    connect?: Enumerable<ChanMemberWhereUniqueInput>
    update?: Enumerable<ChanMemberUpdateWithWhereUniqueWithoutChanRefInput>
    updateMany?: Enumerable<ChanMemberUpdateManyWithWhereWithoutChanRefInput>
    deleteMany?: Enumerable<ChanMemberScalarWhereInput>
  }

  export type ChanBanUncheckedUpdateManyWithoutChanRefNestedInput = {
    create?: XOR<Enumerable<ChanBanCreateWithoutChanRefInput>, Enumerable<ChanBanUncheckedCreateWithoutChanRefInput>>
    connectOrCreate?: Enumerable<ChanBanCreateOrConnectWithoutChanRefInput>
    upsert?: Enumerable<ChanBanUpsertWithWhereUniqueWithoutChanRefInput>
    createMany?: ChanBanCreateManyChanRefInputEnvelope
    set?: Enumerable<ChanBanWhereUniqueInput>
    disconnect?: Enumerable<ChanBanWhereUniqueInput>
    delete?: Enumerable<ChanBanWhereUniqueInput>
    connect?: Enumerable<ChanBanWhereUniqueInput>
    update?: Enumerable<ChanBanUpdateWithWhereUniqueWithoutChanRefInput>
    updateMany?: Enumerable<ChanBanUpdateManyWithWhereWithoutChanRefInput>
    deleteMany?: Enumerable<ChanBanScalarWhereInput>
  }

  export type ChanMessageUncheckedUpdateManyWithoutChanRefNestedInput = {
    create?: XOR<Enumerable<ChanMessageCreateWithoutChanRefInput>, Enumerable<ChanMessageUncheckedCreateWithoutChanRefInput>>
    connectOrCreate?: Enumerable<ChanMessageCreateOrConnectWithoutChanRefInput>
    upsert?: Enumerable<ChanMessageUpsertWithWhereUniqueWithoutChanRefInput>
    createMany?: ChanMessageCreateManyChanRefInputEnvelope
    set?: Enumerable<ChanMessageWhereUniqueInput>
    disconnect?: Enumerable<ChanMessageWhereUniqueInput>
    delete?: Enumerable<ChanMessageWhereUniqueInput>
    connect?: Enumerable<ChanMessageWhereUniqueInput>
    update?: Enumerable<ChanMessageUpdateWithWhereUniqueWithoutChanRefInput>
    updateMany?: Enumerable<ChanMessageUpdateManyWithWhereWithoutChanRefInput>
    deleteMany?: Enumerable<ChanMessageScalarWhereInput>
  }

  export type ChannelCreateNestedOneWithoutMemChanInput = {
    create?: XOR<ChannelCreateWithoutMemChanInput, ChannelUncheckedCreateWithoutMemChanInput>
    connectOrCreate?: ChannelCreateOrConnectWithoutMemChanInput
    connect?: ChannelWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutMemberInput = {
    create?: XOR<UserCreateWithoutMemberInput, UserUncheckedCreateWithoutMemberInput>
    connectOrCreate?: UserCreateOrConnectWithoutMemberInput
    connect?: UserWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ChannelUpdateOneRequiredWithoutMemChanNestedInput = {
    create?: XOR<ChannelCreateWithoutMemChanInput, ChannelUncheckedCreateWithoutMemChanInput>
    connectOrCreate?: ChannelCreateOrConnectWithoutMemChanInput
    upsert?: ChannelUpsertWithoutMemChanInput
    connect?: ChannelWhereUniqueInput
    update?: XOR<ChannelUpdateWithoutMemChanInput, ChannelUncheckedUpdateWithoutMemChanInput>
  }

  export type UserUpdateOneRequiredWithoutMemberNestedInput = {
    create?: XOR<UserCreateWithoutMemberInput, UserUncheckedCreateWithoutMemberInput>
    connectOrCreate?: UserCreateOrConnectWithoutMemberInput
    upsert?: UserUpsertWithoutMemberInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutMemberInput, UserUncheckedUpdateWithoutMemberInput>
  }

  export type ChannelCreateNestedOneWithoutBanChanInput = {
    create?: XOR<ChannelCreateWithoutBanChanInput, ChannelUncheckedCreateWithoutBanChanInput>
    connectOrCreate?: ChannelCreateOrConnectWithoutBanChanInput
    connect?: ChannelWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutBannedInput = {
    create?: XOR<UserCreateWithoutBannedInput, UserUncheckedCreateWithoutBannedInput>
    connectOrCreate?: UserCreateOrConnectWithoutBannedInput
    connect?: UserWhereUniqueInput
  }

  export type ChannelUpdateOneRequiredWithoutBanChanNestedInput = {
    create?: XOR<ChannelCreateWithoutBanChanInput, ChannelUncheckedCreateWithoutBanChanInput>
    connectOrCreate?: ChannelCreateOrConnectWithoutBanChanInput
    upsert?: ChannelUpsertWithoutBanChanInput
    connect?: ChannelWhereUniqueInput
    update?: XOR<ChannelUpdateWithoutBanChanInput, ChannelUncheckedUpdateWithoutBanChanInput>
  }

  export type UserUpdateOneRequiredWithoutBannedNestedInput = {
    create?: XOR<UserCreateWithoutBannedInput, UserUncheckedCreateWithoutBannedInput>
    connectOrCreate?: UserCreateOrConnectWithoutBannedInput
    upsert?: UserUpsertWithoutBannedInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutBannedInput, UserUncheckedUpdateWithoutBannedInput>
  }

  export type UserCreateNestedOneWithoutChanSenderInput = {
    create?: XOR<UserCreateWithoutChanSenderInput, UserUncheckedCreateWithoutChanSenderInput>
    connectOrCreate?: UserCreateOrConnectWithoutChanSenderInput
    connect?: UserWhereUniqueInput
  }

  export type ChannelCreateNestedOneWithoutMessChanInput = {
    create?: XOR<ChannelCreateWithoutMessChanInput, ChannelUncheckedCreateWithoutMessChanInput>
    connectOrCreate?: ChannelCreateOrConnectWithoutMessChanInput
    connect?: ChannelWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutChanSenderNestedInput = {
    create?: XOR<UserCreateWithoutChanSenderInput, UserUncheckedCreateWithoutChanSenderInput>
    connectOrCreate?: UserCreateOrConnectWithoutChanSenderInput
    upsert?: UserUpsertWithoutChanSenderInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutChanSenderInput, UserUncheckedUpdateWithoutChanSenderInput>
  }

  export type ChannelUpdateOneRequiredWithoutMessChanNestedInput = {
    create?: XOR<ChannelCreateWithoutMessChanInput, ChannelUncheckedCreateWithoutMessChanInput>
    connectOrCreate?: ChannelCreateOrConnectWithoutMessChanInput
    upsert?: ChannelUpsertWithoutMessChanInput
    connect?: ChannelWhereUniqueInput
    update?: XOR<ChannelUpdateWithoutMessChanInput, ChannelUncheckedUpdateWithoutMessChanInput>
  }

  export type UserCreateNestedOneWithoutPrivSenderInput = {
    create?: XOR<UserCreateWithoutPrivSenderInput, UserUncheckedCreateWithoutPrivSenderInput>
    connectOrCreate?: UserCreateOrConnectWithoutPrivSenderInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutPrivReceiptInput = {
    create?: XOR<UserCreateWithoutPrivReceiptInput, UserUncheckedCreateWithoutPrivReceiptInput>
    connectOrCreate?: UserCreateOrConnectWithoutPrivReceiptInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPrivSenderNestedInput = {
    create?: XOR<UserCreateWithoutPrivSenderInput, UserUncheckedCreateWithoutPrivSenderInput>
    connectOrCreate?: UserCreateOrConnectWithoutPrivSenderInput
    upsert?: UserUpsertWithoutPrivSenderInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutPrivSenderInput, UserUncheckedUpdateWithoutPrivSenderInput>
  }

  export type UserUpdateOneRequiredWithoutPrivReceiptNestedInput = {
    create?: XOR<UserCreateWithoutPrivReceiptInput, UserUncheckedCreateWithoutPrivReceiptInput>
    connectOrCreate?: UserCreateOrConnectWithoutPrivReceiptInput
    upsert?: UserUpsertWithoutPrivReceiptInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutPrivReceiptInput, UserUncheckedUpdateWithoutPrivReceiptInput>
  }

  export type UserCreateNestedOneWithoutPlayer1Input = {
    create?: XOR<UserCreateWithoutPlayer1Input, UserUncheckedCreateWithoutPlayer1Input>
    connectOrCreate?: UserCreateOrConnectWithoutPlayer1Input
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutPlayer2Input = {
    create?: XOR<UserCreateWithoutPlayer2Input, UserUncheckedCreateWithoutPlayer2Input>
    connectOrCreate?: UserCreateOrConnectWithoutPlayer2Input
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutWinnerInput = {
    create?: XOR<UserCreateWithoutWinnerInput, UserUncheckedCreateWithoutWinnerInput>
    connectOrCreate?: UserCreateOrConnectWithoutWinnerInput
    connect?: UserWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneRequiredWithoutPlayer1NestedInput = {
    create?: XOR<UserCreateWithoutPlayer1Input, UserUncheckedCreateWithoutPlayer1Input>
    connectOrCreate?: UserCreateOrConnectWithoutPlayer1Input
    upsert?: UserUpsertWithoutPlayer1Input
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutPlayer1Input, UserUncheckedUpdateWithoutPlayer1Input>
  }

  export type UserUpdateOneRequiredWithoutPlayer2NestedInput = {
    create?: XOR<UserCreateWithoutPlayer2Input, UserUncheckedCreateWithoutPlayer2Input>
    connectOrCreate?: UserCreateOrConnectWithoutPlayer2Input
    upsert?: UserUpsertWithoutPlayer2Input
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutPlayer2Input, UserUncheckedUpdateWithoutPlayer2Input>
  }

  export type UserUpdateOneWithoutWinnerNestedInput = {
    create?: XOR<UserCreateWithoutWinnerInput, UserUncheckedCreateWithoutWinnerInput>
    connectOrCreate?: UserCreateOrConnectWithoutWinnerInput
    upsert?: UserUpsertWithoutWinnerInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutWinnerInput, UserUncheckedUpdateWithoutWinnerInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedEnumChanTypeFilter = {
    equals?: ChanType
    in?: Enumerable<ChanType>
    notIn?: Enumerable<ChanType>
    not?: NestedEnumChanTypeFilter | ChanType
  }

  export type NestedEnumChanTypeWithAggregatesFilter = {
    equals?: ChanType
    in?: Enumerable<ChanType>
    notIn?: Enumerable<ChanType>
    not?: NestedEnumChanTypeWithAggregatesFilter | ChanType
    _count?: NestedIntFilter
    _min?: NestedEnumChanTypeFilter
    _max?: NestedEnumChanTypeFilter
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type FriendCreateWithoutRequesterRefInput = {
    status?: boolean
    requesteeRef: UserCreateNestedOneWithoutRequesteeInput
  }

  export type FriendUncheckedCreateWithoutRequesterRefInput = {
    requestee: number
    status?: boolean
  }

  export type FriendCreateOrConnectWithoutRequesterRefInput = {
    where: FriendWhereUniqueInput
    create: XOR<FriendCreateWithoutRequesterRefInput, FriendUncheckedCreateWithoutRequesterRefInput>
  }

  export type FriendCreateManyRequesterRefInputEnvelope = {
    data: Enumerable<FriendCreateManyRequesterRefInput>
    skipDuplicates?: boolean
  }

  export type FriendCreateWithoutRequesteeRefInput = {
    status?: boolean
    requesterRef: UserCreateNestedOneWithoutRequesterInput
  }

  export type FriendUncheckedCreateWithoutRequesteeRefInput = {
    requester: number
    status?: boolean
  }

  export type FriendCreateOrConnectWithoutRequesteeRefInput = {
    where: FriendWhereUniqueInput
    create: XOR<FriendCreateWithoutRequesteeRefInput, FriendUncheckedCreateWithoutRequesteeRefInput>
  }

  export type FriendCreateManyRequesteeRefInputEnvelope = {
    data: Enumerable<FriendCreateManyRequesteeRefInput>
    skipDuplicates?: boolean
  }

  export type BlockedCreateWithoutBlockerRefInput = {
    blockeeRef: UserCreateNestedOneWithoutBlockeeInput
  }

  export type BlockedUncheckedCreateWithoutBlockerRefInput = {
    blockee: number
  }

  export type BlockedCreateOrConnectWithoutBlockerRefInput = {
    where: BlockedWhereUniqueInput
    create: XOR<BlockedCreateWithoutBlockerRefInput, BlockedUncheckedCreateWithoutBlockerRefInput>
  }

  export type BlockedCreateManyBlockerRefInputEnvelope = {
    data: Enumerable<BlockedCreateManyBlockerRefInput>
    skipDuplicates?: boolean
  }

  export type BlockedCreateWithoutBlockeeRefInput = {
    blockerRef: UserCreateNestedOneWithoutBlockerInput
  }

  export type BlockedUncheckedCreateWithoutBlockeeRefInput = {
    blocker: number
  }

  export type BlockedCreateOrConnectWithoutBlockeeRefInput = {
    where: BlockedWhereUniqueInput
    create: XOR<BlockedCreateWithoutBlockeeRefInput, BlockedUncheckedCreateWithoutBlockeeRefInput>
  }

  export type BlockedCreateManyBlockeeRefInputEnvelope = {
    data: Enumerable<BlockedCreateManyBlockeeRefInput>
    skipDuplicates?: boolean
  }

  export type ChannelCreateWithoutOwnerRefInput = {
    name: string
    type?: ChanType
    passwd?: string | null
    memChan?: ChanMemberCreateNestedManyWithoutChanRefInput
    banChan?: ChanBanCreateNestedManyWithoutChanRefInput
    messChan?: ChanMessageCreateNestedManyWithoutChanRefInput
  }

  export type ChannelUncheckedCreateWithoutOwnerRefInput = {
    id?: number
    name: string
    type?: ChanType
    passwd?: string | null
    memChan?: ChanMemberUncheckedCreateNestedManyWithoutChanRefInput
    banChan?: ChanBanUncheckedCreateNestedManyWithoutChanRefInput
    messChan?: ChanMessageUncheckedCreateNestedManyWithoutChanRefInput
  }

  export type ChannelCreateOrConnectWithoutOwnerRefInput = {
    where: ChannelWhereUniqueInput
    create: XOR<ChannelCreateWithoutOwnerRefInput, ChannelUncheckedCreateWithoutOwnerRefInput>
  }

  export type ChannelCreateManyOwnerRefInputEnvelope = {
    data: Enumerable<ChannelCreateManyOwnerRefInput>
    skipDuplicates?: boolean
  }

  export type ChanMemberCreateWithoutMemberRefInput = {
    isAdmin?: boolean
    muteTime?: Date | string
    chanRef: ChannelCreateNestedOneWithoutMemChanInput
  }

  export type ChanMemberUncheckedCreateWithoutMemberRefInput = {
    chanId: number
    isAdmin?: boolean
    muteTime?: Date | string
  }

  export type ChanMemberCreateOrConnectWithoutMemberRefInput = {
    where: ChanMemberWhereUniqueInput
    create: XOR<ChanMemberCreateWithoutMemberRefInput, ChanMemberUncheckedCreateWithoutMemberRefInput>
  }

  export type ChanMemberCreateManyMemberRefInputEnvelope = {
    data: Enumerable<ChanMemberCreateManyMemberRefInput>
    skipDuplicates?: boolean
  }

  export type ChanBanCreateWithoutBannedRefInput = {
    chanRef: ChannelCreateNestedOneWithoutBanChanInput
  }

  export type ChanBanUncheckedCreateWithoutBannedRefInput = {
    chanId: number
  }

  export type ChanBanCreateOrConnectWithoutBannedRefInput = {
    where: ChanBanWhereUniqueInput
    create: XOR<ChanBanCreateWithoutBannedRefInput, ChanBanUncheckedCreateWithoutBannedRefInput>
  }

  export type ChanBanCreateManyBannedRefInputEnvelope = {
    data: Enumerable<ChanBanCreateManyBannedRefInput>
    skipDuplicates?: boolean
  }

  export type ChanMessageCreateWithoutSenderRefInput = {
    timeSent?: Date | string
    content: string
    chanRef: ChannelCreateNestedOneWithoutMessChanInput
  }

  export type ChanMessageUncheckedCreateWithoutSenderRefInput = {
    chanId: number
    timeSent?: Date | string
    content: string
  }

  export type ChanMessageCreateOrConnectWithoutSenderRefInput = {
    where: ChanMessageWhereUniqueInput
    create: XOR<ChanMessageCreateWithoutSenderRefInput, ChanMessageUncheckedCreateWithoutSenderRefInput>
  }

  export type ChanMessageCreateManySenderRefInputEnvelope = {
    data: Enumerable<ChanMessageCreateManySenderRefInput>
    skipDuplicates?: boolean
  }

  export type PrivMessageCreateWithoutSenderRefInput = {
    timeSent?: Date | string
    content: string
    receiptRef: UserCreateNestedOneWithoutPrivReceiptInput
  }

  export type PrivMessageUncheckedCreateWithoutSenderRefInput = {
    recipient: number
    timeSent?: Date | string
    content: string
  }

  export type PrivMessageCreateOrConnectWithoutSenderRefInput = {
    where: PrivMessageWhereUniqueInput
    create: XOR<PrivMessageCreateWithoutSenderRefInput, PrivMessageUncheckedCreateWithoutSenderRefInput>
  }

  export type PrivMessageCreateManySenderRefInputEnvelope = {
    data: Enumerable<PrivMessageCreateManySenderRefInput>
    skipDuplicates?: boolean
  }

  export type PrivMessageCreateWithoutReceiptRefInput = {
    timeSent?: Date | string
    content: string
    senderRef: UserCreateNestedOneWithoutPrivSenderInput
  }

  export type PrivMessageUncheckedCreateWithoutReceiptRefInput = {
    sender: number
    timeSent?: Date | string
    content: string
  }

  export type PrivMessageCreateOrConnectWithoutReceiptRefInput = {
    where: PrivMessageWhereUniqueInput
    create: XOR<PrivMessageCreateWithoutReceiptRefInput, PrivMessageUncheckedCreateWithoutReceiptRefInput>
  }

  export type PrivMessageCreateManyReceiptRefInputEnvelope = {
    data: Enumerable<PrivMessageCreateManyReceiptRefInput>
    skipDuplicates?: boolean
  }

  export type MatchHistoryCreateWithoutPlayer1RefInput = {
    id: number
    timeStart?: Date | string
    timeEnd?: Date | string | null
    player2Ref: UserCreateNestedOneWithoutPlayer2Input
    winnerRef?: UserCreateNestedOneWithoutWinnerInput
  }

  export type MatchHistoryUncheckedCreateWithoutPlayer1RefInput = {
    id: number
    player2: number
    timeStart?: Date | string
    timeEnd?: Date | string | null
    winner?: number | null
  }

  export type MatchHistoryCreateOrConnectWithoutPlayer1RefInput = {
    where: MatchHistoryWhereUniqueInput
    create: XOR<MatchHistoryCreateWithoutPlayer1RefInput, MatchHistoryUncheckedCreateWithoutPlayer1RefInput>
  }

  export type MatchHistoryCreateManyPlayer1RefInputEnvelope = {
    data: Enumerable<MatchHistoryCreateManyPlayer1RefInput>
    skipDuplicates?: boolean
  }

  export type MatchHistoryCreateWithoutPlayer2RefInput = {
    id: number
    timeStart?: Date | string
    timeEnd?: Date | string | null
    player1Ref: UserCreateNestedOneWithoutPlayer1Input
    winnerRef?: UserCreateNestedOneWithoutWinnerInput
  }

  export type MatchHistoryUncheckedCreateWithoutPlayer2RefInput = {
    id: number
    player1: number
    timeStart?: Date | string
    timeEnd?: Date | string | null
    winner?: number | null
  }

  export type MatchHistoryCreateOrConnectWithoutPlayer2RefInput = {
    where: MatchHistoryWhereUniqueInput
    create: XOR<MatchHistoryCreateWithoutPlayer2RefInput, MatchHistoryUncheckedCreateWithoutPlayer2RefInput>
  }

  export type MatchHistoryCreateManyPlayer2RefInputEnvelope = {
    data: Enumerable<MatchHistoryCreateManyPlayer2RefInput>
    skipDuplicates?: boolean
  }

  export type MatchHistoryCreateWithoutWinnerRefInput = {
    id: number
    timeStart?: Date | string
    timeEnd?: Date | string | null
    player1Ref: UserCreateNestedOneWithoutPlayer1Input
    player2Ref: UserCreateNestedOneWithoutPlayer2Input
  }

  export type MatchHistoryUncheckedCreateWithoutWinnerRefInput = {
    id: number
    player1: number
    player2: number
    timeStart?: Date | string
    timeEnd?: Date | string | null
  }

  export type MatchHistoryCreateOrConnectWithoutWinnerRefInput = {
    where: MatchHistoryWhereUniqueInput
    create: XOR<MatchHistoryCreateWithoutWinnerRefInput, MatchHistoryUncheckedCreateWithoutWinnerRefInput>
  }

  export type MatchHistoryCreateManyWinnerRefInputEnvelope = {
    data: Enumerable<MatchHistoryCreateManyWinnerRefInput>
    skipDuplicates?: boolean
  }

  export type FriendUpsertWithWhereUniqueWithoutRequesterRefInput = {
    where: FriendWhereUniqueInput
    update: XOR<FriendUpdateWithoutRequesterRefInput, FriendUncheckedUpdateWithoutRequesterRefInput>
    create: XOR<FriendCreateWithoutRequesterRefInput, FriendUncheckedCreateWithoutRequesterRefInput>
  }

  export type FriendUpdateWithWhereUniqueWithoutRequesterRefInput = {
    where: FriendWhereUniqueInput
    data: XOR<FriendUpdateWithoutRequesterRefInput, FriendUncheckedUpdateWithoutRequesterRefInput>
  }

  export type FriendUpdateManyWithWhereWithoutRequesterRefInput = {
    where: FriendScalarWhereInput
    data: XOR<FriendUpdateManyMutationInput, FriendUncheckedUpdateManyWithoutRequesterInput>
  }

  export type FriendScalarWhereInput = {
    AND?: Enumerable<FriendScalarWhereInput>
    OR?: Enumerable<FriendScalarWhereInput>
    NOT?: Enumerable<FriendScalarWhereInput>
    requester?: IntFilter | number
    requestee?: IntFilter | number
    status?: BoolFilter | boolean
  }

  export type FriendUpsertWithWhereUniqueWithoutRequesteeRefInput = {
    where: FriendWhereUniqueInput
    update: XOR<FriendUpdateWithoutRequesteeRefInput, FriendUncheckedUpdateWithoutRequesteeRefInput>
    create: XOR<FriendCreateWithoutRequesteeRefInput, FriendUncheckedCreateWithoutRequesteeRefInput>
  }

  export type FriendUpdateWithWhereUniqueWithoutRequesteeRefInput = {
    where: FriendWhereUniqueInput
    data: XOR<FriendUpdateWithoutRequesteeRefInput, FriendUncheckedUpdateWithoutRequesteeRefInput>
  }

  export type FriendUpdateManyWithWhereWithoutRequesteeRefInput = {
    where: FriendScalarWhereInput
    data: XOR<FriendUpdateManyMutationInput, FriendUncheckedUpdateManyWithoutRequesteeInput>
  }

  export type BlockedUpsertWithWhereUniqueWithoutBlockerRefInput = {
    where: BlockedWhereUniqueInput
    update: XOR<BlockedUpdateWithoutBlockerRefInput, BlockedUncheckedUpdateWithoutBlockerRefInput>
    create: XOR<BlockedCreateWithoutBlockerRefInput, BlockedUncheckedCreateWithoutBlockerRefInput>
  }

  export type BlockedUpdateWithWhereUniqueWithoutBlockerRefInput = {
    where: BlockedWhereUniqueInput
    data: XOR<BlockedUpdateWithoutBlockerRefInput, BlockedUncheckedUpdateWithoutBlockerRefInput>
  }

  export type BlockedUpdateManyWithWhereWithoutBlockerRefInput = {
    where: BlockedScalarWhereInput
    data: XOR<BlockedUpdateManyMutationInput, BlockedUncheckedUpdateManyWithoutBlockerInput>
  }

  export type BlockedScalarWhereInput = {
    AND?: Enumerable<BlockedScalarWhereInput>
    OR?: Enumerable<BlockedScalarWhereInput>
    NOT?: Enumerable<BlockedScalarWhereInput>
    blocker?: IntFilter | number
    blockee?: IntFilter | number
  }

  export type BlockedUpsertWithWhereUniqueWithoutBlockeeRefInput = {
    where: BlockedWhereUniqueInput
    update: XOR<BlockedUpdateWithoutBlockeeRefInput, BlockedUncheckedUpdateWithoutBlockeeRefInput>
    create: XOR<BlockedCreateWithoutBlockeeRefInput, BlockedUncheckedCreateWithoutBlockeeRefInput>
  }

  export type BlockedUpdateWithWhereUniqueWithoutBlockeeRefInput = {
    where: BlockedWhereUniqueInput
    data: XOR<BlockedUpdateWithoutBlockeeRefInput, BlockedUncheckedUpdateWithoutBlockeeRefInput>
  }

  export type BlockedUpdateManyWithWhereWithoutBlockeeRefInput = {
    where: BlockedScalarWhereInput
    data: XOR<BlockedUpdateManyMutationInput, BlockedUncheckedUpdateManyWithoutBlockeeInput>
  }

  export type ChannelUpsertWithWhereUniqueWithoutOwnerRefInput = {
    where: ChannelWhereUniqueInput
    update: XOR<ChannelUpdateWithoutOwnerRefInput, ChannelUncheckedUpdateWithoutOwnerRefInput>
    create: XOR<ChannelCreateWithoutOwnerRefInput, ChannelUncheckedCreateWithoutOwnerRefInput>
  }

  export type ChannelUpdateWithWhereUniqueWithoutOwnerRefInput = {
    where: ChannelWhereUniqueInput
    data: XOR<ChannelUpdateWithoutOwnerRefInput, ChannelUncheckedUpdateWithoutOwnerRefInput>
  }

  export type ChannelUpdateManyWithWhereWithoutOwnerRefInput = {
    where: ChannelScalarWhereInput
    data: XOR<ChannelUpdateManyMutationInput, ChannelUncheckedUpdateManyWithoutOwnerInput>
  }

  export type ChannelScalarWhereInput = {
    AND?: Enumerable<ChannelScalarWhereInput>
    OR?: Enumerable<ChannelScalarWhereInput>
    NOT?: Enumerable<ChannelScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    owner?: IntFilter | number
    type?: EnumChanTypeFilter | ChanType
    passwd?: StringNullableFilter | string | null
  }

  export type ChanMemberUpsertWithWhereUniqueWithoutMemberRefInput = {
    where: ChanMemberWhereUniqueInput
    update: XOR<ChanMemberUpdateWithoutMemberRefInput, ChanMemberUncheckedUpdateWithoutMemberRefInput>
    create: XOR<ChanMemberCreateWithoutMemberRefInput, ChanMemberUncheckedCreateWithoutMemberRefInput>
  }

  export type ChanMemberUpdateWithWhereUniqueWithoutMemberRefInput = {
    where: ChanMemberWhereUniqueInput
    data: XOR<ChanMemberUpdateWithoutMemberRefInput, ChanMemberUncheckedUpdateWithoutMemberRefInput>
  }

  export type ChanMemberUpdateManyWithWhereWithoutMemberRefInput = {
    where: ChanMemberScalarWhereInput
    data: XOR<ChanMemberUpdateManyMutationInput, ChanMemberUncheckedUpdateManyWithoutMemberInput>
  }

  export type ChanMemberScalarWhereInput = {
    AND?: Enumerable<ChanMemberScalarWhereInput>
    OR?: Enumerable<ChanMemberScalarWhereInput>
    NOT?: Enumerable<ChanMemberScalarWhereInput>
    chanId?: IntFilter | number
    member?: IntFilter | number
    isAdmin?: BoolFilter | boolean
    muteTime?: DateTimeFilter | Date | string
  }

  export type ChanBanUpsertWithWhereUniqueWithoutBannedRefInput = {
    where: ChanBanWhereUniqueInput
    update: XOR<ChanBanUpdateWithoutBannedRefInput, ChanBanUncheckedUpdateWithoutBannedRefInput>
    create: XOR<ChanBanCreateWithoutBannedRefInput, ChanBanUncheckedCreateWithoutBannedRefInput>
  }

  export type ChanBanUpdateWithWhereUniqueWithoutBannedRefInput = {
    where: ChanBanWhereUniqueInput
    data: XOR<ChanBanUpdateWithoutBannedRefInput, ChanBanUncheckedUpdateWithoutBannedRefInput>
  }

  export type ChanBanUpdateManyWithWhereWithoutBannedRefInput = {
    where: ChanBanScalarWhereInput
    data: XOR<ChanBanUpdateManyMutationInput, ChanBanUncheckedUpdateManyWithoutBannedInput>
  }

  export type ChanBanScalarWhereInput = {
    AND?: Enumerable<ChanBanScalarWhereInput>
    OR?: Enumerable<ChanBanScalarWhereInput>
    NOT?: Enumerable<ChanBanScalarWhereInput>
    chanId?: IntFilter | number
    bannedUser?: IntFilter | number
  }

  export type ChanMessageUpsertWithWhereUniqueWithoutSenderRefInput = {
    where: ChanMessageWhereUniqueInput
    update: XOR<ChanMessageUpdateWithoutSenderRefInput, ChanMessageUncheckedUpdateWithoutSenderRefInput>
    create: XOR<ChanMessageCreateWithoutSenderRefInput, ChanMessageUncheckedCreateWithoutSenderRefInput>
  }

  export type ChanMessageUpdateWithWhereUniqueWithoutSenderRefInput = {
    where: ChanMessageWhereUniqueInput
    data: XOR<ChanMessageUpdateWithoutSenderRefInput, ChanMessageUncheckedUpdateWithoutSenderRefInput>
  }

  export type ChanMessageUpdateManyWithWhereWithoutSenderRefInput = {
    where: ChanMessageScalarWhereInput
    data: XOR<ChanMessageUpdateManyMutationInput, ChanMessageUncheckedUpdateManyWithoutChanSenderInput>
  }

  export type ChanMessageScalarWhereInput = {
    AND?: Enumerable<ChanMessageScalarWhereInput>
    OR?: Enumerable<ChanMessageScalarWhereInput>
    NOT?: Enumerable<ChanMessageScalarWhereInput>
    sender?: IntFilter | number
    chanId?: IntFilter | number
    timeSent?: DateTimeFilter | Date | string
    content?: StringFilter | string
  }

  export type PrivMessageUpsertWithWhereUniqueWithoutSenderRefInput = {
    where: PrivMessageWhereUniqueInput
    update: XOR<PrivMessageUpdateWithoutSenderRefInput, PrivMessageUncheckedUpdateWithoutSenderRefInput>
    create: XOR<PrivMessageCreateWithoutSenderRefInput, PrivMessageUncheckedCreateWithoutSenderRefInput>
  }

  export type PrivMessageUpdateWithWhereUniqueWithoutSenderRefInput = {
    where: PrivMessageWhereUniqueInput
    data: XOR<PrivMessageUpdateWithoutSenderRefInput, PrivMessageUncheckedUpdateWithoutSenderRefInput>
  }

  export type PrivMessageUpdateManyWithWhereWithoutSenderRefInput = {
    where: PrivMessageScalarWhereInput
    data: XOR<PrivMessageUpdateManyMutationInput, PrivMessageUncheckedUpdateManyWithoutPrivSenderInput>
  }

  export type PrivMessageScalarWhereInput = {
    AND?: Enumerable<PrivMessageScalarWhereInput>
    OR?: Enumerable<PrivMessageScalarWhereInput>
    NOT?: Enumerable<PrivMessageScalarWhereInput>
    sender?: IntFilter | number
    recipient?: IntFilter | number
    timeSent?: DateTimeFilter | Date | string
    content?: StringFilter | string
  }

  export type PrivMessageUpsertWithWhereUniqueWithoutReceiptRefInput = {
    where: PrivMessageWhereUniqueInput
    update: XOR<PrivMessageUpdateWithoutReceiptRefInput, PrivMessageUncheckedUpdateWithoutReceiptRefInput>
    create: XOR<PrivMessageCreateWithoutReceiptRefInput, PrivMessageUncheckedCreateWithoutReceiptRefInput>
  }

  export type PrivMessageUpdateWithWhereUniqueWithoutReceiptRefInput = {
    where: PrivMessageWhereUniqueInput
    data: XOR<PrivMessageUpdateWithoutReceiptRefInput, PrivMessageUncheckedUpdateWithoutReceiptRefInput>
  }

  export type PrivMessageUpdateManyWithWhereWithoutReceiptRefInput = {
    where: PrivMessageScalarWhereInput
    data: XOR<PrivMessageUpdateManyMutationInput, PrivMessageUncheckedUpdateManyWithoutPrivReceiptInput>
  }

  export type MatchHistoryUpsertWithWhereUniqueWithoutPlayer1RefInput = {
    where: MatchHistoryWhereUniqueInput
    update: XOR<MatchHistoryUpdateWithoutPlayer1RefInput, MatchHistoryUncheckedUpdateWithoutPlayer1RefInput>
    create: XOR<MatchHistoryCreateWithoutPlayer1RefInput, MatchHistoryUncheckedCreateWithoutPlayer1RefInput>
  }

  export type MatchHistoryUpdateWithWhereUniqueWithoutPlayer1RefInput = {
    where: MatchHistoryWhereUniqueInput
    data: XOR<MatchHistoryUpdateWithoutPlayer1RefInput, MatchHistoryUncheckedUpdateWithoutPlayer1RefInput>
  }

  export type MatchHistoryUpdateManyWithWhereWithoutPlayer1RefInput = {
    where: MatchHistoryScalarWhereInput
    data: XOR<MatchHistoryUpdateManyMutationInput, MatchHistoryUncheckedUpdateManyWithoutPlayer1Input>
  }

  export type MatchHistoryScalarWhereInput = {
    AND?: Enumerable<MatchHistoryScalarWhereInput>
    OR?: Enumerable<MatchHistoryScalarWhereInput>
    NOT?: Enumerable<MatchHistoryScalarWhereInput>
    id?: IntFilter | number
    player1?: IntFilter | number
    player2?: IntFilter | number
    timeStart?: DateTimeFilter | Date | string
    timeEnd?: DateTimeNullableFilter | Date | string | null
    winner?: IntNullableFilter | number | null
  }

  export type MatchHistoryUpsertWithWhereUniqueWithoutPlayer2RefInput = {
    where: MatchHistoryWhereUniqueInput
    update: XOR<MatchHistoryUpdateWithoutPlayer2RefInput, MatchHistoryUncheckedUpdateWithoutPlayer2RefInput>
    create: XOR<MatchHistoryCreateWithoutPlayer2RefInput, MatchHistoryUncheckedCreateWithoutPlayer2RefInput>
  }

  export type MatchHistoryUpdateWithWhereUniqueWithoutPlayer2RefInput = {
    where: MatchHistoryWhereUniqueInput
    data: XOR<MatchHistoryUpdateWithoutPlayer2RefInput, MatchHistoryUncheckedUpdateWithoutPlayer2RefInput>
  }

  export type MatchHistoryUpdateManyWithWhereWithoutPlayer2RefInput = {
    where: MatchHistoryScalarWhereInput
    data: XOR<MatchHistoryUpdateManyMutationInput, MatchHistoryUncheckedUpdateManyWithoutPlayer2Input>
  }

  export type MatchHistoryUpsertWithWhereUniqueWithoutWinnerRefInput = {
    where: MatchHistoryWhereUniqueInput
    update: XOR<MatchHistoryUpdateWithoutWinnerRefInput, MatchHistoryUncheckedUpdateWithoutWinnerRefInput>
    create: XOR<MatchHistoryCreateWithoutWinnerRefInput, MatchHistoryUncheckedCreateWithoutWinnerRefInput>
  }

  export type MatchHistoryUpdateWithWhereUniqueWithoutWinnerRefInput = {
    where: MatchHistoryWhereUniqueInput
    data: XOR<MatchHistoryUpdateWithoutWinnerRefInput, MatchHistoryUncheckedUpdateWithoutWinnerRefInput>
  }

  export type MatchHistoryUpdateManyWithWhereWithoutWinnerRefInput = {
    where: MatchHistoryScalarWhereInput
    data: XOR<MatchHistoryUpdateManyMutationInput, MatchHistoryUncheckedUpdateManyWithoutWinnerInput>
  }

  export type UserCreateWithoutRequesterInput = {
    login?: string | null
    nickname: string
    avatarURL: string
    requestee?: FriendCreateNestedManyWithoutRequesteeRefInput
    blocker?: BlockedCreateNestedManyWithoutBlockerRefInput
    blockee?: BlockedCreateNestedManyWithoutBlockeeRefInput
    owner?: ChannelCreateNestedManyWithoutOwnerRefInput
    member?: ChanMemberCreateNestedManyWithoutMemberRefInput
    banned?: ChanBanCreateNestedManyWithoutBannedRefInput
    chanSender?: ChanMessageCreateNestedManyWithoutSenderRefInput
    privSender?: PrivMessageCreateNestedManyWithoutSenderRefInput
    privReceipt?: PrivMessageCreateNestedManyWithoutReceiptRefInput
    player1?: MatchHistoryCreateNestedManyWithoutPlayer1RefInput
    player2?: MatchHistoryCreateNestedManyWithoutPlayer2RefInput
    winner?: MatchHistoryCreateNestedManyWithoutWinnerRefInput
  }

  export type UserUncheckedCreateWithoutRequesterInput = {
    id?: number
    login?: string | null
    nickname: string
    avatarURL: string
    requestee?: FriendUncheckedCreateNestedManyWithoutRequesteeRefInput
    blocker?: BlockedUncheckedCreateNestedManyWithoutBlockerRefInput
    blockee?: BlockedUncheckedCreateNestedManyWithoutBlockeeRefInput
    owner?: ChannelUncheckedCreateNestedManyWithoutOwnerRefInput
    member?: ChanMemberUncheckedCreateNestedManyWithoutMemberRefInput
    banned?: ChanBanUncheckedCreateNestedManyWithoutBannedRefInput
    chanSender?: ChanMessageUncheckedCreateNestedManyWithoutSenderRefInput
    privSender?: PrivMessageUncheckedCreateNestedManyWithoutSenderRefInput
    privReceipt?: PrivMessageUncheckedCreateNestedManyWithoutReceiptRefInput
    player1?: MatchHistoryUncheckedCreateNestedManyWithoutPlayer1RefInput
    player2?: MatchHistoryUncheckedCreateNestedManyWithoutPlayer2RefInput
    winner?: MatchHistoryUncheckedCreateNestedManyWithoutWinnerRefInput
  }

  export type UserCreateOrConnectWithoutRequesterInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRequesterInput, UserUncheckedCreateWithoutRequesterInput>
  }

  export type UserCreateWithoutRequesteeInput = {
    login?: string | null
    nickname: string
    avatarURL: string
    requester?: FriendCreateNestedManyWithoutRequesterRefInput
    blocker?: BlockedCreateNestedManyWithoutBlockerRefInput
    blockee?: BlockedCreateNestedManyWithoutBlockeeRefInput
    owner?: ChannelCreateNestedManyWithoutOwnerRefInput
    member?: ChanMemberCreateNestedManyWithoutMemberRefInput
    banned?: ChanBanCreateNestedManyWithoutBannedRefInput
    chanSender?: ChanMessageCreateNestedManyWithoutSenderRefInput
    privSender?: PrivMessageCreateNestedManyWithoutSenderRefInput
    privReceipt?: PrivMessageCreateNestedManyWithoutReceiptRefInput
    player1?: MatchHistoryCreateNestedManyWithoutPlayer1RefInput
    player2?: MatchHistoryCreateNestedManyWithoutPlayer2RefInput
    winner?: MatchHistoryCreateNestedManyWithoutWinnerRefInput
  }

  export type UserUncheckedCreateWithoutRequesteeInput = {
    id?: number
    login?: string | null
    nickname: string
    avatarURL: string
    requester?: FriendUncheckedCreateNestedManyWithoutRequesterRefInput
    blocker?: BlockedUncheckedCreateNestedManyWithoutBlockerRefInput
    blockee?: BlockedUncheckedCreateNestedManyWithoutBlockeeRefInput
    owner?: ChannelUncheckedCreateNestedManyWithoutOwnerRefInput
    member?: ChanMemberUncheckedCreateNestedManyWithoutMemberRefInput
    banned?: ChanBanUncheckedCreateNestedManyWithoutBannedRefInput
    chanSender?: ChanMessageUncheckedCreateNestedManyWithoutSenderRefInput
    privSender?: PrivMessageUncheckedCreateNestedManyWithoutSenderRefInput
    privReceipt?: PrivMessageUncheckedCreateNestedManyWithoutReceiptRefInput
    player1?: MatchHistoryUncheckedCreateNestedManyWithoutPlayer1RefInput
    player2?: MatchHistoryUncheckedCreateNestedManyWithoutPlayer2RefInput
    winner?: MatchHistoryUncheckedCreateNestedManyWithoutWinnerRefInput
  }

  export type UserCreateOrConnectWithoutRequesteeInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRequesteeInput, UserUncheckedCreateWithoutRequesteeInput>
  }

  export type UserUpsertWithoutRequesterInput = {
    update: XOR<UserUpdateWithoutRequesterInput, UserUncheckedUpdateWithoutRequesterInput>
    create: XOR<UserCreateWithoutRequesterInput, UserUncheckedCreateWithoutRequesterInput>
  }

  export type UserUpdateWithoutRequesterInput = {
    login?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatarURL?: StringFieldUpdateOperationsInput | string
    requestee?: FriendUpdateManyWithoutRequesteeRefNestedInput
    blocker?: BlockedUpdateManyWithoutBlockerRefNestedInput
    blockee?: BlockedUpdateManyWithoutBlockeeRefNestedInput
    owner?: ChannelUpdateManyWithoutOwnerRefNestedInput
    member?: ChanMemberUpdateManyWithoutMemberRefNestedInput
    banned?: ChanBanUpdateManyWithoutBannedRefNestedInput
    chanSender?: ChanMessageUpdateManyWithoutSenderRefNestedInput
    privSender?: PrivMessageUpdateManyWithoutSenderRefNestedInput
    privReceipt?: PrivMessageUpdateManyWithoutReceiptRefNestedInput
    player1?: MatchHistoryUpdateManyWithoutPlayer1RefNestedInput
    player2?: MatchHistoryUpdateManyWithoutPlayer2RefNestedInput
    winner?: MatchHistoryUpdateManyWithoutWinnerRefNestedInput
  }

  export type UserUncheckedUpdateWithoutRequesterInput = {
    id?: IntFieldUpdateOperationsInput | number
    login?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatarURL?: StringFieldUpdateOperationsInput | string
    requestee?: FriendUncheckedUpdateManyWithoutRequesteeRefNestedInput
    blocker?: BlockedUncheckedUpdateManyWithoutBlockerRefNestedInput
    blockee?: BlockedUncheckedUpdateManyWithoutBlockeeRefNestedInput
    owner?: ChannelUncheckedUpdateManyWithoutOwnerRefNestedInput
    member?: ChanMemberUncheckedUpdateManyWithoutMemberRefNestedInput
    banned?: ChanBanUncheckedUpdateManyWithoutBannedRefNestedInput
    chanSender?: ChanMessageUncheckedUpdateManyWithoutSenderRefNestedInput
    privSender?: PrivMessageUncheckedUpdateManyWithoutSenderRefNestedInput
    privReceipt?: PrivMessageUncheckedUpdateManyWithoutReceiptRefNestedInput
    player1?: MatchHistoryUncheckedUpdateManyWithoutPlayer1RefNestedInput
    player2?: MatchHistoryUncheckedUpdateManyWithoutPlayer2RefNestedInput
    winner?: MatchHistoryUncheckedUpdateManyWithoutWinnerRefNestedInput
  }

  export type UserUpsertWithoutRequesteeInput = {
    update: XOR<UserUpdateWithoutRequesteeInput, UserUncheckedUpdateWithoutRequesteeInput>
    create: XOR<UserCreateWithoutRequesteeInput, UserUncheckedCreateWithoutRequesteeInput>
  }

  export type UserUpdateWithoutRequesteeInput = {
    login?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatarURL?: StringFieldUpdateOperationsInput | string
    requester?: FriendUpdateManyWithoutRequesterRefNestedInput
    blocker?: BlockedUpdateManyWithoutBlockerRefNestedInput
    blockee?: BlockedUpdateManyWithoutBlockeeRefNestedInput
    owner?: ChannelUpdateManyWithoutOwnerRefNestedInput
    member?: ChanMemberUpdateManyWithoutMemberRefNestedInput
    banned?: ChanBanUpdateManyWithoutBannedRefNestedInput
    chanSender?: ChanMessageUpdateManyWithoutSenderRefNestedInput
    privSender?: PrivMessageUpdateManyWithoutSenderRefNestedInput
    privReceipt?: PrivMessageUpdateManyWithoutReceiptRefNestedInput
    player1?: MatchHistoryUpdateManyWithoutPlayer1RefNestedInput
    player2?: MatchHistoryUpdateManyWithoutPlayer2RefNestedInput
    winner?: MatchHistoryUpdateManyWithoutWinnerRefNestedInput
  }

  export type UserUncheckedUpdateWithoutRequesteeInput = {
    id?: IntFieldUpdateOperationsInput | number
    login?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatarURL?: StringFieldUpdateOperationsInput | string
    requester?: FriendUncheckedUpdateManyWithoutRequesterRefNestedInput
    blocker?: BlockedUncheckedUpdateManyWithoutBlockerRefNestedInput
    blockee?: BlockedUncheckedUpdateManyWithoutBlockeeRefNestedInput
    owner?: ChannelUncheckedUpdateManyWithoutOwnerRefNestedInput
    member?: ChanMemberUncheckedUpdateManyWithoutMemberRefNestedInput
    banned?: ChanBanUncheckedUpdateManyWithoutBannedRefNestedInput
    chanSender?: ChanMessageUncheckedUpdateManyWithoutSenderRefNestedInput
    privSender?: PrivMessageUncheckedUpdateManyWithoutSenderRefNestedInput
    privReceipt?: PrivMessageUncheckedUpdateManyWithoutReceiptRefNestedInput
    player1?: MatchHistoryUncheckedUpdateManyWithoutPlayer1RefNestedInput
    player2?: MatchHistoryUncheckedUpdateManyWithoutPlayer2RefNestedInput
    winner?: MatchHistoryUncheckedUpdateManyWithoutWinnerRefNestedInput
  }

  export type UserCreateWithoutBlockerInput = {
    login?: string | null
    nickname: string
    avatarURL: string
    requester?: FriendCreateNestedManyWithoutRequesterRefInput
    requestee?: FriendCreateNestedManyWithoutRequesteeRefInput
    blockee?: BlockedCreateNestedManyWithoutBlockeeRefInput
    owner?: ChannelCreateNestedManyWithoutOwnerRefInput
    member?: ChanMemberCreateNestedManyWithoutMemberRefInput
    banned?: ChanBanCreateNestedManyWithoutBannedRefInput
    chanSender?: ChanMessageCreateNestedManyWithoutSenderRefInput
    privSender?: PrivMessageCreateNestedManyWithoutSenderRefInput
    privReceipt?: PrivMessageCreateNestedManyWithoutReceiptRefInput
    player1?: MatchHistoryCreateNestedManyWithoutPlayer1RefInput
    player2?: MatchHistoryCreateNestedManyWithoutPlayer2RefInput
    winner?: MatchHistoryCreateNestedManyWithoutWinnerRefInput
  }

  export type UserUncheckedCreateWithoutBlockerInput = {
    id?: number
    login?: string | null
    nickname: string
    avatarURL: string
    requester?: FriendUncheckedCreateNestedManyWithoutRequesterRefInput
    requestee?: FriendUncheckedCreateNestedManyWithoutRequesteeRefInput
    blockee?: BlockedUncheckedCreateNestedManyWithoutBlockeeRefInput
    owner?: ChannelUncheckedCreateNestedManyWithoutOwnerRefInput
    member?: ChanMemberUncheckedCreateNestedManyWithoutMemberRefInput
    banned?: ChanBanUncheckedCreateNestedManyWithoutBannedRefInput
    chanSender?: ChanMessageUncheckedCreateNestedManyWithoutSenderRefInput
    privSender?: PrivMessageUncheckedCreateNestedManyWithoutSenderRefInput
    privReceipt?: PrivMessageUncheckedCreateNestedManyWithoutReceiptRefInput
    player1?: MatchHistoryUncheckedCreateNestedManyWithoutPlayer1RefInput
    player2?: MatchHistoryUncheckedCreateNestedManyWithoutPlayer2RefInput
    winner?: MatchHistoryUncheckedCreateNestedManyWithoutWinnerRefInput
  }

  export type UserCreateOrConnectWithoutBlockerInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBlockerInput, UserUncheckedCreateWithoutBlockerInput>
  }

  export type UserCreateWithoutBlockeeInput = {
    login?: string | null
    nickname: string
    avatarURL: string
    requester?: FriendCreateNestedManyWithoutRequesterRefInput
    requestee?: FriendCreateNestedManyWithoutRequesteeRefInput
    blocker?: BlockedCreateNestedManyWithoutBlockerRefInput
    owner?: ChannelCreateNestedManyWithoutOwnerRefInput
    member?: ChanMemberCreateNestedManyWithoutMemberRefInput
    banned?: ChanBanCreateNestedManyWithoutBannedRefInput
    chanSender?: ChanMessageCreateNestedManyWithoutSenderRefInput
    privSender?: PrivMessageCreateNestedManyWithoutSenderRefInput
    privReceipt?: PrivMessageCreateNestedManyWithoutReceiptRefInput
    player1?: MatchHistoryCreateNestedManyWithoutPlayer1RefInput
    player2?: MatchHistoryCreateNestedManyWithoutPlayer2RefInput
    winner?: MatchHistoryCreateNestedManyWithoutWinnerRefInput
  }

  export type UserUncheckedCreateWithoutBlockeeInput = {
    id?: number
    login?: string | null
    nickname: string
    avatarURL: string
    requester?: FriendUncheckedCreateNestedManyWithoutRequesterRefInput
    requestee?: FriendUncheckedCreateNestedManyWithoutRequesteeRefInput
    blocker?: BlockedUncheckedCreateNestedManyWithoutBlockerRefInput
    owner?: ChannelUncheckedCreateNestedManyWithoutOwnerRefInput
    member?: ChanMemberUncheckedCreateNestedManyWithoutMemberRefInput
    banned?: ChanBanUncheckedCreateNestedManyWithoutBannedRefInput
    chanSender?: ChanMessageUncheckedCreateNestedManyWithoutSenderRefInput
    privSender?: PrivMessageUncheckedCreateNestedManyWithoutSenderRefInput
    privReceipt?: PrivMessageUncheckedCreateNestedManyWithoutReceiptRefInput
    player1?: MatchHistoryUncheckedCreateNestedManyWithoutPlayer1RefInput
    player2?: MatchHistoryUncheckedCreateNestedManyWithoutPlayer2RefInput
    winner?: MatchHistoryUncheckedCreateNestedManyWithoutWinnerRefInput
  }

  export type UserCreateOrConnectWithoutBlockeeInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBlockeeInput, UserUncheckedCreateWithoutBlockeeInput>
  }

  export type UserUpsertWithoutBlockerInput = {
    update: XOR<UserUpdateWithoutBlockerInput, UserUncheckedUpdateWithoutBlockerInput>
    create: XOR<UserCreateWithoutBlockerInput, UserUncheckedCreateWithoutBlockerInput>
  }

  export type UserUpdateWithoutBlockerInput = {
    login?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatarURL?: StringFieldUpdateOperationsInput | string
    requester?: FriendUpdateManyWithoutRequesterRefNestedInput
    requestee?: FriendUpdateManyWithoutRequesteeRefNestedInput
    blockee?: BlockedUpdateManyWithoutBlockeeRefNestedInput
    owner?: ChannelUpdateManyWithoutOwnerRefNestedInput
    member?: ChanMemberUpdateManyWithoutMemberRefNestedInput
    banned?: ChanBanUpdateManyWithoutBannedRefNestedInput
    chanSender?: ChanMessageUpdateManyWithoutSenderRefNestedInput
    privSender?: PrivMessageUpdateManyWithoutSenderRefNestedInput
    privReceipt?: PrivMessageUpdateManyWithoutReceiptRefNestedInput
    player1?: MatchHistoryUpdateManyWithoutPlayer1RefNestedInput
    player2?: MatchHistoryUpdateManyWithoutPlayer2RefNestedInput
    winner?: MatchHistoryUpdateManyWithoutWinnerRefNestedInput
  }

  export type UserUncheckedUpdateWithoutBlockerInput = {
    id?: IntFieldUpdateOperationsInput | number
    login?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatarURL?: StringFieldUpdateOperationsInput | string
    requester?: FriendUncheckedUpdateManyWithoutRequesterRefNestedInput
    requestee?: FriendUncheckedUpdateManyWithoutRequesteeRefNestedInput
    blockee?: BlockedUncheckedUpdateManyWithoutBlockeeRefNestedInput
    owner?: ChannelUncheckedUpdateManyWithoutOwnerRefNestedInput
    member?: ChanMemberUncheckedUpdateManyWithoutMemberRefNestedInput
    banned?: ChanBanUncheckedUpdateManyWithoutBannedRefNestedInput
    chanSender?: ChanMessageUncheckedUpdateManyWithoutSenderRefNestedInput
    privSender?: PrivMessageUncheckedUpdateManyWithoutSenderRefNestedInput
    privReceipt?: PrivMessageUncheckedUpdateManyWithoutReceiptRefNestedInput
    player1?: MatchHistoryUncheckedUpdateManyWithoutPlayer1RefNestedInput
    player2?: MatchHistoryUncheckedUpdateManyWithoutPlayer2RefNestedInput
    winner?: MatchHistoryUncheckedUpdateManyWithoutWinnerRefNestedInput
  }

  export type UserUpsertWithoutBlockeeInput = {
    update: XOR<UserUpdateWithoutBlockeeInput, UserUncheckedUpdateWithoutBlockeeInput>
    create: XOR<UserCreateWithoutBlockeeInput, UserUncheckedCreateWithoutBlockeeInput>
  }

  export type UserUpdateWithoutBlockeeInput = {
    login?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatarURL?: StringFieldUpdateOperationsInput | string
    requester?: FriendUpdateManyWithoutRequesterRefNestedInput
    requestee?: FriendUpdateManyWithoutRequesteeRefNestedInput
    blocker?: BlockedUpdateManyWithoutBlockerRefNestedInput
    owner?: ChannelUpdateManyWithoutOwnerRefNestedInput
    member?: ChanMemberUpdateManyWithoutMemberRefNestedInput
    banned?: ChanBanUpdateManyWithoutBannedRefNestedInput
    chanSender?: ChanMessageUpdateManyWithoutSenderRefNestedInput
    privSender?: PrivMessageUpdateManyWithoutSenderRefNestedInput
    privReceipt?: PrivMessageUpdateManyWithoutReceiptRefNestedInput
    player1?: MatchHistoryUpdateManyWithoutPlayer1RefNestedInput
    player2?: MatchHistoryUpdateManyWithoutPlayer2RefNestedInput
    winner?: MatchHistoryUpdateManyWithoutWinnerRefNestedInput
  }

  export type UserUncheckedUpdateWithoutBlockeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    login?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatarURL?: StringFieldUpdateOperationsInput | string
    requester?: FriendUncheckedUpdateManyWithoutRequesterRefNestedInput
    requestee?: FriendUncheckedUpdateManyWithoutRequesteeRefNestedInput
    blocker?: BlockedUncheckedUpdateManyWithoutBlockerRefNestedInput
    owner?: ChannelUncheckedUpdateManyWithoutOwnerRefNestedInput
    member?: ChanMemberUncheckedUpdateManyWithoutMemberRefNestedInput
    banned?: ChanBanUncheckedUpdateManyWithoutBannedRefNestedInput
    chanSender?: ChanMessageUncheckedUpdateManyWithoutSenderRefNestedInput
    privSender?: PrivMessageUncheckedUpdateManyWithoutSenderRefNestedInput
    privReceipt?: PrivMessageUncheckedUpdateManyWithoutReceiptRefNestedInput
    player1?: MatchHistoryUncheckedUpdateManyWithoutPlayer1RefNestedInput
    player2?: MatchHistoryUncheckedUpdateManyWithoutPlayer2RefNestedInput
    winner?: MatchHistoryUncheckedUpdateManyWithoutWinnerRefNestedInput
  }

  export type UserCreateWithoutOwnerInput = {
    login?: string | null
    nickname: string
    avatarURL: string
    requester?: FriendCreateNestedManyWithoutRequesterRefInput
    requestee?: FriendCreateNestedManyWithoutRequesteeRefInput
    blocker?: BlockedCreateNestedManyWithoutBlockerRefInput
    blockee?: BlockedCreateNestedManyWithoutBlockeeRefInput
    member?: ChanMemberCreateNestedManyWithoutMemberRefInput
    banned?: ChanBanCreateNestedManyWithoutBannedRefInput
    chanSender?: ChanMessageCreateNestedManyWithoutSenderRefInput
    privSender?: PrivMessageCreateNestedManyWithoutSenderRefInput
    privReceipt?: PrivMessageCreateNestedManyWithoutReceiptRefInput
    player1?: MatchHistoryCreateNestedManyWithoutPlayer1RefInput
    player2?: MatchHistoryCreateNestedManyWithoutPlayer2RefInput
    winner?: MatchHistoryCreateNestedManyWithoutWinnerRefInput
  }

  export type UserUncheckedCreateWithoutOwnerInput = {
    id?: number
    login?: string | null
    nickname: string
    avatarURL: string
    requester?: FriendUncheckedCreateNestedManyWithoutRequesterRefInput
    requestee?: FriendUncheckedCreateNestedManyWithoutRequesteeRefInput
    blocker?: BlockedUncheckedCreateNestedManyWithoutBlockerRefInput
    blockee?: BlockedUncheckedCreateNestedManyWithoutBlockeeRefInput
    member?: ChanMemberUncheckedCreateNestedManyWithoutMemberRefInput
    banned?: ChanBanUncheckedCreateNestedManyWithoutBannedRefInput
    chanSender?: ChanMessageUncheckedCreateNestedManyWithoutSenderRefInput
    privSender?: PrivMessageUncheckedCreateNestedManyWithoutSenderRefInput
    privReceipt?: PrivMessageUncheckedCreateNestedManyWithoutReceiptRefInput
    player1?: MatchHistoryUncheckedCreateNestedManyWithoutPlayer1RefInput
    player2?: MatchHistoryUncheckedCreateNestedManyWithoutPlayer2RefInput
    winner?: MatchHistoryUncheckedCreateNestedManyWithoutWinnerRefInput
  }

  export type UserCreateOrConnectWithoutOwnerInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOwnerInput, UserUncheckedCreateWithoutOwnerInput>
  }

  export type ChanMemberCreateWithoutChanRefInput = {
    isAdmin?: boolean
    muteTime?: Date | string
    memberRef: UserCreateNestedOneWithoutMemberInput
  }

  export type ChanMemberUncheckedCreateWithoutChanRefInput = {
    member: number
    isAdmin?: boolean
    muteTime?: Date | string
  }

  export type ChanMemberCreateOrConnectWithoutChanRefInput = {
    where: ChanMemberWhereUniqueInput
    create: XOR<ChanMemberCreateWithoutChanRefInput, ChanMemberUncheckedCreateWithoutChanRefInput>
  }

  export type ChanMemberCreateManyChanRefInputEnvelope = {
    data: Enumerable<ChanMemberCreateManyChanRefInput>
    skipDuplicates?: boolean
  }

  export type ChanBanCreateWithoutChanRefInput = {
    bannedRef: UserCreateNestedOneWithoutBannedInput
  }

  export type ChanBanUncheckedCreateWithoutChanRefInput = {
    bannedUser: number
  }

  export type ChanBanCreateOrConnectWithoutChanRefInput = {
    where: ChanBanWhereUniqueInput
    create: XOR<ChanBanCreateWithoutChanRefInput, ChanBanUncheckedCreateWithoutChanRefInput>
  }

  export type ChanBanCreateManyChanRefInputEnvelope = {
    data: Enumerable<ChanBanCreateManyChanRefInput>
    skipDuplicates?: boolean
  }

  export type ChanMessageCreateWithoutChanRefInput = {
    timeSent?: Date | string
    content: string
    senderRef: UserCreateNestedOneWithoutChanSenderInput
  }

  export type ChanMessageUncheckedCreateWithoutChanRefInput = {
    sender: number
    timeSent?: Date | string
    content: string
  }

  export type ChanMessageCreateOrConnectWithoutChanRefInput = {
    where: ChanMessageWhereUniqueInput
    create: XOR<ChanMessageCreateWithoutChanRefInput, ChanMessageUncheckedCreateWithoutChanRefInput>
  }

  export type ChanMessageCreateManyChanRefInputEnvelope = {
    data: Enumerable<ChanMessageCreateManyChanRefInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutOwnerInput = {
    update: XOR<UserUpdateWithoutOwnerInput, UserUncheckedUpdateWithoutOwnerInput>
    create: XOR<UserCreateWithoutOwnerInput, UserUncheckedCreateWithoutOwnerInput>
  }

  export type UserUpdateWithoutOwnerInput = {
    login?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatarURL?: StringFieldUpdateOperationsInput | string
    requester?: FriendUpdateManyWithoutRequesterRefNestedInput
    requestee?: FriendUpdateManyWithoutRequesteeRefNestedInput
    blocker?: BlockedUpdateManyWithoutBlockerRefNestedInput
    blockee?: BlockedUpdateManyWithoutBlockeeRefNestedInput
    member?: ChanMemberUpdateManyWithoutMemberRefNestedInput
    banned?: ChanBanUpdateManyWithoutBannedRefNestedInput
    chanSender?: ChanMessageUpdateManyWithoutSenderRefNestedInput
    privSender?: PrivMessageUpdateManyWithoutSenderRefNestedInput
    privReceipt?: PrivMessageUpdateManyWithoutReceiptRefNestedInput
    player1?: MatchHistoryUpdateManyWithoutPlayer1RefNestedInput
    player2?: MatchHistoryUpdateManyWithoutPlayer2RefNestedInput
    winner?: MatchHistoryUpdateManyWithoutWinnerRefNestedInput
  }

  export type UserUncheckedUpdateWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    login?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatarURL?: StringFieldUpdateOperationsInput | string
    requester?: FriendUncheckedUpdateManyWithoutRequesterRefNestedInput
    requestee?: FriendUncheckedUpdateManyWithoutRequesteeRefNestedInput
    blocker?: BlockedUncheckedUpdateManyWithoutBlockerRefNestedInput
    blockee?: BlockedUncheckedUpdateManyWithoutBlockeeRefNestedInput
    member?: ChanMemberUncheckedUpdateManyWithoutMemberRefNestedInput
    banned?: ChanBanUncheckedUpdateManyWithoutBannedRefNestedInput
    chanSender?: ChanMessageUncheckedUpdateManyWithoutSenderRefNestedInput
    privSender?: PrivMessageUncheckedUpdateManyWithoutSenderRefNestedInput
    privReceipt?: PrivMessageUncheckedUpdateManyWithoutReceiptRefNestedInput
    player1?: MatchHistoryUncheckedUpdateManyWithoutPlayer1RefNestedInput
    player2?: MatchHistoryUncheckedUpdateManyWithoutPlayer2RefNestedInput
    winner?: MatchHistoryUncheckedUpdateManyWithoutWinnerRefNestedInput
  }

  export type ChanMemberUpsertWithWhereUniqueWithoutChanRefInput = {
    where: ChanMemberWhereUniqueInput
    update: XOR<ChanMemberUpdateWithoutChanRefInput, ChanMemberUncheckedUpdateWithoutChanRefInput>
    create: XOR<ChanMemberCreateWithoutChanRefInput, ChanMemberUncheckedCreateWithoutChanRefInput>
  }

  export type ChanMemberUpdateWithWhereUniqueWithoutChanRefInput = {
    where: ChanMemberWhereUniqueInput
    data: XOR<ChanMemberUpdateWithoutChanRefInput, ChanMemberUncheckedUpdateWithoutChanRefInput>
  }

  export type ChanMemberUpdateManyWithWhereWithoutChanRefInput = {
    where: ChanMemberScalarWhereInput
    data: XOR<ChanMemberUpdateManyMutationInput, ChanMemberUncheckedUpdateManyWithoutMemChanInput>
  }

  export type ChanBanUpsertWithWhereUniqueWithoutChanRefInput = {
    where: ChanBanWhereUniqueInput
    update: XOR<ChanBanUpdateWithoutChanRefInput, ChanBanUncheckedUpdateWithoutChanRefInput>
    create: XOR<ChanBanCreateWithoutChanRefInput, ChanBanUncheckedCreateWithoutChanRefInput>
  }

  export type ChanBanUpdateWithWhereUniqueWithoutChanRefInput = {
    where: ChanBanWhereUniqueInput
    data: XOR<ChanBanUpdateWithoutChanRefInput, ChanBanUncheckedUpdateWithoutChanRefInput>
  }

  export type ChanBanUpdateManyWithWhereWithoutChanRefInput = {
    where: ChanBanScalarWhereInput
    data: XOR<ChanBanUpdateManyMutationInput, ChanBanUncheckedUpdateManyWithoutBanChanInput>
  }

  export type ChanMessageUpsertWithWhereUniqueWithoutChanRefInput = {
    where: ChanMessageWhereUniqueInput
    update: XOR<ChanMessageUpdateWithoutChanRefInput, ChanMessageUncheckedUpdateWithoutChanRefInput>
    create: XOR<ChanMessageCreateWithoutChanRefInput, ChanMessageUncheckedCreateWithoutChanRefInput>
  }

  export type ChanMessageUpdateWithWhereUniqueWithoutChanRefInput = {
    where: ChanMessageWhereUniqueInput
    data: XOR<ChanMessageUpdateWithoutChanRefInput, ChanMessageUncheckedUpdateWithoutChanRefInput>
  }

  export type ChanMessageUpdateManyWithWhereWithoutChanRefInput = {
    where: ChanMessageScalarWhereInput
    data: XOR<ChanMessageUpdateManyMutationInput, ChanMessageUncheckedUpdateManyWithoutMessChanInput>
  }

  export type ChannelCreateWithoutMemChanInput = {
    name: string
    type?: ChanType
    passwd?: string | null
    ownerRef: UserCreateNestedOneWithoutOwnerInput
    banChan?: ChanBanCreateNestedManyWithoutChanRefInput
    messChan?: ChanMessageCreateNestedManyWithoutChanRefInput
  }

  export type ChannelUncheckedCreateWithoutMemChanInput = {
    id?: number
    name: string
    owner: number
    type?: ChanType
    passwd?: string | null
    banChan?: ChanBanUncheckedCreateNestedManyWithoutChanRefInput
    messChan?: ChanMessageUncheckedCreateNestedManyWithoutChanRefInput
  }

  export type ChannelCreateOrConnectWithoutMemChanInput = {
    where: ChannelWhereUniqueInput
    create: XOR<ChannelCreateWithoutMemChanInput, ChannelUncheckedCreateWithoutMemChanInput>
  }

  export type UserCreateWithoutMemberInput = {
    login?: string | null
    nickname: string
    avatarURL: string
    requester?: FriendCreateNestedManyWithoutRequesterRefInput
    requestee?: FriendCreateNestedManyWithoutRequesteeRefInput
    blocker?: BlockedCreateNestedManyWithoutBlockerRefInput
    blockee?: BlockedCreateNestedManyWithoutBlockeeRefInput
    owner?: ChannelCreateNestedManyWithoutOwnerRefInput
    banned?: ChanBanCreateNestedManyWithoutBannedRefInput
    chanSender?: ChanMessageCreateNestedManyWithoutSenderRefInput
    privSender?: PrivMessageCreateNestedManyWithoutSenderRefInput
    privReceipt?: PrivMessageCreateNestedManyWithoutReceiptRefInput
    player1?: MatchHistoryCreateNestedManyWithoutPlayer1RefInput
    player2?: MatchHistoryCreateNestedManyWithoutPlayer2RefInput
    winner?: MatchHistoryCreateNestedManyWithoutWinnerRefInput
  }

  export type UserUncheckedCreateWithoutMemberInput = {
    id?: number
    login?: string | null
    nickname: string
    avatarURL: string
    requester?: FriendUncheckedCreateNestedManyWithoutRequesterRefInput
    requestee?: FriendUncheckedCreateNestedManyWithoutRequesteeRefInput
    blocker?: BlockedUncheckedCreateNestedManyWithoutBlockerRefInput
    blockee?: BlockedUncheckedCreateNestedManyWithoutBlockeeRefInput
    owner?: ChannelUncheckedCreateNestedManyWithoutOwnerRefInput
    banned?: ChanBanUncheckedCreateNestedManyWithoutBannedRefInput
    chanSender?: ChanMessageUncheckedCreateNestedManyWithoutSenderRefInput
    privSender?: PrivMessageUncheckedCreateNestedManyWithoutSenderRefInput
    privReceipt?: PrivMessageUncheckedCreateNestedManyWithoutReceiptRefInput
    player1?: MatchHistoryUncheckedCreateNestedManyWithoutPlayer1RefInput
    player2?: MatchHistoryUncheckedCreateNestedManyWithoutPlayer2RefInput
    winner?: MatchHistoryUncheckedCreateNestedManyWithoutWinnerRefInput
  }

  export type UserCreateOrConnectWithoutMemberInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMemberInput, UserUncheckedCreateWithoutMemberInput>
  }

  export type ChannelUpsertWithoutMemChanInput = {
    update: XOR<ChannelUpdateWithoutMemChanInput, ChannelUncheckedUpdateWithoutMemChanInput>
    create: XOR<ChannelCreateWithoutMemChanInput, ChannelUncheckedCreateWithoutMemChanInput>
  }

  export type ChannelUpdateWithoutMemChanInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumChanTypeFieldUpdateOperationsInput | ChanType
    passwd?: NullableStringFieldUpdateOperationsInput | string | null
    ownerRef?: UserUpdateOneRequiredWithoutOwnerNestedInput
    banChan?: ChanBanUpdateManyWithoutChanRefNestedInput
    messChan?: ChanMessageUpdateManyWithoutChanRefNestedInput
  }

  export type ChannelUncheckedUpdateWithoutMemChanInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    owner?: IntFieldUpdateOperationsInput | number
    type?: EnumChanTypeFieldUpdateOperationsInput | ChanType
    passwd?: NullableStringFieldUpdateOperationsInput | string | null
    banChan?: ChanBanUncheckedUpdateManyWithoutChanRefNestedInput
    messChan?: ChanMessageUncheckedUpdateManyWithoutChanRefNestedInput
  }

  export type UserUpsertWithoutMemberInput = {
    update: XOR<UserUpdateWithoutMemberInput, UserUncheckedUpdateWithoutMemberInput>
    create: XOR<UserCreateWithoutMemberInput, UserUncheckedCreateWithoutMemberInput>
  }

  export type UserUpdateWithoutMemberInput = {
    login?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatarURL?: StringFieldUpdateOperationsInput | string
    requester?: FriendUpdateManyWithoutRequesterRefNestedInput
    requestee?: FriendUpdateManyWithoutRequesteeRefNestedInput
    blocker?: BlockedUpdateManyWithoutBlockerRefNestedInput
    blockee?: BlockedUpdateManyWithoutBlockeeRefNestedInput
    owner?: ChannelUpdateManyWithoutOwnerRefNestedInput
    banned?: ChanBanUpdateManyWithoutBannedRefNestedInput
    chanSender?: ChanMessageUpdateManyWithoutSenderRefNestedInput
    privSender?: PrivMessageUpdateManyWithoutSenderRefNestedInput
    privReceipt?: PrivMessageUpdateManyWithoutReceiptRefNestedInput
    player1?: MatchHistoryUpdateManyWithoutPlayer1RefNestedInput
    player2?: MatchHistoryUpdateManyWithoutPlayer2RefNestedInput
    winner?: MatchHistoryUpdateManyWithoutWinnerRefNestedInput
  }

  export type UserUncheckedUpdateWithoutMemberInput = {
    id?: IntFieldUpdateOperationsInput | number
    login?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatarURL?: StringFieldUpdateOperationsInput | string
    requester?: FriendUncheckedUpdateManyWithoutRequesterRefNestedInput
    requestee?: FriendUncheckedUpdateManyWithoutRequesteeRefNestedInput
    blocker?: BlockedUncheckedUpdateManyWithoutBlockerRefNestedInput
    blockee?: BlockedUncheckedUpdateManyWithoutBlockeeRefNestedInput
    owner?: ChannelUncheckedUpdateManyWithoutOwnerRefNestedInput
    banned?: ChanBanUncheckedUpdateManyWithoutBannedRefNestedInput
    chanSender?: ChanMessageUncheckedUpdateManyWithoutSenderRefNestedInput
    privSender?: PrivMessageUncheckedUpdateManyWithoutSenderRefNestedInput
    privReceipt?: PrivMessageUncheckedUpdateManyWithoutReceiptRefNestedInput
    player1?: MatchHistoryUncheckedUpdateManyWithoutPlayer1RefNestedInput
    player2?: MatchHistoryUncheckedUpdateManyWithoutPlayer2RefNestedInput
    winner?: MatchHistoryUncheckedUpdateManyWithoutWinnerRefNestedInput
  }

  export type ChannelCreateWithoutBanChanInput = {
    name: string
    type?: ChanType
    passwd?: string | null
    ownerRef: UserCreateNestedOneWithoutOwnerInput
    memChan?: ChanMemberCreateNestedManyWithoutChanRefInput
    messChan?: ChanMessageCreateNestedManyWithoutChanRefInput
  }

  export type ChannelUncheckedCreateWithoutBanChanInput = {
    id?: number
    name: string
    owner: number
    type?: ChanType
    passwd?: string | null
    memChan?: ChanMemberUncheckedCreateNestedManyWithoutChanRefInput
    messChan?: ChanMessageUncheckedCreateNestedManyWithoutChanRefInput
  }

  export type ChannelCreateOrConnectWithoutBanChanInput = {
    where: ChannelWhereUniqueInput
    create: XOR<ChannelCreateWithoutBanChanInput, ChannelUncheckedCreateWithoutBanChanInput>
  }

  export type UserCreateWithoutBannedInput = {
    login?: string | null
    nickname: string
    avatarURL: string
    requester?: FriendCreateNestedManyWithoutRequesterRefInput
    requestee?: FriendCreateNestedManyWithoutRequesteeRefInput
    blocker?: BlockedCreateNestedManyWithoutBlockerRefInput
    blockee?: BlockedCreateNestedManyWithoutBlockeeRefInput
    owner?: ChannelCreateNestedManyWithoutOwnerRefInput
    member?: ChanMemberCreateNestedManyWithoutMemberRefInput
    chanSender?: ChanMessageCreateNestedManyWithoutSenderRefInput
    privSender?: PrivMessageCreateNestedManyWithoutSenderRefInput
    privReceipt?: PrivMessageCreateNestedManyWithoutReceiptRefInput
    player1?: MatchHistoryCreateNestedManyWithoutPlayer1RefInput
    player2?: MatchHistoryCreateNestedManyWithoutPlayer2RefInput
    winner?: MatchHistoryCreateNestedManyWithoutWinnerRefInput
  }

  export type UserUncheckedCreateWithoutBannedInput = {
    id?: number
    login?: string | null
    nickname: string
    avatarURL: string
    requester?: FriendUncheckedCreateNestedManyWithoutRequesterRefInput
    requestee?: FriendUncheckedCreateNestedManyWithoutRequesteeRefInput
    blocker?: BlockedUncheckedCreateNestedManyWithoutBlockerRefInput
    blockee?: BlockedUncheckedCreateNestedManyWithoutBlockeeRefInput
    owner?: ChannelUncheckedCreateNestedManyWithoutOwnerRefInput
    member?: ChanMemberUncheckedCreateNestedManyWithoutMemberRefInput
    chanSender?: ChanMessageUncheckedCreateNestedManyWithoutSenderRefInput
    privSender?: PrivMessageUncheckedCreateNestedManyWithoutSenderRefInput
    privReceipt?: PrivMessageUncheckedCreateNestedManyWithoutReceiptRefInput
    player1?: MatchHistoryUncheckedCreateNestedManyWithoutPlayer1RefInput
    player2?: MatchHistoryUncheckedCreateNestedManyWithoutPlayer2RefInput
    winner?: MatchHistoryUncheckedCreateNestedManyWithoutWinnerRefInput
  }

  export type UserCreateOrConnectWithoutBannedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBannedInput, UserUncheckedCreateWithoutBannedInput>
  }

  export type ChannelUpsertWithoutBanChanInput = {
    update: XOR<ChannelUpdateWithoutBanChanInput, ChannelUncheckedUpdateWithoutBanChanInput>
    create: XOR<ChannelCreateWithoutBanChanInput, ChannelUncheckedCreateWithoutBanChanInput>
  }

  export type ChannelUpdateWithoutBanChanInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumChanTypeFieldUpdateOperationsInput | ChanType
    passwd?: NullableStringFieldUpdateOperationsInput | string | null
    ownerRef?: UserUpdateOneRequiredWithoutOwnerNestedInput
    memChan?: ChanMemberUpdateManyWithoutChanRefNestedInput
    messChan?: ChanMessageUpdateManyWithoutChanRefNestedInput
  }

  export type ChannelUncheckedUpdateWithoutBanChanInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    owner?: IntFieldUpdateOperationsInput | number
    type?: EnumChanTypeFieldUpdateOperationsInput | ChanType
    passwd?: NullableStringFieldUpdateOperationsInput | string | null
    memChan?: ChanMemberUncheckedUpdateManyWithoutChanRefNestedInput
    messChan?: ChanMessageUncheckedUpdateManyWithoutChanRefNestedInput
  }

  export type UserUpsertWithoutBannedInput = {
    update: XOR<UserUpdateWithoutBannedInput, UserUncheckedUpdateWithoutBannedInput>
    create: XOR<UserCreateWithoutBannedInput, UserUncheckedCreateWithoutBannedInput>
  }

  export type UserUpdateWithoutBannedInput = {
    login?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatarURL?: StringFieldUpdateOperationsInput | string
    requester?: FriendUpdateManyWithoutRequesterRefNestedInput
    requestee?: FriendUpdateManyWithoutRequesteeRefNestedInput
    blocker?: BlockedUpdateManyWithoutBlockerRefNestedInput
    blockee?: BlockedUpdateManyWithoutBlockeeRefNestedInput
    owner?: ChannelUpdateManyWithoutOwnerRefNestedInput
    member?: ChanMemberUpdateManyWithoutMemberRefNestedInput
    chanSender?: ChanMessageUpdateManyWithoutSenderRefNestedInput
    privSender?: PrivMessageUpdateManyWithoutSenderRefNestedInput
    privReceipt?: PrivMessageUpdateManyWithoutReceiptRefNestedInput
    player1?: MatchHistoryUpdateManyWithoutPlayer1RefNestedInput
    player2?: MatchHistoryUpdateManyWithoutPlayer2RefNestedInput
    winner?: MatchHistoryUpdateManyWithoutWinnerRefNestedInput
  }

  export type UserUncheckedUpdateWithoutBannedInput = {
    id?: IntFieldUpdateOperationsInput | number
    login?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatarURL?: StringFieldUpdateOperationsInput | string
    requester?: FriendUncheckedUpdateManyWithoutRequesterRefNestedInput
    requestee?: FriendUncheckedUpdateManyWithoutRequesteeRefNestedInput
    blocker?: BlockedUncheckedUpdateManyWithoutBlockerRefNestedInput
    blockee?: BlockedUncheckedUpdateManyWithoutBlockeeRefNestedInput
    owner?: ChannelUncheckedUpdateManyWithoutOwnerRefNestedInput
    member?: ChanMemberUncheckedUpdateManyWithoutMemberRefNestedInput
    chanSender?: ChanMessageUncheckedUpdateManyWithoutSenderRefNestedInput
    privSender?: PrivMessageUncheckedUpdateManyWithoutSenderRefNestedInput
    privReceipt?: PrivMessageUncheckedUpdateManyWithoutReceiptRefNestedInput
    player1?: MatchHistoryUncheckedUpdateManyWithoutPlayer1RefNestedInput
    player2?: MatchHistoryUncheckedUpdateManyWithoutPlayer2RefNestedInput
    winner?: MatchHistoryUncheckedUpdateManyWithoutWinnerRefNestedInput
  }

  export type UserCreateWithoutChanSenderInput = {
    login?: string | null
    nickname: string
    avatarURL: string
    requester?: FriendCreateNestedManyWithoutRequesterRefInput
    requestee?: FriendCreateNestedManyWithoutRequesteeRefInput
    blocker?: BlockedCreateNestedManyWithoutBlockerRefInput
    blockee?: BlockedCreateNestedManyWithoutBlockeeRefInput
    owner?: ChannelCreateNestedManyWithoutOwnerRefInput
    member?: ChanMemberCreateNestedManyWithoutMemberRefInput
    banned?: ChanBanCreateNestedManyWithoutBannedRefInput
    privSender?: PrivMessageCreateNestedManyWithoutSenderRefInput
    privReceipt?: PrivMessageCreateNestedManyWithoutReceiptRefInput
    player1?: MatchHistoryCreateNestedManyWithoutPlayer1RefInput
    player2?: MatchHistoryCreateNestedManyWithoutPlayer2RefInput
    winner?: MatchHistoryCreateNestedManyWithoutWinnerRefInput
  }

  export type UserUncheckedCreateWithoutChanSenderInput = {
    id?: number
    login?: string | null
    nickname: string
    avatarURL: string
    requester?: FriendUncheckedCreateNestedManyWithoutRequesterRefInput
    requestee?: FriendUncheckedCreateNestedManyWithoutRequesteeRefInput
    blocker?: BlockedUncheckedCreateNestedManyWithoutBlockerRefInput
    blockee?: BlockedUncheckedCreateNestedManyWithoutBlockeeRefInput
    owner?: ChannelUncheckedCreateNestedManyWithoutOwnerRefInput
    member?: ChanMemberUncheckedCreateNestedManyWithoutMemberRefInput
    banned?: ChanBanUncheckedCreateNestedManyWithoutBannedRefInput
    privSender?: PrivMessageUncheckedCreateNestedManyWithoutSenderRefInput
    privReceipt?: PrivMessageUncheckedCreateNestedManyWithoutReceiptRefInput
    player1?: MatchHistoryUncheckedCreateNestedManyWithoutPlayer1RefInput
    player2?: MatchHistoryUncheckedCreateNestedManyWithoutPlayer2RefInput
    winner?: MatchHistoryUncheckedCreateNestedManyWithoutWinnerRefInput
  }

  export type UserCreateOrConnectWithoutChanSenderInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChanSenderInput, UserUncheckedCreateWithoutChanSenderInput>
  }

  export type ChannelCreateWithoutMessChanInput = {
    name: string
    type?: ChanType
    passwd?: string | null
    ownerRef: UserCreateNestedOneWithoutOwnerInput
    memChan?: ChanMemberCreateNestedManyWithoutChanRefInput
    banChan?: ChanBanCreateNestedManyWithoutChanRefInput
  }

  export type ChannelUncheckedCreateWithoutMessChanInput = {
    id?: number
    name: string
    owner: number
    type?: ChanType
    passwd?: string | null
    memChan?: ChanMemberUncheckedCreateNestedManyWithoutChanRefInput
    banChan?: ChanBanUncheckedCreateNestedManyWithoutChanRefInput
  }

  export type ChannelCreateOrConnectWithoutMessChanInput = {
    where: ChannelWhereUniqueInput
    create: XOR<ChannelCreateWithoutMessChanInput, ChannelUncheckedCreateWithoutMessChanInput>
  }

  export type UserUpsertWithoutChanSenderInput = {
    update: XOR<UserUpdateWithoutChanSenderInput, UserUncheckedUpdateWithoutChanSenderInput>
    create: XOR<UserCreateWithoutChanSenderInput, UserUncheckedCreateWithoutChanSenderInput>
  }

  export type UserUpdateWithoutChanSenderInput = {
    login?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatarURL?: StringFieldUpdateOperationsInput | string
    requester?: FriendUpdateManyWithoutRequesterRefNestedInput
    requestee?: FriendUpdateManyWithoutRequesteeRefNestedInput
    blocker?: BlockedUpdateManyWithoutBlockerRefNestedInput
    blockee?: BlockedUpdateManyWithoutBlockeeRefNestedInput
    owner?: ChannelUpdateManyWithoutOwnerRefNestedInput
    member?: ChanMemberUpdateManyWithoutMemberRefNestedInput
    banned?: ChanBanUpdateManyWithoutBannedRefNestedInput
    privSender?: PrivMessageUpdateManyWithoutSenderRefNestedInput
    privReceipt?: PrivMessageUpdateManyWithoutReceiptRefNestedInput
    player1?: MatchHistoryUpdateManyWithoutPlayer1RefNestedInput
    player2?: MatchHistoryUpdateManyWithoutPlayer2RefNestedInput
    winner?: MatchHistoryUpdateManyWithoutWinnerRefNestedInput
  }

  export type UserUncheckedUpdateWithoutChanSenderInput = {
    id?: IntFieldUpdateOperationsInput | number
    login?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatarURL?: StringFieldUpdateOperationsInput | string
    requester?: FriendUncheckedUpdateManyWithoutRequesterRefNestedInput
    requestee?: FriendUncheckedUpdateManyWithoutRequesteeRefNestedInput
    blocker?: BlockedUncheckedUpdateManyWithoutBlockerRefNestedInput
    blockee?: BlockedUncheckedUpdateManyWithoutBlockeeRefNestedInput
    owner?: ChannelUncheckedUpdateManyWithoutOwnerRefNestedInput
    member?: ChanMemberUncheckedUpdateManyWithoutMemberRefNestedInput
    banned?: ChanBanUncheckedUpdateManyWithoutBannedRefNestedInput
    privSender?: PrivMessageUncheckedUpdateManyWithoutSenderRefNestedInput
    privReceipt?: PrivMessageUncheckedUpdateManyWithoutReceiptRefNestedInput
    player1?: MatchHistoryUncheckedUpdateManyWithoutPlayer1RefNestedInput
    player2?: MatchHistoryUncheckedUpdateManyWithoutPlayer2RefNestedInput
    winner?: MatchHistoryUncheckedUpdateManyWithoutWinnerRefNestedInput
  }

  export type ChannelUpsertWithoutMessChanInput = {
    update: XOR<ChannelUpdateWithoutMessChanInput, ChannelUncheckedUpdateWithoutMessChanInput>
    create: XOR<ChannelCreateWithoutMessChanInput, ChannelUncheckedCreateWithoutMessChanInput>
  }

  export type ChannelUpdateWithoutMessChanInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumChanTypeFieldUpdateOperationsInput | ChanType
    passwd?: NullableStringFieldUpdateOperationsInput | string | null
    ownerRef?: UserUpdateOneRequiredWithoutOwnerNestedInput
    memChan?: ChanMemberUpdateManyWithoutChanRefNestedInput
    banChan?: ChanBanUpdateManyWithoutChanRefNestedInput
  }

  export type ChannelUncheckedUpdateWithoutMessChanInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    owner?: IntFieldUpdateOperationsInput | number
    type?: EnumChanTypeFieldUpdateOperationsInput | ChanType
    passwd?: NullableStringFieldUpdateOperationsInput | string | null
    memChan?: ChanMemberUncheckedUpdateManyWithoutChanRefNestedInput
    banChan?: ChanBanUncheckedUpdateManyWithoutChanRefNestedInput
  }

  export type UserCreateWithoutPrivSenderInput = {
    login?: string | null
    nickname: string
    avatarURL: string
    requester?: FriendCreateNestedManyWithoutRequesterRefInput
    requestee?: FriendCreateNestedManyWithoutRequesteeRefInput
    blocker?: BlockedCreateNestedManyWithoutBlockerRefInput
    blockee?: BlockedCreateNestedManyWithoutBlockeeRefInput
    owner?: ChannelCreateNestedManyWithoutOwnerRefInput
    member?: ChanMemberCreateNestedManyWithoutMemberRefInput
    banned?: ChanBanCreateNestedManyWithoutBannedRefInput
    chanSender?: ChanMessageCreateNestedManyWithoutSenderRefInput
    privReceipt?: PrivMessageCreateNestedManyWithoutReceiptRefInput
    player1?: MatchHistoryCreateNestedManyWithoutPlayer1RefInput
    player2?: MatchHistoryCreateNestedManyWithoutPlayer2RefInput
    winner?: MatchHistoryCreateNestedManyWithoutWinnerRefInput
  }

  export type UserUncheckedCreateWithoutPrivSenderInput = {
    id?: number
    login?: string | null
    nickname: string
    avatarURL: string
    requester?: FriendUncheckedCreateNestedManyWithoutRequesterRefInput
    requestee?: FriendUncheckedCreateNestedManyWithoutRequesteeRefInput
    blocker?: BlockedUncheckedCreateNestedManyWithoutBlockerRefInput
    blockee?: BlockedUncheckedCreateNestedManyWithoutBlockeeRefInput
    owner?: ChannelUncheckedCreateNestedManyWithoutOwnerRefInput
    member?: ChanMemberUncheckedCreateNestedManyWithoutMemberRefInput
    banned?: ChanBanUncheckedCreateNestedManyWithoutBannedRefInput
    chanSender?: ChanMessageUncheckedCreateNestedManyWithoutSenderRefInput
    privReceipt?: PrivMessageUncheckedCreateNestedManyWithoutReceiptRefInput
    player1?: MatchHistoryUncheckedCreateNestedManyWithoutPlayer1RefInput
    player2?: MatchHistoryUncheckedCreateNestedManyWithoutPlayer2RefInput
    winner?: MatchHistoryUncheckedCreateNestedManyWithoutWinnerRefInput
  }

  export type UserCreateOrConnectWithoutPrivSenderInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPrivSenderInput, UserUncheckedCreateWithoutPrivSenderInput>
  }

  export type UserCreateWithoutPrivReceiptInput = {
    login?: string | null
    nickname: string
    avatarURL: string
    requester?: FriendCreateNestedManyWithoutRequesterRefInput
    requestee?: FriendCreateNestedManyWithoutRequesteeRefInput
    blocker?: BlockedCreateNestedManyWithoutBlockerRefInput
    blockee?: BlockedCreateNestedManyWithoutBlockeeRefInput
    owner?: ChannelCreateNestedManyWithoutOwnerRefInput
    member?: ChanMemberCreateNestedManyWithoutMemberRefInput
    banned?: ChanBanCreateNestedManyWithoutBannedRefInput
    chanSender?: ChanMessageCreateNestedManyWithoutSenderRefInput
    privSender?: PrivMessageCreateNestedManyWithoutSenderRefInput
    player1?: MatchHistoryCreateNestedManyWithoutPlayer1RefInput
    player2?: MatchHistoryCreateNestedManyWithoutPlayer2RefInput
    winner?: MatchHistoryCreateNestedManyWithoutWinnerRefInput
  }

  export type UserUncheckedCreateWithoutPrivReceiptInput = {
    id?: number
    login?: string | null
    nickname: string
    avatarURL: string
    requester?: FriendUncheckedCreateNestedManyWithoutRequesterRefInput
    requestee?: FriendUncheckedCreateNestedManyWithoutRequesteeRefInput
    blocker?: BlockedUncheckedCreateNestedManyWithoutBlockerRefInput
    blockee?: BlockedUncheckedCreateNestedManyWithoutBlockeeRefInput
    owner?: ChannelUncheckedCreateNestedManyWithoutOwnerRefInput
    member?: ChanMemberUncheckedCreateNestedManyWithoutMemberRefInput
    banned?: ChanBanUncheckedCreateNestedManyWithoutBannedRefInput
    chanSender?: ChanMessageUncheckedCreateNestedManyWithoutSenderRefInput
    privSender?: PrivMessageUncheckedCreateNestedManyWithoutSenderRefInput
    player1?: MatchHistoryUncheckedCreateNestedManyWithoutPlayer1RefInput
    player2?: MatchHistoryUncheckedCreateNestedManyWithoutPlayer2RefInput
    winner?: MatchHistoryUncheckedCreateNestedManyWithoutWinnerRefInput
  }

  export type UserCreateOrConnectWithoutPrivReceiptInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPrivReceiptInput, UserUncheckedCreateWithoutPrivReceiptInput>
  }

  export type UserUpsertWithoutPrivSenderInput = {
    update: XOR<UserUpdateWithoutPrivSenderInput, UserUncheckedUpdateWithoutPrivSenderInput>
    create: XOR<UserCreateWithoutPrivSenderInput, UserUncheckedCreateWithoutPrivSenderInput>
  }

  export type UserUpdateWithoutPrivSenderInput = {
    login?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatarURL?: StringFieldUpdateOperationsInput | string
    requester?: FriendUpdateManyWithoutRequesterRefNestedInput
    requestee?: FriendUpdateManyWithoutRequesteeRefNestedInput
    blocker?: BlockedUpdateManyWithoutBlockerRefNestedInput
    blockee?: BlockedUpdateManyWithoutBlockeeRefNestedInput
    owner?: ChannelUpdateManyWithoutOwnerRefNestedInput
    member?: ChanMemberUpdateManyWithoutMemberRefNestedInput
    banned?: ChanBanUpdateManyWithoutBannedRefNestedInput
    chanSender?: ChanMessageUpdateManyWithoutSenderRefNestedInput
    privReceipt?: PrivMessageUpdateManyWithoutReceiptRefNestedInput
    player1?: MatchHistoryUpdateManyWithoutPlayer1RefNestedInput
    player2?: MatchHistoryUpdateManyWithoutPlayer2RefNestedInput
    winner?: MatchHistoryUpdateManyWithoutWinnerRefNestedInput
  }

  export type UserUncheckedUpdateWithoutPrivSenderInput = {
    id?: IntFieldUpdateOperationsInput | number
    login?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatarURL?: StringFieldUpdateOperationsInput | string
    requester?: FriendUncheckedUpdateManyWithoutRequesterRefNestedInput
    requestee?: FriendUncheckedUpdateManyWithoutRequesteeRefNestedInput
    blocker?: BlockedUncheckedUpdateManyWithoutBlockerRefNestedInput
    blockee?: BlockedUncheckedUpdateManyWithoutBlockeeRefNestedInput
    owner?: ChannelUncheckedUpdateManyWithoutOwnerRefNestedInput
    member?: ChanMemberUncheckedUpdateManyWithoutMemberRefNestedInput
    banned?: ChanBanUncheckedUpdateManyWithoutBannedRefNestedInput
    chanSender?: ChanMessageUncheckedUpdateManyWithoutSenderRefNestedInput
    privReceipt?: PrivMessageUncheckedUpdateManyWithoutReceiptRefNestedInput
    player1?: MatchHistoryUncheckedUpdateManyWithoutPlayer1RefNestedInput
    player2?: MatchHistoryUncheckedUpdateManyWithoutPlayer2RefNestedInput
    winner?: MatchHistoryUncheckedUpdateManyWithoutWinnerRefNestedInput
  }

  export type UserUpsertWithoutPrivReceiptInput = {
    update: XOR<UserUpdateWithoutPrivReceiptInput, UserUncheckedUpdateWithoutPrivReceiptInput>
    create: XOR<UserCreateWithoutPrivReceiptInput, UserUncheckedCreateWithoutPrivReceiptInput>
  }

  export type UserUpdateWithoutPrivReceiptInput = {
    login?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatarURL?: StringFieldUpdateOperationsInput | string
    requester?: FriendUpdateManyWithoutRequesterRefNestedInput
    requestee?: FriendUpdateManyWithoutRequesteeRefNestedInput
    blocker?: BlockedUpdateManyWithoutBlockerRefNestedInput
    blockee?: BlockedUpdateManyWithoutBlockeeRefNestedInput
    owner?: ChannelUpdateManyWithoutOwnerRefNestedInput
    member?: ChanMemberUpdateManyWithoutMemberRefNestedInput
    banned?: ChanBanUpdateManyWithoutBannedRefNestedInput
    chanSender?: ChanMessageUpdateManyWithoutSenderRefNestedInput
    privSender?: PrivMessageUpdateManyWithoutSenderRefNestedInput
    player1?: MatchHistoryUpdateManyWithoutPlayer1RefNestedInput
    player2?: MatchHistoryUpdateManyWithoutPlayer2RefNestedInput
    winner?: MatchHistoryUpdateManyWithoutWinnerRefNestedInput
  }

  export type UserUncheckedUpdateWithoutPrivReceiptInput = {
    id?: IntFieldUpdateOperationsInput | number
    login?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatarURL?: StringFieldUpdateOperationsInput | string
    requester?: FriendUncheckedUpdateManyWithoutRequesterRefNestedInput
    requestee?: FriendUncheckedUpdateManyWithoutRequesteeRefNestedInput
    blocker?: BlockedUncheckedUpdateManyWithoutBlockerRefNestedInput
    blockee?: BlockedUncheckedUpdateManyWithoutBlockeeRefNestedInput
    owner?: ChannelUncheckedUpdateManyWithoutOwnerRefNestedInput
    member?: ChanMemberUncheckedUpdateManyWithoutMemberRefNestedInput
    banned?: ChanBanUncheckedUpdateManyWithoutBannedRefNestedInput
    chanSender?: ChanMessageUncheckedUpdateManyWithoutSenderRefNestedInput
    privSender?: PrivMessageUncheckedUpdateManyWithoutSenderRefNestedInput
    player1?: MatchHistoryUncheckedUpdateManyWithoutPlayer1RefNestedInput
    player2?: MatchHistoryUncheckedUpdateManyWithoutPlayer2RefNestedInput
    winner?: MatchHistoryUncheckedUpdateManyWithoutWinnerRefNestedInput
  }

  export type UserCreateWithoutPlayer1Input = {
    login?: string | null
    nickname: string
    avatarURL: string
    requester?: FriendCreateNestedManyWithoutRequesterRefInput
    requestee?: FriendCreateNestedManyWithoutRequesteeRefInput
    blocker?: BlockedCreateNestedManyWithoutBlockerRefInput
    blockee?: BlockedCreateNestedManyWithoutBlockeeRefInput
    owner?: ChannelCreateNestedManyWithoutOwnerRefInput
    member?: ChanMemberCreateNestedManyWithoutMemberRefInput
    banned?: ChanBanCreateNestedManyWithoutBannedRefInput
    chanSender?: ChanMessageCreateNestedManyWithoutSenderRefInput
    privSender?: PrivMessageCreateNestedManyWithoutSenderRefInput
    privReceipt?: PrivMessageCreateNestedManyWithoutReceiptRefInput
    player2?: MatchHistoryCreateNestedManyWithoutPlayer2RefInput
    winner?: MatchHistoryCreateNestedManyWithoutWinnerRefInput
  }

  export type UserUncheckedCreateWithoutPlayer1Input = {
    id?: number
    login?: string | null
    nickname: string
    avatarURL: string
    requester?: FriendUncheckedCreateNestedManyWithoutRequesterRefInput
    requestee?: FriendUncheckedCreateNestedManyWithoutRequesteeRefInput
    blocker?: BlockedUncheckedCreateNestedManyWithoutBlockerRefInput
    blockee?: BlockedUncheckedCreateNestedManyWithoutBlockeeRefInput
    owner?: ChannelUncheckedCreateNestedManyWithoutOwnerRefInput
    member?: ChanMemberUncheckedCreateNestedManyWithoutMemberRefInput
    banned?: ChanBanUncheckedCreateNestedManyWithoutBannedRefInput
    chanSender?: ChanMessageUncheckedCreateNestedManyWithoutSenderRefInput
    privSender?: PrivMessageUncheckedCreateNestedManyWithoutSenderRefInput
    privReceipt?: PrivMessageUncheckedCreateNestedManyWithoutReceiptRefInput
    player2?: MatchHistoryUncheckedCreateNestedManyWithoutPlayer2RefInput
    winner?: MatchHistoryUncheckedCreateNestedManyWithoutWinnerRefInput
  }

  export type UserCreateOrConnectWithoutPlayer1Input = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPlayer1Input, UserUncheckedCreateWithoutPlayer1Input>
  }

  export type UserCreateWithoutPlayer2Input = {
    login?: string | null
    nickname: string
    avatarURL: string
    requester?: FriendCreateNestedManyWithoutRequesterRefInput
    requestee?: FriendCreateNestedManyWithoutRequesteeRefInput
    blocker?: BlockedCreateNestedManyWithoutBlockerRefInput
    blockee?: BlockedCreateNestedManyWithoutBlockeeRefInput
    owner?: ChannelCreateNestedManyWithoutOwnerRefInput
    member?: ChanMemberCreateNestedManyWithoutMemberRefInput
    banned?: ChanBanCreateNestedManyWithoutBannedRefInput
    chanSender?: ChanMessageCreateNestedManyWithoutSenderRefInput
    privSender?: PrivMessageCreateNestedManyWithoutSenderRefInput
    privReceipt?: PrivMessageCreateNestedManyWithoutReceiptRefInput
    player1?: MatchHistoryCreateNestedManyWithoutPlayer1RefInput
    winner?: MatchHistoryCreateNestedManyWithoutWinnerRefInput
  }

  export type UserUncheckedCreateWithoutPlayer2Input = {
    id?: number
    login?: string | null
    nickname: string
    avatarURL: string
    requester?: FriendUncheckedCreateNestedManyWithoutRequesterRefInput
    requestee?: FriendUncheckedCreateNestedManyWithoutRequesteeRefInput
    blocker?: BlockedUncheckedCreateNestedManyWithoutBlockerRefInput
    blockee?: BlockedUncheckedCreateNestedManyWithoutBlockeeRefInput
    owner?: ChannelUncheckedCreateNestedManyWithoutOwnerRefInput
    member?: ChanMemberUncheckedCreateNestedManyWithoutMemberRefInput
    banned?: ChanBanUncheckedCreateNestedManyWithoutBannedRefInput
    chanSender?: ChanMessageUncheckedCreateNestedManyWithoutSenderRefInput
    privSender?: PrivMessageUncheckedCreateNestedManyWithoutSenderRefInput
    privReceipt?: PrivMessageUncheckedCreateNestedManyWithoutReceiptRefInput
    player1?: MatchHistoryUncheckedCreateNestedManyWithoutPlayer1RefInput
    winner?: MatchHistoryUncheckedCreateNestedManyWithoutWinnerRefInput
  }

  export type UserCreateOrConnectWithoutPlayer2Input = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPlayer2Input, UserUncheckedCreateWithoutPlayer2Input>
  }

  export type UserCreateWithoutWinnerInput = {
    login?: string | null
    nickname: string
    avatarURL: string
    requester?: FriendCreateNestedManyWithoutRequesterRefInput
    requestee?: FriendCreateNestedManyWithoutRequesteeRefInput
    blocker?: BlockedCreateNestedManyWithoutBlockerRefInput
    blockee?: BlockedCreateNestedManyWithoutBlockeeRefInput
    owner?: ChannelCreateNestedManyWithoutOwnerRefInput
    member?: ChanMemberCreateNestedManyWithoutMemberRefInput
    banned?: ChanBanCreateNestedManyWithoutBannedRefInput
    chanSender?: ChanMessageCreateNestedManyWithoutSenderRefInput
    privSender?: PrivMessageCreateNestedManyWithoutSenderRefInput
    privReceipt?: PrivMessageCreateNestedManyWithoutReceiptRefInput
    player1?: MatchHistoryCreateNestedManyWithoutPlayer1RefInput
    player2?: MatchHistoryCreateNestedManyWithoutPlayer2RefInput
  }

  export type UserUncheckedCreateWithoutWinnerInput = {
    id?: number
    login?: string | null
    nickname: string
    avatarURL: string
    requester?: FriendUncheckedCreateNestedManyWithoutRequesterRefInput
    requestee?: FriendUncheckedCreateNestedManyWithoutRequesteeRefInput
    blocker?: BlockedUncheckedCreateNestedManyWithoutBlockerRefInput
    blockee?: BlockedUncheckedCreateNestedManyWithoutBlockeeRefInput
    owner?: ChannelUncheckedCreateNestedManyWithoutOwnerRefInput
    member?: ChanMemberUncheckedCreateNestedManyWithoutMemberRefInput
    banned?: ChanBanUncheckedCreateNestedManyWithoutBannedRefInput
    chanSender?: ChanMessageUncheckedCreateNestedManyWithoutSenderRefInput
    privSender?: PrivMessageUncheckedCreateNestedManyWithoutSenderRefInput
    privReceipt?: PrivMessageUncheckedCreateNestedManyWithoutReceiptRefInput
    player1?: MatchHistoryUncheckedCreateNestedManyWithoutPlayer1RefInput
    player2?: MatchHistoryUncheckedCreateNestedManyWithoutPlayer2RefInput
  }

  export type UserCreateOrConnectWithoutWinnerInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWinnerInput, UserUncheckedCreateWithoutWinnerInput>
  }

  export type UserUpsertWithoutPlayer1Input = {
    update: XOR<UserUpdateWithoutPlayer1Input, UserUncheckedUpdateWithoutPlayer1Input>
    create: XOR<UserCreateWithoutPlayer1Input, UserUncheckedCreateWithoutPlayer1Input>
  }

  export type UserUpdateWithoutPlayer1Input = {
    login?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatarURL?: StringFieldUpdateOperationsInput | string
    requester?: FriendUpdateManyWithoutRequesterRefNestedInput
    requestee?: FriendUpdateManyWithoutRequesteeRefNestedInput
    blocker?: BlockedUpdateManyWithoutBlockerRefNestedInput
    blockee?: BlockedUpdateManyWithoutBlockeeRefNestedInput
    owner?: ChannelUpdateManyWithoutOwnerRefNestedInput
    member?: ChanMemberUpdateManyWithoutMemberRefNestedInput
    banned?: ChanBanUpdateManyWithoutBannedRefNestedInput
    chanSender?: ChanMessageUpdateManyWithoutSenderRefNestedInput
    privSender?: PrivMessageUpdateManyWithoutSenderRefNestedInput
    privReceipt?: PrivMessageUpdateManyWithoutReceiptRefNestedInput
    player2?: MatchHistoryUpdateManyWithoutPlayer2RefNestedInput
    winner?: MatchHistoryUpdateManyWithoutWinnerRefNestedInput
  }

  export type UserUncheckedUpdateWithoutPlayer1Input = {
    id?: IntFieldUpdateOperationsInput | number
    login?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatarURL?: StringFieldUpdateOperationsInput | string
    requester?: FriendUncheckedUpdateManyWithoutRequesterRefNestedInput
    requestee?: FriendUncheckedUpdateManyWithoutRequesteeRefNestedInput
    blocker?: BlockedUncheckedUpdateManyWithoutBlockerRefNestedInput
    blockee?: BlockedUncheckedUpdateManyWithoutBlockeeRefNestedInput
    owner?: ChannelUncheckedUpdateManyWithoutOwnerRefNestedInput
    member?: ChanMemberUncheckedUpdateManyWithoutMemberRefNestedInput
    banned?: ChanBanUncheckedUpdateManyWithoutBannedRefNestedInput
    chanSender?: ChanMessageUncheckedUpdateManyWithoutSenderRefNestedInput
    privSender?: PrivMessageUncheckedUpdateManyWithoutSenderRefNestedInput
    privReceipt?: PrivMessageUncheckedUpdateManyWithoutReceiptRefNestedInput
    player2?: MatchHistoryUncheckedUpdateManyWithoutPlayer2RefNestedInput
    winner?: MatchHistoryUncheckedUpdateManyWithoutWinnerRefNestedInput
  }

  export type UserUpsertWithoutPlayer2Input = {
    update: XOR<UserUpdateWithoutPlayer2Input, UserUncheckedUpdateWithoutPlayer2Input>
    create: XOR<UserCreateWithoutPlayer2Input, UserUncheckedCreateWithoutPlayer2Input>
  }

  export type UserUpdateWithoutPlayer2Input = {
    login?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatarURL?: StringFieldUpdateOperationsInput | string
    requester?: FriendUpdateManyWithoutRequesterRefNestedInput
    requestee?: FriendUpdateManyWithoutRequesteeRefNestedInput
    blocker?: BlockedUpdateManyWithoutBlockerRefNestedInput
    blockee?: BlockedUpdateManyWithoutBlockeeRefNestedInput
    owner?: ChannelUpdateManyWithoutOwnerRefNestedInput
    member?: ChanMemberUpdateManyWithoutMemberRefNestedInput
    banned?: ChanBanUpdateManyWithoutBannedRefNestedInput
    chanSender?: ChanMessageUpdateManyWithoutSenderRefNestedInput
    privSender?: PrivMessageUpdateManyWithoutSenderRefNestedInput
    privReceipt?: PrivMessageUpdateManyWithoutReceiptRefNestedInput
    player1?: MatchHistoryUpdateManyWithoutPlayer1RefNestedInput
    winner?: MatchHistoryUpdateManyWithoutWinnerRefNestedInput
  }

  export type UserUncheckedUpdateWithoutPlayer2Input = {
    id?: IntFieldUpdateOperationsInput | number
    login?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatarURL?: StringFieldUpdateOperationsInput | string
    requester?: FriendUncheckedUpdateManyWithoutRequesterRefNestedInput
    requestee?: FriendUncheckedUpdateManyWithoutRequesteeRefNestedInput
    blocker?: BlockedUncheckedUpdateManyWithoutBlockerRefNestedInput
    blockee?: BlockedUncheckedUpdateManyWithoutBlockeeRefNestedInput
    owner?: ChannelUncheckedUpdateManyWithoutOwnerRefNestedInput
    member?: ChanMemberUncheckedUpdateManyWithoutMemberRefNestedInput
    banned?: ChanBanUncheckedUpdateManyWithoutBannedRefNestedInput
    chanSender?: ChanMessageUncheckedUpdateManyWithoutSenderRefNestedInput
    privSender?: PrivMessageUncheckedUpdateManyWithoutSenderRefNestedInput
    privReceipt?: PrivMessageUncheckedUpdateManyWithoutReceiptRefNestedInput
    player1?: MatchHistoryUncheckedUpdateManyWithoutPlayer1RefNestedInput
    winner?: MatchHistoryUncheckedUpdateManyWithoutWinnerRefNestedInput
  }

  export type UserUpsertWithoutWinnerInput = {
    update: XOR<UserUpdateWithoutWinnerInput, UserUncheckedUpdateWithoutWinnerInput>
    create: XOR<UserCreateWithoutWinnerInput, UserUncheckedCreateWithoutWinnerInput>
  }

  export type UserUpdateWithoutWinnerInput = {
    login?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatarURL?: StringFieldUpdateOperationsInput | string
    requester?: FriendUpdateManyWithoutRequesterRefNestedInput
    requestee?: FriendUpdateManyWithoutRequesteeRefNestedInput
    blocker?: BlockedUpdateManyWithoutBlockerRefNestedInput
    blockee?: BlockedUpdateManyWithoutBlockeeRefNestedInput
    owner?: ChannelUpdateManyWithoutOwnerRefNestedInput
    member?: ChanMemberUpdateManyWithoutMemberRefNestedInput
    banned?: ChanBanUpdateManyWithoutBannedRefNestedInput
    chanSender?: ChanMessageUpdateManyWithoutSenderRefNestedInput
    privSender?: PrivMessageUpdateManyWithoutSenderRefNestedInput
    privReceipt?: PrivMessageUpdateManyWithoutReceiptRefNestedInput
    player1?: MatchHistoryUpdateManyWithoutPlayer1RefNestedInput
    player2?: MatchHistoryUpdateManyWithoutPlayer2RefNestedInput
  }

  export type UserUncheckedUpdateWithoutWinnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    login?: NullableStringFieldUpdateOperationsInput | string | null
    nickname?: StringFieldUpdateOperationsInput | string
    avatarURL?: StringFieldUpdateOperationsInput | string
    requester?: FriendUncheckedUpdateManyWithoutRequesterRefNestedInput
    requestee?: FriendUncheckedUpdateManyWithoutRequesteeRefNestedInput
    blocker?: BlockedUncheckedUpdateManyWithoutBlockerRefNestedInput
    blockee?: BlockedUncheckedUpdateManyWithoutBlockeeRefNestedInput
    owner?: ChannelUncheckedUpdateManyWithoutOwnerRefNestedInput
    member?: ChanMemberUncheckedUpdateManyWithoutMemberRefNestedInput
    banned?: ChanBanUncheckedUpdateManyWithoutBannedRefNestedInput
    chanSender?: ChanMessageUncheckedUpdateManyWithoutSenderRefNestedInput
    privSender?: PrivMessageUncheckedUpdateManyWithoutSenderRefNestedInput
    privReceipt?: PrivMessageUncheckedUpdateManyWithoutReceiptRefNestedInput
    player1?: MatchHistoryUncheckedUpdateManyWithoutPlayer1RefNestedInput
    player2?: MatchHistoryUncheckedUpdateManyWithoutPlayer2RefNestedInput
  }

  export type FriendCreateManyRequesterRefInput = {
    requestee: number
    status?: boolean
  }

  export type FriendCreateManyRequesteeRefInput = {
    requester: number
    status?: boolean
  }

  export type BlockedCreateManyBlockerRefInput = {
    blockee: number
  }

  export type BlockedCreateManyBlockeeRefInput = {
    blocker: number
  }

  export type ChannelCreateManyOwnerRefInput = {
    id?: number
    name: string
    type?: ChanType
    passwd?: string | null
  }

  export type ChanMemberCreateManyMemberRefInput = {
    chanId: number
    isAdmin?: boolean
    muteTime?: Date | string
  }

  export type ChanBanCreateManyBannedRefInput = {
    chanId: number
  }

  export type ChanMessageCreateManySenderRefInput = {
    chanId: number
    timeSent?: Date | string
    content: string
  }

  export type PrivMessageCreateManySenderRefInput = {
    recipient: number
    timeSent?: Date | string
    content: string
  }

  export type PrivMessageCreateManyReceiptRefInput = {
    sender: number
    timeSent?: Date | string
    content: string
  }

  export type MatchHistoryCreateManyPlayer1RefInput = {
    id: number
    player2: number
    timeStart?: Date | string
    timeEnd?: Date | string | null
    winner?: number | null
  }

  export type MatchHistoryCreateManyPlayer2RefInput = {
    id: number
    player1: number
    timeStart?: Date | string
    timeEnd?: Date | string | null
    winner?: number | null
  }

  export type MatchHistoryCreateManyWinnerRefInput = {
    id: number
    player1: number
    player2: number
    timeStart?: Date | string
    timeEnd?: Date | string | null
  }

  export type FriendUpdateWithoutRequesterRefInput = {
    status?: BoolFieldUpdateOperationsInput | boolean
    requesteeRef?: UserUpdateOneRequiredWithoutRequesteeNestedInput
  }

  export type FriendUncheckedUpdateWithoutRequesterRefInput = {
    requestee?: IntFieldUpdateOperationsInput | number
    status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FriendUncheckedUpdateManyWithoutRequesterInput = {
    requestee?: IntFieldUpdateOperationsInput | number
    status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FriendUpdateWithoutRequesteeRefInput = {
    status?: BoolFieldUpdateOperationsInput | boolean
    requesterRef?: UserUpdateOneRequiredWithoutRequesterNestedInput
  }

  export type FriendUncheckedUpdateWithoutRequesteeRefInput = {
    requester?: IntFieldUpdateOperationsInput | number
    status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FriendUncheckedUpdateManyWithoutRequesteeInput = {
    requester?: IntFieldUpdateOperationsInput | number
    status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type BlockedUpdateWithoutBlockerRefInput = {
    blockeeRef?: UserUpdateOneRequiredWithoutBlockeeNestedInput
  }

  export type BlockedUncheckedUpdateWithoutBlockerRefInput = {
    blockee?: IntFieldUpdateOperationsInput | number
  }

  export type BlockedUncheckedUpdateManyWithoutBlockerInput = {
    blockee?: IntFieldUpdateOperationsInput | number
  }

  export type BlockedUpdateWithoutBlockeeRefInput = {
    blockerRef?: UserUpdateOneRequiredWithoutBlockerNestedInput
  }

  export type BlockedUncheckedUpdateWithoutBlockeeRefInput = {
    blocker?: IntFieldUpdateOperationsInput | number
  }

  export type BlockedUncheckedUpdateManyWithoutBlockeeInput = {
    blocker?: IntFieldUpdateOperationsInput | number
  }

  export type ChannelUpdateWithoutOwnerRefInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumChanTypeFieldUpdateOperationsInput | ChanType
    passwd?: NullableStringFieldUpdateOperationsInput | string | null
    memChan?: ChanMemberUpdateManyWithoutChanRefNestedInput
    banChan?: ChanBanUpdateManyWithoutChanRefNestedInput
    messChan?: ChanMessageUpdateManyWithoutChanRefNestedInput
  }

  export type ChannelUncheckedUpdateWithoutOwnerRefInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumChanTypeFieldUpdateOperationsInput | ChanType
    passwd?: NullableStringFieldUpdateOperationsInput | string | null
    memChan?: ChanMemberUncheckedUpdateManyWithoutChanRefNestedInput
    banChan?: ChanBanUncheckedUpdateManyWithoutChanRefNestedInput
    messChan?: ChanMessageUncheckedUpdateManyWithoutChanRefNestedInput
  }

  export type ChannelUncheckedUpdateManyWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumChanTypeFieldUpdateOperationsInput | ChanType
    passwd?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChanMemberUpdateWithoutMemberRefInput = {
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    muteTime?: DateTimeFieldUpdateOperationsInput | Date | string
    chanRef?: ChannelUpdateOneRequiredWithoutMemChanNestedInput
  }

  export type ChanMemberUncheckedUpdateWithoutMemberRefInput = {
    chanId?: IntFieldUpdateOperationsInput | number
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    muteTime?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChanMemberUncheckedUpdateManyWithoutMemberInput = {
    chanId?: IntFieldUpdateOperationsInput | number
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    muteTime?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChanBanUpdateWithoutBannedRefInput = {
    chanRef?: ChannelUpdateOneRequiredWithoutBanChanNestedInput
  }

  export type ChanBanUncheckedUpdateWithoutBannedRefInput = {
    chanId?: IntFieldUpdateOperationsInput | number
  }

  export type ChanBanUncheckedUpdateManyWithoutBannedInput = {
    chanId?: IntFieldUpdateOperationsInput | number
  }

  export type ChanMessageUpdateWithoutSenderRefInput = {
    timeSent?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    chanRef?: ChannelUpdateOneRequiredWithoutMessChanNestedInput
  }

  export type ChanMessageUncheckedUpdateWithoutSenderRefInput = {
    chanId?: IntFieldUpdateOperationsInput | number
    timeSent?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type ChanMessageUncheckedUpdateManyWithoutChanSenderInput = {
    chanId?: IntFieldUpdateOperationsInput | number
    timeSent?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type PrivMessageUpdateWithoutSenderRefInput = {
    timeSent?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    receiptRef?: UserUpdateOneRequiredWithoutPrivReceiptNestedInput
  }

  export type PrivMessageUncheckedUpdateWithoutSenderRefInput = {
    recipient?: IntFieldUpdateOperationsInput | number
    timeSent?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type PrivMessageUncheckedUpdateManyWithoutPrivSenderInput = {
    recipient?: IntFieldUpdateOperationsInput | number
    timeSent?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type PrivMessageUpdateWithoutReceiptRefInput = {
    timeSent?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    senderRef?: UserUpdateOneRequiredWithoutPrivSenderNestedInput
  }

  export type PrivMessageUncheckedUpdateWithoutReceiptRefInput = {
    sender?: IntFieldUpdateOperationsInput | number
    timeSent?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type PrivMessageUncheckedUpdateManyWithoutPrivReceiptInput = {
    sender?: IntFieldUpdateOperationsInput | number
    timeSent?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type MatchHistoryUpdateWithoutPlayer1RefInput = {
    id?: IntFieldUpdateOperationsInput | number
    timeStart?: DateTimeFieldUpdateOperationsInput | Date | string
    timeEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    player2Ref?: UserUpdateOneRequiredWithoutPlayer2NestedInput
    winnerRef?: UserUpdateOneWithoutWinnerNestedInput
  }

  export type MatchHistoryUncheckedUpdateWithoutPlayer1RefInput = {
    id?: IntFieldUpdateOperationsInput | number
    player2?: IntFieldUpdateOperationsInput | number
    timeStart?: DateTimeFieldUpdateOperationsInput | Date | string
    timeEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    winner?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type MatchHistoryUncheckedUpdateManyWithoutPlayer1Input = {
    id?: IntFieldUpdateOperationsInput | number
    player2?: IntFieldUpdateOperationsInput | number
    timeStart?: DateTimeFieldUpdateOperationsInput | Date | string
    timeEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    winner?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type MatchHistoryUpdateWithoutPlayer2RefInput = {
    id?: IntFieldUpdateOperationsInput | number
    timeStart?: DateTimeFieldUpdateOperationsInput | Date | string
    timeEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    player1Ref?: UserUpdateOneRequiredWithoutPlayer1NestedInput
    winnerRef?: UserUpdateOneWithoutWinnerNestedInput
  }

  export type MatchHistoryUncheckedUpdateWithoutPlayer2RefInput = {
    id?: IntFieldUpdateOperationsInput | number
    player1?: IntFieldUpdateOperationsInput | number
    timeStart?: DateTimeFieldUpdateOperationsInput | Date | string
    timeEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    winner?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type MatchHistoryUncheckedUpdateManyWithoutPlayer2Input = {
    id?: IntFieldUpdateOperationsInput | number
    player1?: IntFieldUpdateOperationsInput | number
    timeStart?: DateTimeFieldUpdateOperationsInput | Date | string
    timeEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    winner?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type MatchHistoryUpdateWithoutWinnerRefInput = {
    id?: IntFieldUpdateOperationsInput | number
    timeStart?: DateTimeFieldUpdateOperationsInput | Date | string
    timeEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    player1Ref?: UserUpdateOneRequiredWithoutPlayer1NestedInput
    player2Ref?: UserUpdateOneRequiredWithoutPlayer2NestedInput
  }

  export type MatchHistoryUncheckedUpdateWithoutWinnerRefInput = {
    id?: IntFieldUpdateOperationsInput | number
    player1?: IntFieldUpdateOperationsInput | number
    player2?: IntFieldUpdateOperationsInput | number
    timeStart?: DateTimeFieldUpdateOperationsInput | Date | string
    timeEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MatchHistoryUncheckedUpdateManyWithoutWinnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    player1?: IntFieldUpdateOperationsInput | number
    player2?: IntFieldUpdateOperationsInput | number
    timeStart?: DateTimeFieldUpdateOperationsInput | Date | string
    timeEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ChanMemberCreateManyChanRefInput = {
    member: number
    isAdmin?: boolean
    muteTime?: Date | string
  }

  export type ChanBanCreateManyChanRefInput = {
    bannedUser: number
  }

  export type ChanMessageCreateManyChanRefInput = {
    sender: number
    timeSent?: Date | string
    content: string
  }

  export type ChanMemberUpdateWithoutChanRefInput = {
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    muteTime?: DateTimeFieldUpdateOperationsInput | Date | string
    memberRef?: UserUpdateOneRequiredWithoutMemberNestedInput
  }

  export type ChanMemberUncheckedUpdateWithoutChanRefInput = {
    member?: IntFieldUpdateOperationsInput | number
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    muteTime?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChanMemberUncheckedUpdateManyWithoutMemChanInput = {
    member?: IntFieldUpdateOperationsInput | number
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    muteTime?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChanBanUpdateWithoutChanRefInput = {
    bannedRef?: UserUpdateOneRequiredWithoutBannedNestedInput
  }

  export type ChanBanUncheckedUpdateWithoutChanRefInput = {
    bannedUser?: IntFieldUpdateOperationsInput | number
  }

  export type ChanBanUncheckedUpdateManyWithoutBanChanInput = {
    bannedUser?: IntFieldUpdateOperationsInput | number
  }

  export type ChanMessageUpdateWithoutChanRefInput = {
    timeSent?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    senderRef?: UserUpdateOneRequiredWithoutChanSenderNestedInput
  }

  export type ChanMessageUncheckedUpdateWithoutChanRefInput = {
    sender?: IntFieldUpdateOperationsInput | number
    timeSent?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type ChanMessageUncheckedUpdateManyWithoutMessChanInput = {
    sender?: IntFieldUpdateOperationsInput | number
    timeSent?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}